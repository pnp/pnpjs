{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>PnPjs is a collection of fluent libraries for consuming SharePoint, Graph, and Office 365 REST APIs in a type-safe way. You can use it within SharePoint Framework, Nodejs, or any JavaScript project. This an open source initiative and we encourage contributions and constructive feedback from the community.</p> <p>These articles provide general guidance for working with the libraries. If you are migrating from V2 please review the transition guide.</p> <ul> <li>Getting Started</li> <li>Authentication</li> <li>Get Started Contributing</li> </ul> <p></p> <p>Animation of the library in use, note intellisense help in building your queries</p>"},{"location":"#packages","title":"Packages","text":"<p>Patterns and Practices client side libraries (PnPjs) are comprised of the packages listed below. All of the packages are published as a set and depend on their peers within the @pnp scope.</p> <p>The latest published version is .</p> @pnp/ azidjsclient Provides an Azure Identity wrapper suitable for use with PnPjs core Provides shared functionality across all pnp libraries graph Provides a fluent api for working with Microsoft Graph logging Light-weight, subscribable logging framework msaljsclient Provides an msal wrapper suitable for use with PnPjs nodejs Provides functionality enabling the @pnp libraries within nodejs queryable Provides shared query functionality and base classes sp Provides a fluent api for working with SharePoint REST sp-admin Provides a fluent api for working with M365 Tenant admin methods"},{"location":"#authentication","title":"Authentication","text":"<p>We have a new section dedicated to helping you figure out the best way to handle authentication in your application, check it out!</p>"},{"location":"#issues-questions-ideas","title":"Issues, Questions, Ideas","text":"<p>Please log an issue using our template as a guide. This will let us track your request and ensure we respond. We appreciate any constructive feedback, questions, ideas, or bug reports with our thanks for giving back to the project.</p>"},{"location":"#changelog","title":"Changelog","text":"<p>Please review the CHANGELOG for release details on all library changes.</p>"},{"location":"#code-of-conduct","title":"Code of Conduct","text":"<p>This project has adopted the Microsoft Open Source Code of Conduct. For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.</p>"},{"location":"#sharing-is-caring","title":"\"Sharing is Caring\"","text":"<p>Please use http://aka.ms/community/home for the latest updates around the whole Microsoft 365 and Power Platform Community(PnP) initiative.</p>"},{"location":"#disclaimer","title":"Disclaimer","text":"<p>THIS CODE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This library is geared towards folks working with TypeScript but will work equally well for JavaScript projects. To get started you need to install the libraries you need via npm. Many of the packages have a peer dependency to other packages with the @pnp namespace meaning you may need to install more than one package. All packages are released together eliminating version confusion - all packages will depend on packages with the same version number.</p> <p>If you need to support older browsers, SharePoint on-premisis servers, or older versions of the SharePoint Framework, please revert to version 2 of the library and see related documentation on polyfills for required functionality.</p>"},{"location":"getting-started/#minimal-requirements","title":"Minimal Requirements","text":"<pre><code>- NodeJs: &gt;= 14\n- TypeScript: 4.x\n- Node Modules Supported: ESM Only\n</code></pre>"},{"location":"getting-started/#install","title":"Install","text":"<p>First you will need to install those libraries you want to use in your application. Here we will install the most frequently used packages. <code>@pnp/sp</code> to access the SharePoint REST API and <code>@pnp/graph</code> to access some of the Microsoft Graph API. This step applies to any environment or project.</p> <p><code>npm install @pnp/sp @pnp/graph --save</code></p> <p>Next we can import and use the functionality within our application. Below is a very simple example, please see the individual package documentation for more details and examples.</p> <pre><code>import { getRandomString } from \"@pnp/core\";\n\n(function() {\n\n    // get and log a random string\n    console.log(getRandomString(20));\n\n})()\n</code></pre>"},{"location":"getting-started/#getting-started-with-sharepoint-framework","title":"Getting Started with SharePoint Framework","text":"<p>The @pnp/sp and @pnp/graph libraries are designed to work seamlessly within SharePoint Framework projects with a small amount of upfront configuration. If you are running in 2016 or 2019 on-premises you will need to use version 2 of the library. If you are targeting SharePoint online you will need to take the additional steps outlined below based on the version of the SharePoint Framework you are targeting.</p> <p>We've created two Getting Started samples. The first uses the more traditional React Component classes and can be found in the react-pnp-js-sample project, utilizing SPFx 1.15.2 and PnPjs V3, it showcases some of the more dramatic changes to the library. There is also a companion video series on YouTube if you prefer to see things done through that medium here's a link to the playlist for the 5 part series:</p> <p>Getting started with PnPjs 3.0: 5-part series</p> <p>In addition, we have converted the sample project from React Component to React Hooks. This version can be found in react-pnp-js-hooks. This sample will help those struggling to establish context correctly while using the hooks conventions.</p> <p>The SharePoint Framework supports different versions of TypeScript natively and as of 1.14 release still doesn't natively support TypeScript 4.x. Sadly, this means that to use Version 3 of PnPjs you will need to take a few additional configuration steps to get them to work together.</p>"},{"location":"getting-started/#spfx-version-1150-later","title":"SPFx Version 1.15.0 &amp; later","text":"<p>No additional steps required</p>"},{"location":"getting-started/#spfx-version-1121-1140","title":"SPFx Version 1.12.1 =&gt; 1.14.0","text":"<ol> <li> <p>Update the rush stack compiler to 4.2. This is covered in this great article by Elio, but the steps are listed below.</p> <ul> <li>Uninstall existing rush stack compiler (replace the ? with the version that is currently referenced in your package.json):   <code>npm uninstall @microsoft/rush-stack-compiler-3.?</code></li> <li>Install 4.2 version:   <code>npm i @microsoft/rush-stack-compiler-4.2</code></li> <li>Update tsconfig.json to extend the 4.2 config:   <code>\"extends\": \"./node_modules/@microsoft/rush-stack-compiler-4.2/includes/tsconfig-web.json\"</code></li> </ul> </li> <li> <p>Replace the contents of the gulpfile.js with:     &gt;Note: The only change is the addition of the line to disable tslint.</p> <p>```js 'use strict';</p> <p>const build = require('@microsoft/sp-build-web');</p> <p>build.addSuppression(<code>Warning - [sass] The local CSS class 'ms-Grid' is not camelCase and will not be type-safe.</code>);</p> <p>var getTasks = build.rig.getTasks; build.rig.getTasks = function () {     var result = getTasks.call(build.rig);</p> <pre><code>result.set('serve', result.get('serve-deprecated'));\n\nreturn result;\n</code></pre> <p>};</p> <p>// * ADDED * // disable tslint build.tslintCmd.enabled = false; // * ADDED *</p> <p>build.initialize(require('gulp')); ```</p> </li> </ol>"},{"location":"getting-started/#spfx-version-1110-earlier","title":"SPFx Version 1.11.0 &amp; earlier","text":"<p>At this time there is no documented method to use version 3.x with SPFx versions earlier than 1.12.1. We recommend that you fall back to using version 2 of the library or update your SPFx version.</p>"},{"location":"getting-started/#imports-and-usage","title":"Imports and usage","text":"<p>Because SharePoint Framework provides a local context to each component we need to set that context within the library. This allows us to determine request urls as well as use the SPFx HttpGraphClient within @pnp/graph. To establish context within the library you will need to use the SharePoint or Graph Factory Interface depending on which set of APIs you want to utilize. For SharePoint you will use the <code>spfi</code> interface and for the Microsoft Graph you will use the <code>graphfi</code> interface whic are both in the main export of the corresponding package. Examples of both methods are shown below.</p> <p>Depending on how you architect your solution establishing context is done where you want to make calls to the API. The examples demonstrate doing so in the onInit method as a local variable but this could also be done to a private variable or passed into a service.</p> <p>Note if you are going to use both the @pnp/sp and @pnp/graph packages in SPFx you will need to alias the SPFx behavior import, please see the section below for more details.</p>"},{"location":"getting-started/#using-pnpsp-spfi-factory-interface-in-spfx","title":"Using @pnp/sp <code>spfi</code> factory interface in SPFx","text":"<pre><code>import { spfi, SPFx } from \"@pnp/sp\";\n\n// ...\n\nprotected async onInit(): Promise&lt;void&gt; {\n\n    await super.onInit();\n    const sp = spfi().using(SPFx(this.context));\n\n}\n\n// ...\n\n</code></pre>"},{"location":"getting-started/#using-pnpgraph-graphfi-factory-interface-in-spfx","title":"Using @pnp/graph <code>graphfi</code> factory interface in SPFx","text":"<pre><code>import { graphfi, SPFx } from \"@pnp/graph\";\n\n// ...\n\nprotected async onInit(): Promise&lt;void&gt; {\n\n    await super.onInit();\n    const graph = graphfi().using(SPFx(this.context));\n\n}\n\n// ...\n\n</code></pre>"},{"location":"getting-started/#using-both-pnpsp-and-pnpgraph-in-spfx","title":"Using both @pnp/sp and @pnp/graph in SPFx","text":"<pre><code>\nimport { spfi, SPFx as spSPFx } from \"@pnp/sp\";\nimport { graphfi, SPFx as graphSPFx} from \"@pnp/graph\";\n\n// ...\n\nprotected async onInit(): Promise&lt;void&gt; {\n\n    await super.onInit();\n    const sp = spfi().using(spSPFx(this.context));\n    const graph = graphfi().using(graphSPFx(this.context));\n\n}\n\n// ...\n\n</code></pre>"},{"location":"getting-started/#project-configservices-setup","title":"Project Config/Services Setup","text":"<p>Please see the documentation on setting up a config file or a services for more information about establishing and instance of the spfi or graphfi interfaces that can be reused. It is a common mistake with users of V3 that they try and create the interface in event handlers which causes issues.</p>"},{"location":"getting-started/#getting-started-with-nodejs","title":"Getting started with NodeJS","text":"<p>Due to the way in which Node resolves ESM modules when you use selective imports in node you must include the <code>index.js</code> part of the path. Meaning an import like <code>import \"@pnp/sp/webs\"</code> in examples must be <code>import \"@pnp/sp/webs/index.js\"</code>. Root level imports such as <code>import { spfi } from \"@pnp/sp\"</code> remain correct. The samples in this section demonstrate this for their selective imports.</p>"},{"location":"getting-started/#importing-nodejs-support","title":"Importing NodeJS support","text":"<p>Note that the NodeJS integration relies on code in the module <code>@pnp/nodejs</code>. It is therefore required that you import this near the beginning of your program, using simply</p> <p><code>js import \"@pnp/nodejs\";</code></p>"},{"location":"getting-started/#authentication","title":"Authentication","text":"<p>To call the SharePoint APIs via MSAL you are required to use certificate authentication with your application. Fully covering certificates is outside the scope of these docs, but the following commands were used with openssl to create testing certs for the sample code below.</p> <pre><code>mkdir \\temp\ncd \\temp\nopenssl req -x509 -newkey rsa:2048 -keyout keytmp.pem -out cert.pem -days 365 -passout pass:HereIsMySuperPass -subj '/C=US/ST=Washington/L=Seattle'\nopenssl rsa -in keytmp.pem -out key.pem -passin pass:HereIsMySuperPass\n</code></pre> <p>Using the above code you end up with three files, \"cert.pem\", \"key.pem\", and \"keytmp.pem\". The \"cert.pem\" file is uploaded to your AAD application registration. The \"key.pem\" is read as the private key for the configuration.</p>"},{"location":"getting-started/#using-pnpsp-spfi-factory-interface-in-nodejs","title":"Using @pnp/sp <code>spfi</code> factory interface in NodeJS","text":"<p>Version 3 of this library only supports ESModules. If you still require commonjs modules please check out version 2.</p> <p>The first step is to install the packages that will be needed. You can read more about what each package does starting on the packages page.</p> <pre><code>npm i @pnp/sp @pnp/nodejs\n</code></pre> <p>Once these are installed you need to import them into your project, to communicate with SharePoint from node we'll need the following imports:</p> <pre><code>\nimport { SPDefault } from \"@pnp/nodejs\";\nimport \"@pnp/sp/webs/index.js\";\nimport { readFileSync } from 'fs';\nimport { Configuration } from \"@azure/msal-node\";\n\nfunction() {\n    // configure your node options (only once in your application)\n    const buffer = readFileSync(\"c:/temp/key.pem\");\n\n    const config: Configuration = {\n        auth: {\n            authority: \"https://login.microsoftonline.com/{tenant id or common}/\",\n            clientId: \"{application (client) i}\",\n            clientCertificate: {\n              thumbprint: \"{certificate thumbprint, displayed in AAD}\",\n              privateKey: buffer.toString(),\n            },\n        },\n    };\n\n    const sp = spfi().using(SPDefault({\n        baseUrl: 'https://{my tenant}.sharepoint.com/sites/dev/',\n        msal: {\n            config: config,\n            scopes: [ 'https://{my tenant}.sharepoint.com/.default' ]\n        }\n    }));\n\n    // make a call to SharePoint and log it in the console\n    const w = await sp.web.select(\"Title\", \"Description\")();\n    console.log(JSON.stringify(w, null, 4));\n}();\n</code></pre>"},{"location":"getting-started/#using-pnpgraph-graphfi-factory-interface-in-nodejs","title":"Using @pnp/graph <code>graphfi</code> factory interface in NodeJS","text":"<p>Similar to the above you can also make calls to the Microsoft Graph API from node using the libraries. Again we start with installing the required resources. You can see ./debug/launch/graph.ts for a live example.</p> <pre><code>npm i @pnp/graph @pnp/nodejs\n</code></pre> <p>Now we need to import what we'll need to call graph</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport { GraphDefault } from \"@pnp/nodejs\";\nimport \"@pnp/graph/users/index.js\";\n\nfunction() {\n    const graph = graphfi().using(GraphDefault({\n    baseUrl: 'https://graph.microsoft.com',\n    msal: {\n        config: config,\n        scopes: [ 'https://graph.microsoft.com/.default' ]\n    }\n    }));\n    // make a call to Graph and get all the groups\n    const userInfo = await graph.users.top(1)();\n    console.log(JSON.stringify(userInfo, null, 4));\n}();\n</code></pre>"},{"location":"getting-started/#node-project-using-typescript-producing-commonjs-modules","title":"Node project using TypeScript producing commonjs modules","text":"<p>For TypeScript projects which output commonjs but need to import esm modules you will need to take a few additional steps to use the pnp esm modules. This is true of any esm module with a project structured in this way, not specific to PnP's implementation. It is very possible there are other configurations that make this work, but these steps worked in our testing. We have also provided a basic sample showing this setup.</p> <p>You must install TypeScript @next or you will get errors using node12 module resolution. This may change but is the current behavior when we did our testing.</p> <p><code>npm install -D typescript@next</code></p> <p>The tsconfig file for your project should have the <code>\"module\": \"CommonJS\"</code> and <code>\"moduleResolution\": \"node12\",</code> settings in addition to whatever else you need.</p> <p>tsconfig.json</p> <pre><code>{\n    \"compilerOptions\": {\n        \"module\": \"CommonJS\",\n        \"moduleResolution\": \"node12\"\n}\n</code></pre> <p>You must then import the esm dependencies using the async import pattern. This works as expected with our selective imports, and vscode will pick up the intellisense as expected.</p> <p>index.ts</p> <pre><code>import { settings } from \"./settings.js\";\n\n// this is a simple example as async await is not supported with commonjs output\n// at the root.\nsetTimeout(async () =&gt; {\n\n    const { spfi } = await import(\"@pnp/sp\");\n    const { SPDefault } = await import(\"@pnp/nodejs\");\n    await import(\"@pnp/sp/webs/index.js\");\n\n    const sp = spfi().using(SPDefault({\n        baseUrl: settings.testing.sp.url,\n        msal: {\n            config: settings.testing.sp.msal.init,\n            scopes: settings.testing.sp.msal.scopes\n        }\n    }));\n\n    // make a call to SharePoint and log it in the console\n    const w = await sp.web.select(\"Title\", \"Description\")();\n    console.log(JSON.stringify(w, null, 4));\n\n}, 0);\n</code></pre> <p>Finally, when launching node you need to include the `` flag with a setting of 'node'.</p> <p><code>node --experimental-specifier-resolution=node dist/index.js</code></p> <p>Read more in the releated TypeScript Issue, TS pull request Adding the functionality, and the TS Docs.</p>"},{"location":"getting-started/#single-page-application-context","title":"Single Page Application Context","text":"<p>In some cases you may be working in a client-side application that doesn't have context to the SharePoint site. In that case you will need to utilize the MSAL Client, you can get the details on creating that connection in this article.</p>"},{"location":"getting-started/#selective-imports","title":"Selective Imports","text":"<p>This library has a lot of functionality and you may not need all of it. For that reason, we support selective imports which allow you to only import the parts of the sp or graph library you need, which reduces your overall solution bundle size - and enables treeshaking.</p> <p>You can read more about selective imports.</p>"},{"location":"getting-started/#error-handling","title":"Error Handling","text":"<p>This article describes the most common types of errors generated by the library. It provides context on the error object, and ways to handle the errors. As always you should tailor your error handling to what your application needs. These are ideas that can be applied to many different patterns.</p>"},{"location":"getting-started/#extending-the-library","title":"Extending the Library","text":"<p>Because of the way the fluent library is designed by definition it's extendible. That means that if you want to build your own custom functions that extend the features of the library this can be done fairly simply. To get more information about creating your own custom extensions check out extending the library article.</p>"},{"location":"getting-started/#connect-to-a-different-web","title":"Connect to a different Web","text":"<p>The new factory function allows you to create a connection to a different web maintaining the same setup as your existing interface. You have two options, either to  'AssignFrom' or 'CopyFrom' the base timeline's observers. The below example utilizes 'AssignFrom' but the method would be the same regadless of which route you choose. For more information on these behaviors see Core/Behaviors.</p> <pre><code>import { spfi, SPFx } from \"@pnp/sp\";\nimport { AssignFrom } from \"@pnp/core\";\nimport \"@pnp/sp/webs\";\n\n//Connection to the current context's Web\nconst sp = spfi(...);\n\n// Option 1: Create a new instance of Queryable\nconst spWebB = spfi({Other Web URL}).using(SPFx(this.context));\n\n// Option 2: Copy/Assign a new instance of Queryable using the existing\nconst spWebB = spfi({Other Web URL}).using(AssignFrom(sp.web));\n\n// Option 3: Create a new instance of Queryable using other credentials?\nconst spWebB = spfi({Other Web URL}).using(SPFx(this.context));\n\n// Option 4: Create new Web instance by using copying SPQuerable and new pointing to new web url (e.g. https://contoso.sharepoint.com/sites/Web2)\nconst web = Web([sp.web, {Other Web URL}]);\n</code></pre>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<p>For more complicated authentication scnearios please review the article describing all of the available authentication methods.</p>"},{"location":"packages/","title":"Packages","text":"<p>The following packages comprise the Patterns and Practices client side libraries. All of the packages are published as a set and depend on their peers within the @pnp scope.</p> <p>The latest published version is .</p>"},{"location":"packages/#core","title":"Core","text":"<p>Central to everything PnPjs builds on with utility methods, Timeline, the behavior plumbing, and the extendable framework.</p> <p><code>npm install @pnp/core --save</code></p>"},{"location":"packages/#graph","title":"Graph","text":"<p>This package provides a fluent SDK for calling the Microsoft Graph.</p> <p><code>npm install @pnp/graph --save</code></p>"},{"location":"packages/#logging","title":"Logging","text":"<p>A light-weight, subscribable logging framework.</p> <p><code>npm install @pnp/logging --save</code></p>"},{"location":"packages/#msal-js-client","title":"MSAL JS Client","text":"<p>Provides an msal wrapper suitable for use with PnPjs's request structure.</p> <p><code>npm install @pnp/msaljsclient --save</code></p>"},{"location":"packages/#nodejs","title":"Nodejs","text":"<p>Provides functionality enabling the @pnp libraries within nodejs, including extension methods for working with streams.</p> <p><code>npm install @pnp/nodejs --save</code></p>"},{"location":"packages/#queryable","title":"Queryable","text":"<p>Extending Timeline this package provides the base functionality to create web requests in a fluent manner. It defines the available moments to which observers are subscribed for building the request.</p> <p><code>npm install @pnp/queryable --save</code></p>"},{"location":"packages/#sp","title":"SP","text":"<p>This package provides a fluent SDK for calling SharePoint.</p> <p><code>npm install @pnp/sp --save</code></p>"},{"location":"packages/#sp-admin","title":"SP-Admin","text":"<p>This package provides a fluent SDK for calling SharePoint tenant admin APIs</p> <p><code>npm install @pnp/sp-admin --save</code></p>"},{"location":"transition-guide/","title":"Transition Guide","text":"<p>It is our hope that the transition from version 2.* to 3.* will be as painless as possible, however given the transition we have made from a global sp object to an instance based object some architectural and inital setup changes will need to be addressed. In the following sections we endevor to provide an overview of what changes will be required. If we missed something, please let us know in the issues list so we can update the guide. Thanks!</p> <p>For a full, detailed list of what's been added, updated, and removed please see our CHANGELOG</p> <p>For a full sample project, utilizing SPFx 1.14 and V3 that showcases some of the more dramatic changes to the library check out this sample.</p>"},{"location":"transition-guide/#benefits-and-advancements-in-v3","title":"Benefits and Advancements in V3","text":"<p>For version 2 the core themes were selective imports, a model based on factory functions &amp; interfaces, and improving the docs. This foundation gave us the opportunity to re-write the entire request pipeline internals with minimal external library changes - showing a bit of long-term planning \ud83d\ude42. With version 3 your required updates are likely to only affect the initial configuration of the library, a huge accomplishment when updating the entire internals.</p> <p>Our request pipeline remained largely unchanged since it was first written ~5 years ago, hard to change something so central to the library. The advantage of this update it is now easy for developers to inject their own logic into the request process. As always, this work was based on feedback over the years and understanding how we can be a better library. The new observer design allows you to customize every aspect of the request, in a much clearer way than was previously possible. In addition this work greatly reduced internal boilerplate code and optimized for library size. We reduced the size of sp &amp; graph libraries by almost 2/3. As well we embraced a fully async design built around the new Timeline. Check out the new model around authoring observers and understand how they relate to moments. We feel this new architecture will allow far greater flexibility for consumers of the library to customize the behavior to exactly meet their needs.</p> <p>We also used this as an opportunity to remove duplicate methods, clean up and improve our typings &amp; method signatures, and drop legacy methods. Be sure to review the changelog. As always we do our best to minimize breaking changes but major versions are breaking versions.</p> <p>We thank you for using the library. Your continued feedback drives these improvements, and we look forward to seeing what you build!</p>"},{"location":"transition-guide/#global-vs-instance-architecture","title":"Global vs Instance Architecture","text":"<p>The biggest change in version 3 of the library is the movement away from the globally defined sp and graph objects. Starting in version 2.1.0 we added the concept of <code>Isolated Runtime</code> which allowed you to create a separate instance of the global object that would have a separate configuration. We found that the implementation was finicky and prone to issues, so we have rebuilt the internals of the library from the ground up to better address this need. In doing so, we decided not to offer a global object at all.</p> <p>Because of this change, any architecture that relies on the <code>sp</code> or <code>graph</code> objects being configured during initialization and then reused throughout the solution will need to be rethought. Essentially you have three options:</p> <ol> <li>Create a new <code>spfi</code>/<code>graphfi</code> object wherever it's required.</li> <li>Create a service architecture that can return a previously configured instance or utilize an instance and return the results</li> <li>Utilize a Project Preset file.</li> </ol> <p>In other words, the <code>sp</code> and <code>graph</code> objects have been deprecated and will need to be replaced.</p> <p>For more information on getting started with these new setup methods please see the Getting Started docs for a deeper look into the Queryable interface see Queryable.</p>"},{"location":"transition-guide/#assignfrom-and-copyfrom","title":"AssignFrom and CopyFrom","text":"<p>With the new Querable instance architecture we have provided a way to branch from one instance to another. To do this we provide two methods: AssignFrom and CopyFrom. These methods can be helpful when you want to establish a new instance to which you might apply other behaviors but want to reuse the configuration from a source. To learn more about them check out the Core/Behaviors documentation.</p>"},{"location":"transition-guide/#dropping-get","title":"Dropping \".get()\"","text":"<p>If you are still using the <code>queryableInstance.get()</code> method of queryable you must replace it with a direct invoke call <code>queryableInstance()</code>.</p>"},{"location":"transition-guide/#batching","title":"Batching","text":"<p>Another benefit of the new updated internals is a significantly streamlined and simplified process for batching requests. Essentially, the interface for SP and Graph now function the same.</p> <p>A new module called \"batching\" will need to be imported which then provides the batched interface which will return a tuple with a new Querable instance and an execute function. To see more details check out Batching.</p>"},{"location":"transition-guide/#web-spfi","title":"Web -&gt; SPFI","text":"<p>In V2, to connect to a different web you would use the function</p> <pre><code>const web = Web({Other Web URL});\n</code></pre> <p>In V3 you would create a new instance of queryable connecting to the web of your choice. This new method provides you significantly more flexibility by not only allowing you to easily connect to other webs in the same tenant but also to webs in other tenants.</p> <p>We are seeing a significant number of people report an error when using this method:</p> <p><code>No observers registered for this request.</code></p> <p>which results when it hasn't been updated to use the version 3 convention. Please see the examples below to pick the one that most suits your codebase.</p> <pre><code>import { spfi, SPFx } from \"@pnp/sp\";\nimport { Web } from \"@pnp/sp/webs\";\n\nconst spWebA = spfi().using(SPFx(this.context));\n\n// Easiest transition is to use the tuple pattern and the Web constructor which will copy all the observers from the object but set the url to the one provided\nconst spWebE = Web([spWebA.web, \"{Absolute URL of Other Web}\"]);\n\n// Create a new instance of Queryable\nconst spWebB = spfi(\"{Other Web URL}\").using(SPFx(this.context));\n\n// Copy/Assign a new instance of Queryable using the existing\nconst spWebC = spfi(\"{Other Web URL}\").using(AssignFrom(sp.web));\n\n// Create a new instance of Queryable using other credentials?\nconst spWebD = spfi(\"{Other Web URL}\").using(SPFx(this.context));\n\n</code></pre> <p>Please see the documentation for more information on the updated Web constructor.</p>"},{"location":"transition-guide/#dropping-commonjs-packages","title":"Dropping -Commonjs Packages","text":"<p>Starting with v3 we are dropping the commonjs versions of all packages. Previously we released these as we worked to transition to esm and the current node didn't yet support esm. With esm now a supported module type, and having done the work to ensure they work in node we feel it is a good time to drop the -commonjs variants. Please see documentation on Getting started with NodeJS Project using TypeScript producing CommonJS modules</p>"},{"location":"azidjsclient/","title":"@pnp/azidjsclient","text":"<p>This library provides a thin wrapper around the @azure/identity library to make it easy to integrate Azure Identity authentication in your solution.</p> <p>You will first need to install the package:</p> <p><code>npm install @pnp/azidjsclient --save</code></p> <p>The following example shows how to configure the SPFI or GraphFI object using this behavior.</p> <pre><code>import { DefaultAzureCredential } from \"@azure/identity\";\nimport { spfi } from \"@pnp/sp\";\nimport { graphfi } from \"@pnp/sp\";\nimport { SPDefault, GraphDefault } from \"@pnp/nodejs\";\nimport { AzureIdentity } from \"@pnp/azidjsclient\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/graph/me\";\n\nconst credential = new DefaultAzureCredential();\n\nconst sp = spfi(\"https://tenant.sharepoint.com/sites/dev\").using(\n    SPDefault(),\n    AzureIdentity(credential, [`https://${tenant}.sharepoint.com/.default`], null)\n);\n\nconst graph = graphfi().using(\n    GraphDefault(),\n    AzureIdentity(credential, [\"https://graph.microsoft.com/.default\"], null)\n);\n\nconst webData = await sp.web();\nconst meData = await graph.me();\n</code></pre> <p>Please see more scenarios in the authentication article.</p>"},{"location":"concepts/adv-clientside-pages/","title":"Client-Side Pages","text":"<p>The client-side pages API included in this library is an implementation that was reverse engineered from the first-party API's and is unsupported by Microsoft. Given how flexible pages are we've done our best to give you the endpoints that will provide the functionality you need but that said, implementing these APIs is one of the more complicated tasks you can do.</p> <p>It's especially important to understand the product team is constantly changing the features of pages and often that will also end up changing how the APIs that we've leveraged behave and because they are not offical third-party APIs this can cause our implementation to break.  In order to fix those breaks we need to go back to the beginning and re-validate how the endpoints work searching for what has changed and then implementing those changes in our code. This is by no means simple. If you are reporting an issue with the pages API be aware that it may take significant time for us to unearth what is happening and fix it. Any research that you can provide when sharing your issue will go a long way in expediating that process, or better yet, if you can track it down and submit a PR with a fix we would be most greatful.</p>"},{"location":"concepts/adv-clientside-pages/#tricks-to-help-you-figure-out-how-to-add-first-party-web-parts-to-your-page","title":"Tricks to help you figure out how to add first-party web parts to your page","text":"<p>This section is to offer you methods to be able to reverse engineer some of the first party web parts to help figure out how to add them to the page using the <code>addControl</code> method.</p> <p>Your first step needs to be creating a test page that you can inspect.</p> <ol> <li>Create a new Site Page.</li> <li>Open the browser console, and navigate to the network tab</li> <li>Filter the network tab for <code>Fetch/XHR</code> and then type <code>SavePage</code> to filter for the specific network calls.</li> <li>Add and configure the web part you want to reverse engineer and then save the page as draft. The network tab will now show a <code>SavePageAsDraft</code> call and you can then look at the <code>Payload</code> of that call     </li> <li>You then want to specifically look at the <code>CanvasContent1</code> property and copy that value. You can then paste it into a temporary file with the .json extension in your code editor so you can inspect the payload. The value is an array of objects, and each object (except the last) is the definition of the web part.</li> </ol> <p>Below is an example (as of the last change date of this document) of what the QuickLinks web part looks like. One key takeaway from this file is the <code>webPartId</code> property which can be used when filtering for the right web part definition after getting a collection from <code>sp.web.getClientsideWebParts();</code>.</p> <p>Note that it could change at any time so please do not rely on this data, please use it as an example only.</p> <pre><code>{\n    \"position\": {\n        \"layoutIndex\": 1,\n        \"zoneIndex\": 1,\n        \"sectionIndex\": 1,\n        \"sectionFactor\": 12,\n        \"controlIndex\": 1\n    },\n    \"controlType\": 3,\n    \"id\": \"00000000-58fd-448c-9e40-6691ce30e3e4\",\n    \"webPartId\": \"c70391ea-0b10-4ee9-b2b4-006d3fcad0cd\",\n    \"addedFromPersistedData\": true,\n    \"reservedHeight\": 141,\n    \"reservedWidth\": 909,\n    \"webPartData\": {\n        \"id\": \"c70391ea-0b10-4ee9-b2b4-006d3fcad0cd\",\n        \"instanceId\": \"00000000-58fd-448c-9e40-6691ce30e3e4\",\n        \"title\": \"Quick links\",\n        \"description\": \"Show a collection of links to content such as documents, images, videos, and more in a variety of layouts with options for icons, images, and audience targeting.\",\n        \"audiences\": [],\n        \"serverProcessedContent\": {\n            \"htmlStrings\": {},\n            \"searchablePlainTexts\": {\n                \"items[0].title\": \"PnPjs Title\"\n            },\n            \"imageSources\": {},\n            \"links\": {\n                \"baseUrl\": \"https://contoso.sharepoint.com/sites/PnPJS\",\n                \"items[0].sourceItem.url\": \"/sites/PnPJS/SitePages/pnpjsTestV2.aspx\"\n            },\n            \"componentDependencies\": {\n                \"layoutComponentId\": \"706e33c8-af37-4e7b-9d22-6e5694d92a6f\"\n            }\n        },\n        \"dataVersion\": \"2.2\",\n        \"properties\": {\n            \"items\": [\n                {\n                    \"sourceItem\": {\n                        \"guids\": {\n                            \"siteId\": \"00000000-4657-40d2-843d-3d6c72e647ff\",\n                            \"webId\": \"00000000-e714-4de6-88db-b0ac40d17850\",\n                            \"listId\": \"{00000000-8ED8-4E43-82BD-56794D9AB290}\",\n                            \"uniqueId\": \"00000000-6779-4979-adad-c120a39fe311\"\n                        },\n                        \"itemType\": 0,\n                        \"fileExtension\": \".ASPX\",\n                        \"progId\": null\n                    },\n                    \"thumbnailType\": 2,\n                    \"id\": 1,\n                    \"description\": \"\",\n                    \"fabricReactIcon\": {\n                        \"iconName\": \"heartfill\"\n                    },\n                    \"altText\": \"\",\n                    \"rawPreviewImageMinCanvasWidth\": 32767\n                }\n            ],\n            \"isMigrated\": true,\n            \"layoutId\": \"CompactCard\",\n            \"shouldShowThumbnail\": true,\n            \"imageWidth\": 100,\n            \"buttonLayoutOptions\": {\n                \"showDescription\": false,\n                \"buttonTreatment\": 2,\n                \"iconPositionType\": 2,\n                \"textAlignmentVertical\": 2,\n                \"textAlignmentHorizontal\": 2,\n                \"linesOfText\": 2\n            },\n            \"listLayoutOptions\": {\n                \"showDescription\": false,\n                \"showIcon\": true\n            },\n            \"waffleLayoutOptions\": {\n                \"iconSize\": 1,\n                \"onlyShowThumbnail\": false\n            },\n            \"hideWebPartWhenEmpty\": true,\n            \"dataProviderId\": \"QuickLinks\",\n            \"webId\": \"00000000-e714-4de6-88db-b0ac40d17850\",\n            \"siteId\": \"00000000-4657-40d2-843d-3d6c72e647ff\"\n        }\n    }\n}\n</code></pre> <p>At this point the only aspect of the above JSON payload you're going to be paying attention to is the <code>webPartData</code>. We have exposed <code>title</code>, <code>description</code>, and <code>dataVersion</code> as default properties of the <code>ClientsideWebpart</code> class. In addition we provide a <code>getProperties</code>, <code>setProperties</code>, <code>getServerProcessedContent</code>, <code>setServerProcessedContent</code> methods. The difference in this case in these set base methods is that it will merge the object you pass into those methods with the values already on the object.</p> <p>The code below gives a incomplete but demonstrative example of how you would extend the ClientsideWebpart class to provide an interface to build a custom class for the QuickLinks web part illustrated in our JSON payload above. This code assumes you have already added the control to a section. For more information about that step see the documentation for Add Controls</p> <pre><code>import { sp } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport { ClientsideWebpart } from \"@pnp/sp/clientside-pages\";\n\n//Define interface based on JSON object above\ninterface IQLItem {\n    sourceItem: {\n        guids: {\n            siteId: string;\n            webId:  string;\n            listId:  string;\n            uniqueId:  string;\n        },\n        itemType: number;\n        fileExtension: string;\n        progId: string;\n    }\n    thumbnailType: number;\n    id: number;\n    description: string;\n    fabricReactIcon: { iconName: string; };\n    altText: string;\n    rawPreviewImageMinCanvasWidth: number;\n}\n\n// we create a class to wrap our functionality in a reusable way\nclass QuickLinksWebpart extends ClientsideWebpart {\n\n  constructor(control: ClientsideWebpart) {\n    super((&lt;any&gt;control).json);\n  }\n\n  // add property getter/setter for what we need, in this case items array within properties\n  public get items(): IQLItem[] {\n    return this.json.webPartData?.properties?.items || [];\n  }\n\n  public set items(value: IQLItem[]) {\n    this.json.webPartData.properties?.items = value;\n  }\n}\n\n// now we load our page\nconst page = await sp.web.loadClientsidePage(\"/sites/PnPJS/SitePages/QuickLinks-Web-Part-Test.aspx\");\n\n// get our part and pass it to the constructor of our wrapper class.\nconst part = new QuickLinksWebpart(page.sections[0].columns[0].getControl(0));\n\n//Need to set all the properties\npart.items = [{IQLItem_properties}];\n\nawait page.save();\n</code></pre>"},{"location":"concepts/auth-browser/","title":"Authentication in a custom browser based application","text":"<p>We support MSAL for both browser and nodejs by providing a thin wrapper around the official libraries. We won't document the fully possible MSAL configuration, but any parameters supplied are passed through to the underlying implementation. To use the browser MSAL package you'll need to install the @pnp/msaljsclient package which is deployed as a standalone due to the large MSAL dependency.</p> <p><code>npm install @pnp/msaljsclient --save</code></p> <p>At this time we're using version 1.x of the <code>msal</code> library which uses Implicit Flow. For more informaiton on the msal library please see the AzureAD/microsoft-authentication-library-for-js.</p> <p>Each of the following samples reference a MSAL configuration that utilizes an Azure AD App Registration, these are samples that show the typings for those objects:</p> <pre><code>import { Configuration, AuthenticationParameters } from \"msal\";\n\nconst configuration: Configuration = {\n  auth: {\n    authority: \"https://login.microsoftonline.com/{tenant Id}/\",\n    clientId: \"{AAD Application Id/Client Id}\"\n  }\n};\n\nconst authParams: AuthenticationParameters = {\n  scopes: [\"https://graph.microsoft.com/.default\"] \n};\n</code></pre>"},{"location":"concepts/auth-browser/#msal-browser","title":"MSAL + Browser","text":"<pre><code>import { spfi, SPBrowser } from \"@pnp/sp\";\nimport { graphfi, GraphBrowser } from \"@pnp/graph\";\nimport { MSAL } from \"@pnp/msaljsclient\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/graph/users\";\n\nconst sp = spfi(\"https://tenant.sharepoint.com/sites/dev\").using(SPBrowser(), MSAL(configuration, authParams));\n\n// within a webpart, application customizer, or adaptive card extension where the context object is available\nconst graph = graphfi().using(GraphBrowser(), MSAL(configuration, authParams));\n\nconst webData = await sp.web();\nconst meData = await graph.me();\n</code></pre>"},{"location":"concepts/auth-nodejs/","title":"Authentication in NodeJS","text":"<p>We support MSAL for both browser and nodejs and Azure Identity for nodejs by providing a thin wrapper around the official libraries. We won't document the fully possible configurations, but any parameters supplied are passed through to the underlying implementation.</p> <p>Depending on which package you want to use you will need to install an additional package from the library because of the large dependencies.</p> <p>We support MSAL through the msal-node library which is included by the @pnp/nodejs package.</p> <p>For the Azure Identity package:</p> <p><code>npm install @pnp/azidjsclient --save</code></p> <p>We support Azure Identity through the @azure/identity library which simplifies the authentication process and makes it easy to integrate Azure Identity authentication in your solution.</p>"},{"location":"concepts/auth-nodejs/#msal-nodejs","title":"MSAL + NodeJS","text":"<p>The SPDefault and GraphDefault exported by the nodejs library include MSAL and takes the parameters directly.</p> <p>The following samples reference a MSAL configuration that utilizes an Azure AD App Registration, these are samples that show the typings for those objects:</p> <pre><code>import { SPDefault, GraphDefault } from \"@pnp/nodejs\";\nimport { spfi } from \"@pnp/sp\";\nimport { graphfi } from \"@pnp/graph\";\nimport { Configuration, AuthenticationParameters } from \"msal\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/sp/webs\";\n\nconst configuration: Configuration = {\n  auth: {\n    authority: \"https://login.microsoftonline.com/{tenant Id}/\",\n    clientId: \"{AAD Application Id/Client Id}\"\n  }\n};\n\nconst sp = spfi(\"{site url}\").using(SPDefault({\n    msal: {\n        config: configuration,\n        scopes: [\"https://{tenant}.sharepoint.com/.default\"],\n    },\n}));\n\nconst graph = graphfi().using(GraphDefault({\n    msal: {\n        config: configuration,\n        scopes: [\"https://graph.microsoft.com/.default\"],\n    },\n}));\n\nconst webData = await sp.web();\nconst meData = await graph.me();\n</code></pre>"},{"location":"concepts/auth-nodejs/#use-nodejs-msal-behavior-directly","title":"Use Nodejs MSAL behavior directly","text":"<p>It is also possible to use the MSAL behavior directly if you are composing your own strategies.</p> <pre><code>import { SPDefault, GraphDefault, MSAL } from \"@pnp/nodejs\";\n\nconst sp = spfi(\"{site url}\").using(SPDefault(), MSAL({\n  config: configuration,\n  scopes: [\"https://{tenant}.sharepoint.com/.default\"],\n}));\n\nconst graph = graphfi().using(GraphDefault(), MSAL({\n  config: configuration,\n  scopes: [\"https://graph.microsoft.com/.default\"],\n}));\n\n</code></pre>"},{"location":"concepts/auth-nodejs/#azure-identity-nodejs","title":"Azure Identity + NodeJS","text":"<p>The following sample shows how to pass the credential object to the AzureIdentity behavior including scopes.</p> <pre><code>import { DefaultAzureCredential } from \"@azure/identity\";\nimport { spfi } from \"@pnp/sp\";\nimport { graphfi } from \"@pnp/sp\";\nimport { SPDefault, GraphDefault } from \"@pnp/nodejs\";\nimport { AzureIdentity } from \"@pnp/azidjsclient\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/graph/users\";\n\n// We're using DefaultAzureCredential but the credential can be any valid `Credential Type`\nconst credential = new DefaultAzureCredential();\n\nconst sp = spfi(\"https://{tenant}.sharepoint.com/sites/dev\").using(\n    SPDefault(),\n    AzureIdentity(credential, [`https://${tenant}.sharepoint.com/.default`], null)\n);\n\nconst graph = graphfi().using(\n    GraphDefault(),\n    AzureIdentity(credential, [\"https://graph.microsoft.com/.default\"], null)\n);\n\nconst webData = await sp.web();\nconst meData = await graph.me();\n</code></pre>"},{"location":"concepts/auth-spfx/","title":"Authentication in SharePoint Framework","text":"<p>When building in SharePoint Framework you only need to provide the context to either sp or graph to ensure proper authentication. This will use the default SharePoint AAD application to manage scopes. If you would prefer to use a different AAD application please see the MSAL section below.</p>"},{"location":"concepts/auth-spfx/#spfx-sharepoint","title":"SPFx + SharePoint","text":"<pre><code>import { SPFx, spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\n\n// within a webpart, application customizer, or adaptive card extension where the context object is available\nconst sp = spfi().using(SPFx(this.context));\n\nconst webData = await sp.web();\n</code></pre>"},{"location":"concepts/auth-spfx/#spfx-graph","title":"SPFx + Graph","text":"<pre><code>import { SPFx, graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\n\n// within a webpart, application customizer, or adaptive card extension where the context object is available\nconst graph = graphfi().using(SPFx(this.context));\n\nconst meData = await graph.me();\n</code></pre>"},{"location":"concepts/auth-spfx/#spfx-authentication-token","title":"SPFx + Authentication Token","text":"<p>When using the SPFx behavior, authentication is handled by a cookie stored on the users client. In very specific instances some of the SharePoint methods will require a token. We have added a custom behavior to support that called <code>SPFxToken</code>. This will require that you add the appropriate application role to the SharePoint Framework's <code>package-solution.json</code> -&gt; webApiPermissionRequests section where you will define the resource and scope for the request.</p> <p>Here's an example of how you would build an instance of the SPFI that would include an Bearer Token in the header. Be advised if you use this instance to make calls to SharePoint endpoints that you have not specifically authorized they will fail.</p> <pre><code>import { spfi, SPFxToken, SPFx } from \"@pnp/sp\";\n\nconst sp = spfi().using(SPFx(context), SPFxToken(context));\n</code></pre>"},{"location":"concepts/auth-spfx/#msal-spfx","title":"MSAL + SPFx","text":"<p>We support MSAL for both browser and nodejs by providing a thin wrapper around the official libraries. We won't document the fully possible MSAL configuration, but any parameters supplied are passed through to the underlying implementation. To use the browser MSAL package you'll need to install the @pnp/msaljsclient package which is deployed as a standalone due to the large MSAL dependency.</p> <p><code>npm install @pnp/msaljsclient --save</code></p> <p>At this time we're using version 1.x of the <code>msal</code> library which uses Implicit Flow. For more informaiton on the msal library please see the AzureAD/microsoft-authentication-library-for-js.</p> <p>Each of the following samples reference a MSAL configuration that utilizes an Azure AD App Registration, these are samples that show the typings for those objects:</p> <pre><code>import { SPFx as graphSPFx, graphfi } from \"@pnp/graph\";\nimport { SPFx as spSPFx, spfi } from \"@pnp/sp\";\nimport { MSAL } from \"@pnp/msaljsclient\";\nimport { Configuration, AuthenticationParameters } from \"msal\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/sp/webs\";\n\nconst configuration: Configuration = {\n  auth: {\n    authority: \"https://login.microsoftonline.com/{tenant Id}/\",\n    clientId: \"{AAD Application Id/Client Id}\"\n  }\n};\n\nconst authParams: AuthenticationParameters = {\n  scopes: [\"https://graph.microsoft.com/.default\"] \n};\n\n// within a webpart, application customizer, or adaptive card extension where the context object is available\nconst graph = graphfi().using(graphSPFx(this.context), MSAL(configuration, authParams));\nconst sp = spfi().using(spSPFx(this.context), MSAL(configuration, authParams));\n\nconst meData = await graph.me();\nconst webData = await sp.web();\n</code></pre>"},{"location":"concepts/authentication/","title":"Authentication","text":"<p>One of the more challenging aspects of web development is ensuring you are properly authenticated to access the resources you need. This section is designed to guide you through connecting to the resources you need using the appropriate methods.</p> <p>We provide multiple ways to authenticate based on the scenario you're developing for, see one of these more detailed guides:</p> <ul> <li>Authentication in SharePoint Framework</li> <li>Authentication in a custom browser based application (Outside Microsoft 365)</li> <li>Authentication in NodeJS</li> </ul> <p>If you have more specific authentication requirements you can always build your own by using the new queryable pattern which exposes a dedicated auth moment. That moment expects observers with the signature:</p> <pre><code>async function(url, init) {\n\n  // logic to apply authentication to the request\n\n    return [url, init];\n}\n</code></pre> <p>You can follow this example as a general pattern to build your own custom authentication model. You can then wrap your authentication in a behavior for easy reuse.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi().using({behaviors});\nconst web = sp.web;\n\n// we will use custom auth on this web\nweb.on.auth(async function(url, init) {\n\n    // some code to get a token\n    const token = getToken();\n\n    // set the Authorization header in the init (this init is what is passed directly to the fetch call)\n    init.headers[\"Authorization\"] = `Bearer ${token}`;\n\n    return [url, init];\n});\n</code></pre>"},{"location":"concepts/batching-caching/","title":"Batching and Caching","text":"<p>When optimizing for performance you can combine batching and caching to reduce the overall number of requests. On the first request any cachable data is stored as expected once the request completes. On subsequent requests if data is found in the cache it is returned immediately and that request is not added to the batch, in fact the batch will never register the request. This can work across many requests such that some returned cached data and others do not - the non-cached requests will be added to and processed by the batch as expected.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport { Caching } from \"@pnp/queryable\";\n\nconst sp = spfi(...);\n\nconst [batchedSP, execute] = sp.batched();\n\nbatchedSP.using(Caching());\n\nbatchedSP.web().then(console.log);\n\nbatchedSP.web.lists().then(console.log);\n\n// execute the first set of batched requests, no information is currently cached\nawait execute();\n\n// create a new batch\nconst [batchedSP2, execute2] = await sp.batched();\nbatchedSP2.using(Caching());\n\n// add the same requests - this simulates the user navigating away from or reloading the page\nbatchedSP2.web().then(console.log);\nbatchedSP2.web.lists().then(console.log);\n\n// executing the batch will return the cached values from the initial requests\nawait execute2();\n</code></pre> <p>In this second example we include an update to the web's title. Because non-get requests are never cached the update code will always run, but the results from the two get requests will resolve from the cache prior to being added to the batch.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport { Caching } from \"@pnp/queryable\";\n\nconst sp = spfi(...);\n\nconst [batchedSP, execute] = sp.batched();\n\nbatchedSP.using(Caching());\n\nbatchedSP.web().then(console.log);\n\nbatchedSP.web.lists().then(console.log);\n\n// this will never be cached\nbatchedSP.web.update({\n    Title: \"dev web 1\",\n});\n\n// execute the first set of batched requests, no information is currently cached\nawait execute();\n\n// create a new batch\nconst [batchedSP2, execute2] = await sp.batched();\nbatchedSP2.using(Caching());\n\n// add the same requests - this simulates the user navigating away from or reloading the page\nbatchedSP2.web().then(console.log);\nbatchedSP2.web.lists().then(console.log);\n\n// this will never be cached\nbatchedSP2.web.update({\n    Title: \"dev web 2\",\n});\n\n// executing the batch will return the cached values from the initial requests\nawait execute2();\n</code></pre>"},{"location":"concepts/batching/","title":"Batching","text":"<p>Where possible batching can significantly increase application performance by combining multiple requests to the server into one. This is especially useful when first establishing state, but applies for any scenario where you need to make multiple requests before loading or based on a user action. Batching is supported within the sp and graph libraries as shown below.</p>"},{"location":"concepts/batching/#sp-example","title":"SP Example","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/batching\";\n\nconst sp = spfi(...);\n\nconst [batchedSP, execute] = sp.batched();\n\nlet res = [];\n\n// you need to use .then syntax here as otherwise the application will stop and await the result\nbatchedSP.web().then(r =&gt; res.push(r));\n\n// you need to use .then syntax here as otherwise the application will stop and await the result\n// ODATA operations such as select, filter, and expand are supported as normal\nbatchedSP.web.lists.select(\"Title\")().then(r =&gt; res.push(r));\n\n// Executes the batched calls\nawait execute();\n\n// Results for all batched calls are available\nfor(let i = 0; i &lt; res.length; i++) {\n    ///Do something with the results\n}\n</code></pre>"},{"location":"concepts/batching/#using-a-batched-web","title":"Using a batched web","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/batching\";\n\nconst sp = spfi(...);\n\nconst [batchedWeb, execute] = sp.web.batched();\n\nlet res = [];\n\n// you need to use .then syntax here as otherwise the application will stop and await the result\nbatchedWeb().then(r =&gt; res.push(r));\n\n// you need to use .then syntax here as otherwise the application will stop and await the result\n// ODATA operations such as select, filter, and expand are supported as normal\nbatchedWeb.lists.select(\"Title\")().then(r =&gt; res.push(r));\n\n// Executes the batched calls\nawait execute();\n\n// Results for all batched calls are available\nfor(let i = 0; i &lt; res.length; i++) {\n    ///Do something with the results\n}\n</code></pre> <p>Batches must be for the same web, you cannot combine requests from multiple webs into a batch.</p>"},{"location":"concepts/batching/#graph-example","title":"Graph Example","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport { GraphDefault } from \"@pnp/nodejs\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/groups\";\nimport \"@pnp/graph/batching\";\n\nconst graph = graphfi().using(GraphDefault({ /* ... */ }));\n\nconst [batchedGraph, execute] = graph.batched();\n\nlet res = [];\n\n// Pushes the results of these calls to an array\n// you need to use .then syntax here as otherwise the application will stop and await the result\nbatchedGraph.users().then(r =&gt; res.push(r));\n\n// you need to use .then syntax here as otherwise the application will stop and await the result\n// ODATA operations such as select, filter, and expand are supported as normal\nbatchedGraph.groups.select(\"Id\")().then(r =&gt; res.push(r));\n\n// Executes the batched calls\nawait execute();\n\n// Results for all batched calls are available\nfor(let i=0; i&lt;res.length; i++){\n    // Do something with the results\n}\n</code></pre>"},{"location":"concepts/batching/#advanced-batching","title":"Advanced Batching","text":"<p>For most cases the above usage should be sufficient, however you may be in a situation where you do not have convenient access to either an spfi instance or a web. Let's say for example you want to add a lot of items to a list and have an IList. You can in these cases use the createBatch function directly. We recommend as much as possible using the sp or web or graph batched method, but also provide this additional flexibility if you need it.</p> <pre><code>import { createBatch } from \"@pnp/sp/batching\";\nimport { SPDefault } from \"@pnp/nodejs\";\nimport { IList } from \"@pnp/sp/lists\";\nimport \"@pnp/sp/items/list\";\n\nconst sp = spfi(\"https://tenant.sharepoint.com/sites/dev\").using(SPDefault({ /* ... */ }));\n\n// in one part of your application you setup a list instance\nconst list: IList = sp.web.lists.getByTitle(\"MyList\");\n\n\n// in another part of your application you want to batch requests, but do not have the sp instance available, just the IList\n\n// note here the first part of the tuple is NOT the object, rather the behavior that enables batching. You must still register it with `using`.\nconst [batchedListBehavior, execute] = createBatch(list);\n// this list is now batching all its requests\nlist.using(batchedListBehavior);\n\n// these will all occur within a single batch\nlist.items.add({ Title: `1: ${getRandomString(4)}` });\nlist.items.add({ Title: `2: ${getRandomString(4)}` });\nlist.items.add({ Title: `3: ${getRandomString(4)}` });\nlist.items.add({ Title: `4: ${getRandomString(4)}` });\n\nawait execute();\n</code></pre> <p>This is of course also possible with the graph library as shown below.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport { createBatch } from \"@pnp/graph/batching\";\nimport { GraphDefault } from \"@pnp/nodejs\";\nimport \"@pnp/graph/users\";\n\nconst graph = graphfi().using(GraphDefault({ /* ... */ }));\n\nconst users = graph.users;\n\nconst [batchedBehavior, execute] = createBatch(users);\nusers.using(batchedBehavior);\n\nusers();\n// we can only place the 'users' instance into the batch once\ngraph.users.using(batchedBehavior)();\ngraph.users.using(batchedBehavior)();\ngraph.users.using(batchedBehavior)();\n\nawait execute();       \n</code></pre> <p></p>"},{"location":"concepts/batching/#dont-reuse-objects-in-batching","title":"Don't reuse objects in Batching","text":"<p>It shouldn't come up often, but you can not make multiple requests using the same instance of a queryable in a batch. Let's consider the incorrect example below:</p> <p>The error message will be \"This instance is already part of a batch. Please review the docs at https://pnp.github.io/pnpjs/concepts/batching#reuse.\"</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport { createBatch } from \"@pnp/graph/batching\";\nimport { GraphDefault } from \"@pnp/nodejs\";\nimport \"@pnp/graph/users\";\n\nconst graph = graphfi().using(GraphDefault({ /* ... */ }));\n\n// gain a batched instance of the graph\nconst [batchedGraph, execute] = graph.batched();\n\n// we take a reference to the value returned from .users\nconst users = batchedGraph.users;\n\n// we invoke it, adding it to the batch (this is a request to /users), it will succeed\nusers();\n\n// we invoke it again, because this instance has already been added to the batch, this request will throw an error\nusers();\n\n// we execute the batch, this promise will resolve\nawait execute();        \n</code></pre> <p>To overcome this you can either start a new fluent chain or use the factory method. Starting a new fluent chain at any point will create a new instance. Please review the corrected sample below.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport { createBatch } from \"@pnp/graph/batching\";\nimport { GraphDefault } from \"@pnp/nodejs\";\nimport { Users } from \"@pnp/graph/users\";\n\nconst graph = graphfi().using(GraphDefault({ /* ... */ }));\n\n// gain a batched instance of the graph\nconst [batchedGraph, execute] = graph.batched();\n\n// we invoke a new instance of users from the batchedGraph\nbatchedGraph.users();\n\n// we again invoke a new instance of users from the batchedGraph, this is fine\nbatchedGraph.users();\n\nconst users = batchedGraph.users;\n// we can do this once\nusers();\n\n// by creating a new users instance using the Users factory we can keep adding things to the batch\n// users2 will be part of the same batch\nconst users2 = Users(users);\nusers2();\n\n// we execute the batch, this promise will resolve\nawait execute();        \n</code></pre> <p>In addition you cannot continue using a batch after execute. Once execute has resolved the batch is done. You should create a new batch using one of the described methods to conduct another batched call.</p>"},{"location":"concepts/batching/#case-where-batch-result-returns-an-object-that-can-be-invoked","title":"Case where batch result returns an object that can be invoked","text":"<p>In the following example, the results of adding items to the list is an object with a type of IItemAddResult which is <code>{data: any, item: IItem}</code>. Since version v1 the expectation is that the <code>item</code> object is immediately usable to make additional queries. When this object is the result of a batched call, this was not the case so we have added additional code to reset the observers using the original base from witch the batch was created, mimicing the behavior had the IItem been created from that base withyout a batch involved. We use CopyFrom to ensure that we maintain the references to the InternalResolve and InternalReject events through the end of this timelines lifecycle.</p> <pre><code>import { createBatch } from \"@pnp/sp/batching\";\nimport { SPDefault } from \"@pnp/nodejs\";\nimport { IList } from \"@pnp/sp/lists\";\nimport \"@pnp/sp/items/list\";\n\nconst sp = spfi(\"https://tenant.sharepoint.com/sites/dev\").using(SPDefault({ /* ... */ }));\n\n// in one part of your application you setup a list instance\nconst list: IList = sp.web.lists.getByTitle(\"MyList\");\n\nconst [batchedListBehavior, execute] = createBatch(list);\n// this list is now batching all its requests\nlist.using(batchedListBehavior);\n\nlet res: IItemAddResult[] = [];\n\n// these will all occur within a single batch\nlist.items.add({ Title: `1: ${getRandomString(4)}` }).then(r =&gt; res.push(r));\nlist.items.add({ Title: `2: ${getRandomString(4)}` }).then(r =&gt; res.push(r));\nlist.items.add({ Title: `3: ${getRandomString(4)}` }).then(r =&gt; res.push(r));\nlist.items.add({ Title: `4: ${getRandomString(4)}` }).then(r =&gt; res.push(r));\n\nawait execute();\n\nlet newItems: IItem[] = [];\n\nfor(let i=0; i&lt;res.length; i++){\n    //This line will correctly resolve\n    const newItem = await res[i].item.select(\"Title\")&lt;{Title: string}&gt;();\n    newItems.push(newItem);\n}\n</code></pre>"},{"location":"concepts/calling-other-endpoints/","title":"Calling other endpoints not currently implemented in PnPjs library","text":"<p>If you find that there are endpoints that have not yet been implemented, or have changed in such a way that there are issues using the implemented endpoint, you can still make those calls and take advantage of the plumbing provided by the library.</p>"},{"location":"concepts/calling-other-endpoints/#sharepoint","title":"SharePoint","text":"<p>To issue calls against the SharePoint REST endpoints you would use one of the existing operations:</p> <ul> <li>spGet</li> <li>spPost</li> <li>spDelete</li> <li>spPatch and the extended post methods with additional headers.</li> <li>spPostMerge</li> <li>spPostDelete</li> <li>spPostDeleteETag</li> </ul> <p>To construct a call you will need to pass, to the operation call an SPQueryable and optionally a RequestInit object which will be merged with any existing registered init object. To learn more about queryable and the options for constructing one, check out the documentation.</p> <p>Below are a couple of examples to get you started.</p>"},{"location":"concepts/calling-other-endpoints/#example-spget","title":"Example spGet","text":"<p>Let's pretend that the getById method didn't exist on a lists items. The example below shows two methods for constructing our SPQueryable method.</p> <p>The first is the easiest to use because, as the queryable documentation tells us, this will maintain all the registered observers on the original queryable instance. We would start with the queryable object closest to the endpoint we want to use, in this case <code>list</code>. We do this because we need to construct the full URL that will be called. Using <code>list</code> in this instance gives us the first part of the URL (e.g. <code>https://contoso.sharepoint.com/sites/testsite/_api/web/lists/getByTitle('My List')</code>) and then we can construct the remainder of the call by passing in a string.</p> <p>The second method essentially starts from scratch where the user constructs the entire url and then registers observers on the SPQuerable instance. Then uses spGet to execute the call. There are many other variations to arrive at the same outcome, all are dependent on your requirements.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { AssignFrom } from \"@pnp/core\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport { spGet, SPQueryable, SPFx } from \"@pnp/sp\";\n\n// Establish SPFI instance passing in the appropriate behavior to register the initial observers.\nconst sp = spfi(...);\n\n// create an instance of the items queryable\n\nconst list = sp.web.lists.getByTitle(\"My List\");\n\n// get the item with an id of 1, easiest method\nconst item: any = await spGet(SPQueryable(list, \"items(1)\"));\n\n// get the item with an id of 1, constructing a new queryable and registering behaviors\nconst spQueryable = SPQueryable(\"https://contoso.sharepoint.com/sites/testsite/_api/web/lists/getByTitle('My List')/items(1)\").using(SPFx(this.context));\n\n// ***or***\n\n// For v3 the full url is require for SPQuerable when providing just a string\nconst spQueryable = SPQueryable(\"https://contoso.sharepoint.com/sites/testsite/_api/web/lists/getByTitle('My List')/items(1)\").using(AssignFrom(sp.web));\n\n// and then use spQueryable to make the request\nconst item: any = await spGet(spQueryable);\n</code></pre> <p>The resulting call will be to the endpoint: <code>https://contoso.sharepoint.com/sites/testsite/_api/web/lists/getByTitle('My List')/items(1)</code></p>"},{"location":"concepts/calling-other-endpoints/#example-sppost","title":"Example spPost","text":"<p>Let's now pretend that we need to get the changes on a list and want to call the <code>getchanges</code> method off list.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport { IChangeQuery, spPost, SPQueryable } from \"@pnp/sp\";\nimport { body } from \"@pnp/queryable\";\n\n// Establish SPFI instance passing in the appropriate behavior to register the initial observers.\nconst sp = spfi(...);\n\n\n// build the changeQuery object, here we look att changes regarding Add, DeleteObject and Restore\nconst query: IChangeQuery = {\n    Add: true,\n    ChangeTokenEnd: null,\n    ChangeTokenStart: null,\n    DeleteObject: true,\n    Rename: true,\n    Restore: true,\n};\n\n// create an instance of the items queryable\nconst list = sp.web.lists.getByTitle(\"My List\");\n\n// get the item with an id of 1\nconst changes: any = await spPost(SPQueryable(list, \"getchanges\"), body({query}));\n\n</code></pre> <p>The resulting call will be to the endpoint: <code>https://contoso.sharepoint.com/sites/testsite/_api/web/lists/getByTitle('My List')/getchanges</code></p>"},{"location":"concepts/calling-other-endpoints/#microsoft-graph","title":"Microsoft Graph","text":"<p>To issue calls against the Microsoft Graph REST endpoints you would use one of the existing operations:</p> <ul> <li>graphGet</li> <li>graphPost</li> <li>graphDelete</li> <li>graphPatch</li> <li>graphPut</li> </ul> <p>To construct a call you will need to pass, to the operation call an GraphQueryable and optionally a RequestInit object which will be merged with any existing registered init object. To learn more about queryable and the options for constructing one, check out the documentation.</p> <p>Below are a couple of examples to get you started.</p>"},{"location":"concepts/calling-other-endpoints/#example-graphget","title":"Example graphGet","text":"<p>Here's an example for getting the chats for a particular user. This uses the simplest method for constructing the graphQueryable which is to start with a instance of a queryable that is close to the endpoint we want to call, in this case <code>user</code> and then adding the additional path as a string. For a more advanced example see <code>spGet</code> above.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport { GraphQueryable, graphGet } from \"@pnp/graph\";\n\n// Establish GRAPHFI instance passing in the appropriate behavior to register the initial observers.\nconst graph = graphfi(...);\n\n// create an instance of the user queryable\nconst user = graph.users.getById('jane@contoso.com');\n\n// get the chats for the user\nconst chat: any = await graphGet(GraphQueryable(user, \"chats\"));\n</code></pre> <p>The results call will be to the endpoint: <code>https://graph.microsoft.com/v1.0/users/jane@contoso.com/chats</code></p>"},{"location":"concepts/calling-other-endpoints/#example-graphpost","title":"Example graphPost","text":"<p>This is an example of adding an event to a calendar.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/calendars\";\nimport { GraphQueryable, graphPost } from \"@pnp/graph\";\nimport { body, InjectHeaders } from \"@pnp/queryable\";\n\n// Establish GRAPHFI instance passing in the appropriate behavior to register the initial observers.\nconst graph = graphfi(...);\n\n// create an instance of the user queryable\nconst calendar = graph.users.getById('jane@contoso.com').calendar;\n\nconst props = {\n  \"subject\": \"Let's go for lunch\",\n  \"body\": {\n    \"contentType\": \"HTML\",\n    \"content\": \"Does noon work for you?\"\n  },\n  \"start\": {\n      \"dateTime\": \"2017-04-15T12:00:00\",\n      \"timeZone\": \"Pacific Standard Time\"\n  },\n  \"end\": {\n      \"dateTime\": \"2017-04-15T14:00:00\",\n      \"timeZone\": \"Pacific Standard Time\"\n  },\n  \"location\":{\n      \"displayName\":\"Harry's Bar\"\n  },\n  \"attendees\": [\n    {\n      \"emailAddress\": {\n        \"address\":\"samanthab@contoso.onmicrosoft.com\",\n        \"name\": \"Samantha Booth\"\n      },\n      \"type\": \"required\"\n    }\n  ],\n  \"allowNewTimeProposals\": true,\n  \"transactionId\":\"7E163156-7762-4BEB-A1C6-729EA81755A7\"\n};\n\n// custom request init to add timezone header.\nconst graphQueryable = GraphQueryable(calendar, \"events\").using(InjectHeaders({\n    \"Prefer\": 'outlook.timezone=\"Pacific Standard Time\"',\n}));\n\n// adds a new event to the user's calendar\nconst event: any = await graphPost(graphQueryable, body(props));\n</code></pre> <p>The results call will be to the endpoint: <code>https://graph.microsoft.com/v1.0/users/jane@contoso.com/calendar/events</code></p>"},{"location":"concepts/calling-other-endpoints/#advanced-scenario","title":"Advanced Scenario","text":"<p>If you find you need to create an instance of Queryable (for either graph or SharePoint) that would hang off the root of the url you can use the <code>AssignFrom</code> or <code>CopyFrom</code> behaviors.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport { GraphQueryable, graphPost } from \"@pnp/graph\";\nimport { body, InjectHeaders } from \"@pnp/queryable\";\nimport { AssignFrom } from \"@pnp/core\";\n\n// Establish GRAPHFI instance passing in the appropriate behavior to register the initial observers.\nconst graph = graphfi(...);\n\nconst chatsQueryable = GraphQueryable(\"chats\").using(AssignFrom(graph.me));\n\nconst chat: any = await graphPost(chatsQueryable, body(chatBody));\n</code></pre> <p>The results call will be to the endpoint: <code>https://graph.microsoft.com/v1.0/chats</code></p>"},{"location":"concepts/custom-bundle/","title":"Custom Bundling","text":"<p>With the introduction of selective imports it is now possible to create your own bundle to exactly fit your needs. This provides much greater control over how your solutions are deployed and what is included in your bundles.</p> <p>Scenarios could include:</p> <ul> <li>Deploying a company-wide PnPjs custom bundle shared by all your components so it only needs to be downloaded once.</li> <li>Creating SPFx libraries either for one project or a single webpart.</li> <li>Create a single library containing the PnPjs code you need bundled along with your custom extensions.</li> </ul>"},{"location":"concepts/custom-bundle/#create-a-custom-bundle","title":"Create a custom bundle","text":""},{"location":"concepts/custom-bundle/#webpack","title":"Webpack","text":"<p>You can see/clone a sample project of this example here.</p>"},{"location":"concepts/error-handling/","title":"Error Handling","text":"<p>This article describes the most common types of errors generated by the library. It provides context on the error object, and ways to handle the errors. As always you should tailor your error handling to what your application needs. These are ideas that can be applied to many different patterns.</p> <p>For 429, 503, and 504 errors we include retry logic within the library</p>"},{"location":"concepts/error-handling/#the-httprequesterror","title":"The HttpRequestError","text":"<p>All errors resulting from executed web requests will be returned as an <code>HttpRequestError</code> object which extends the base <code>Error</code>. In addition to the standard Error properties it has some other properties to help you figure out what went wrong. We used a custom error to attempt to normalize what can be a wide assortment of http related errors, while also seeking to provide as much information to library consumers as possible.</p> Property Name Description name Standard Error.name property. Always 'Error' message Normalized string containing the status, status text, and the full response text stack The callstack producing the error isHttpRequestError Always true, allows you to reliably determine if you have an HttpRequestError instance response Unread copy of the Response object resulting in the thrown error status The Response.status value (such as 404) statusText The Response.statusText value (such as 'Not Found')"},{"location":"concepts/error-handling/#basic-handling","title":"Basic Handling","text":"<p>For all operations involving a web request you should account for the possibility they might fail. That failure might be transient or permanent - you won't know until they happen \ud83d\ude09. The most basic type of error handling involves a simple try-catch when using the async/await promises pattern.</p> <pre><code>import { sp } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists/web\";\n\ntry {\n\n  // get a list that doesn't exist\n  const w = await sp.web.lists.getByTitle(\"no\")();\n\n} catch (e) {\n\n  console.error(e);\n}\n</code></pre> <p>This will produce output like:</p> <pre><code>Error making HttpClient request in queryable [404] Not Found ::&gt; {\"odata.error\":{\"code\":\"-1, System.ArgumentException\",\"message\":{\"lang\":\"en-US\",\"value\":\"List 'no' does not exist at site with URL 'https://tenant.sharepoint.com/sites/dev'.\"}}} Data: {\"response\":{\"size\":0,\"timeout\":0},\"status\":404,\"statusText\":\"Not Found\",\"isHttpRequestError\":true}\n</code></pre> <p>This is very descriptive and provides full details as to what happened, but you might want to handle things a little more cleanly.</p>"},{"location":"concepts/error-handling/#reading-the-response","title":"Reading the Response","text":"<p>In some cases the response body will have additional details such as a localized error messages which can be nicer to display rather than our normalized string. You can read the response directly and process it however you desire:</p> <pre><code>import { sp } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists/web\";\nimport { HttpRequestError } from \"@pnp/queryable\";\n\ntry {\n\n  // get a list that doesn't exist\n  const w = await sp.web.lists.getByTitle(\"no\")();\n\n} catch (e) {\n\n  // are we dealing with an HttpRequestError?\n  if (e?.isHttpRequestError) {\n\n    // we can read the json from the response\n    const json = await (&lt;HttpRequestError&gt;e).response.json();\n\n    // if we have a value property we can show it\n    console.log(typeof json[\"odata.error\"] === \"object\" ? json[\"odata.error\"].message.value : e.message);\n\n    // add of course you have access to the other properties and can make choices on how to act\n    if ((&lt;HttpRequestError&gt;e).status === 404) {\n       console.error((&lt;HttpRequestError&gt;e).statusText);\n      // maybe create the resource, or redirect, or fallback to a secondary data source\n      // just ideas, handle any of the status codes uniquely as needed\n    }\n\n  } else {\n    // not an HttpRequestError so we just log message\n    console.log(e.message);\n  }\n}\n</code></pre>"},{"location":"concepts/error-handling/#logging-errors","title":"Logging errors","text":"<p>Using the PnPjs Logging Framework you can directly pass the error object and the normalized message will be logged. These techniques can be applied to any logging framework.</p> <pre><code>import { Logger } from \"@pnp/logging\";\nimport { sp } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists/web\";\n\ntry {\n  // get a list that doesn't exist\n  const w = await sp.web.lists.getByTitle(\"no\")();  \n} catch (e) {\n\n  Logger.error(e);\n}\n</code></pre> <p>You may want to read the response and customize the message as described above:</p> <pre><code>import { Logger } from \"@pnp/logging\";\nimport { sp } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists/web\";\nimport { HttpRequestError } from \"@pnp/queryable\";\n\ntry {\n  // get a list that doesn't exist\n  const w = await sp.web.lists.getByTitle(\"no\")();  \n} catch (e) {\n\n  if (e?.isHttpRequestError) {\n\n    // we can read the json from the response\n    const data = await (&lt;HttpRequestError&gt;e).response.json();\n\n    // parse this however you want\n    const message = typeof data[\"odata.error\"] === \"object\" ? data[\"odata.error\"].message.value : e.message;\n\n    // we use the status to determine a custom logging level\n    const level: LogLevel = (&lt;HttpRequestError&gt;e).status === 404 ? LogLevel.Warning : LogLevel.Info;\n\n    // create a custom log entry\n    Logger.log({\n      data,\n      level,\n      message,\n    });\n\n  } else {\n    // not an HttpRequestError so we just log message\n    Logger.error(e);\n  }\n}\n</code></pre>"},{"location":"concepts/error-handling/#putting-it-all-together","title":"Putting it All Together","text":"<p>After reviewing the above section you might have thought it seems like a lot of work to include all that logic for every error. One approach is to establish a single function you use application wide to process errors. This allows all the error handling logic to be easily updated and consistent across the application.</p>"},{"location":"concepts/error-handling/#errorhandlerts","title":"errorhandler.ts","text":"<pre><code>import { Logger } from \"@pnp/logging\";\nimport { HttpRequestError } from \"@pnp/queryable\";\nimport { hOP } from \"@pnp/core\";\n\nexport async function handleError(e: Error | HttpRequestError): Promise&lt;void&gt; {\n\n  if (hOP(e, \"isHttpRequestError\")) {\n\n    // we can read the json from the response\n    const data = await (&lt;HttpRequestError&gt;e).response.json();\n\n    // parse this however you want\n    const message = typeof data[\"odata.error\"] === \"object\" ? data[\"odata.error\"].message.value : e.message;\n\n    // we use the status to determine a custom logging level\n    const level: LogLevel = (&lt;HttpRequestError&gt;e).status === 404 ? LogLevel.Warning : LogLevel.Info;\n\n    // create a custom log entry\n    Logger.log({\n      data,\n      level,\n      message,\n    });\n\n  } else {\n    // not an HttpRequestError so we just log message\n    Logger.error(e);\n  }\n}\n</code></pre>"},{"location":"concepts/error-handling/#web-requestts","title":"web-request.ts","text":"<pre><code>import { sp } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists/web\";\nimport { handleError } from \"./errorhandler\";\n\ntry {\n\n  const w = await sp.web.lists.getByTitle(\"no\")();\n\n} catch (e) {\n\n  await handleError(e);\n}\n</code></pre>"},{"location":"concepts/error-handling/#web-request2ts","title":"web-request2.ts","text":"<pre><code>import { sp } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists/web\";\nimport { handleError } from \"./errorhandler\";\n\ntry {\n\n  const w = await sp.web.lists();\n\n} catch (e) {\n\n  await handleError(e);\n}\n</code></pre>"},{"location":"concepts/error-handling/#building-a-custom-error-handler","title":"Building a Custom Error Handler","text":"<p>In Version 3 the library introduced the concept of a Timeline object and moments. One of the broadcast moments is error. To create your own custom error handler you can define a special handler for the error moment something like the following:</p> <pre><code>\n//Custom Error Behavior\nexport function CustomError(): TimelinePipe&lt;Queryable&gt; {\n\n    return (instance: Queryable) =&gt; {\n\n        instance.on.error((err) =&gt; {\n            if (logging) {\n                console.log(`\ud83d\uded1 PnPjs Testing Error - ${err.toString()}`);\n            }\n        });\n\n        return instance;\n    };\n}\n\n//Adding our CustomError behavior to our timline\n\nconst sp = spfi().using(SPDefault(this.context)).using(CustomError());\n</code></pre>"},{"location":"concepts/invokable/","title":"Invokables","text":"<p>For people who have been using the library since the early days you are familiar with the need to use the <code>()</code> method to invoke a method chain: Starting with v3 this is no longer possible, you must invoke the object directly to execute the default action for that class:</p> <pre><code>const lists = await sp.web.lists();\n</code></pre>"},{"location":"concepts/nightly-builds/","title":"Nightly Builds","text":"<p>Starting with version 3 we support nightly builds, which are built from the version-3 branch each evening and include all the changes merged ahead of a particular build. These are a great way to try out new features before a release, or get a fix or enhancement without waiting for the monthly builds.</p> <p>You can install the nightly builds using the below examples. While we only show examples for <code>sp</code> and <code>graph</code> nightly builds are available for all packages.</p>"},{"location":"concepts/nightly-builds/#sp","title":"SP","text":"<pre><code>npm install @pnp/sp@v3nightly --save\n</code></pre>"},{"location":"concepts/nightly-builds/#microsoft-graph","title":"Microsoft Graph","text":"<pre><code>npm install @pnp/graph@v3nightly --save\n</code></pre> <p>Nightly builds are NOT monthly releases and aren't tested as deeply. We never intend to release broken code, but nightly builds may contain some code that is not entirely final or fully reviewed. As always if you encounter an issue please let us know, especially for nightly builds so we can be sure to address it before the next monthly release.</p>"},{"location":"concepts/project-preset/","title":"Project Config/Services Setup","text":"<p>Due to the introduction of selective imports it can be somewhat frustrating to import all of the needed dependencies every time you need them across many files. Instead the preferred approach, especially for SPFx, is to create a project config file or establish a service to manage your PnPjs interfaces. Doing so centralizes the imports, configuration, and optionally extensions to PnPjs in a single place.</p> <p>If you have multiple projects that share dependencies on PnPjs you can benefit from creating a custom bundle and using them across your projects.</p> <p>These steps reference an SPFx solution, but apply to any solution.</p>"},{"location":"concepts/project-preset/#using-a-config-file","title":"Using a config file","text":"<p>Within the src directory create a new file named <code>pnpjs-config.ts</code> and copy in the below content.</p> <pre><code>import { WebPartContext } from \"@microsoft/sp-webpart-base\";\n\n// import pnp, pnp logging system, and any other selective imports needed\nimport { spfi, SPFI, SPFx } from \"@pnp/sp\";\nimport { LogLevel, PnPLogging } from \"@pnp/logging\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/items\";\nimport \"@pnp/sp/batching\";\n\nvar _sp: SPFI = null;\n\nexport const getSP = (context?: WebPartContext): SPFI =&gt; {\n  if (context != null) {\n    //You must add the @pnp/logging package to include the PnPLogging behavior it is no longer a peer dependency\n    // The LogLevel set's at what level a message will be written to the console\n    _sp = spfi().using(SPFx(context)).using(PnPLogging(LogLevel.Warning));\n  }\n  return _sp;\n};\n</code></pre> <p>To initialize the configuration, from the <code>onInit</code> function (or whatever function runs first in your code) make a call to getSP passing in the SPFx context object (or whatever configuration you would require for your setup).</p> <pre><code>protected async onInit(): Promise&lt;void&gt; {\n  this._environmentMessage = this._getEnvironmentMessage();\n\n  super.onInit();\n\n  //Initialize our _sp object that we can then use in other packages without having to pass around the context.\n  //  Check out pnpjsConfig.ts for an example of a project setup file.\n  getSP(this.context);\n}\n</code></pre> <p>Now you can consume your configured <code>_sp</code> object from anywhere else in your code by simply referencing the <code>pnpjs-presets.ts</code> file via an import statement and then getting a local instance of the <code>_sp</code> object using the <code>getSP()</code> method without passing any context.</p> <pre><code>import { getSP } from './pnpjs-config.ts';\n...\nexport default class PnPjsExample extends React.Component&lt;IPnPjsExampleProps, IIPnPjsExampleState&gt; {\n\n  private _sp: SPFI;\n\n  constructor(props: IPnPjsExampleProps) {\n    super(props);\n    // set initial state\n    this.state = {\n      items: [],\n      errors: []\n    };\n    this._sp = getSP();\n  }\n\n  ...\n\n}\n</code></pre>"},{"location":"concepts/project-preset/#use-a-service-class","title":"Use a service class","text":"<p>Because you do not have full access to the context object within a service you need to setup things a little differently.</p> <pre><code>import { ServiceKey, ServiceScope } from \"@microsoft/sp-core-library\";\nimport { PageContext } from \"@microsoft/sp-page-context\";\nimport { AadTokenProviderFactory } from \"@microsoft/sp-http\";\nimport { spfi, SPFI, SPFx as spSPFx } from \"@pnp/sp\";\nimport { graphfi, GraphFI, SPFx as gSPFx } from \"@pnp/graph\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists/web\";\n\nexport interface ISampleService {\n    getLists(): Promise&lt;any[]&gt;;\n}\n\nexport class SampleService {\n\n    public static readonly serviceKey: ServiceKey&lt;ISampleService&gt; = ServiceKey.create&lt;ISampleService&gt;('SPFx:SampleService', SampleService);\n    private _sp: SPFI;\n    private _graph: GraphFI;\n\n    constructor(serviceScope: ServiceScope) {\n\n        serviceScope.whenFinished(() =&gt; {\n\n        const pageContext = serviceScope.consume(PageContext.serviceKey);\n        const aadTokenProviderFactory = serviceScope.consume(AadTokenProviderFactory.serviceKey);\n\n        //SharePoint\n        this._sp = spfi().using(spSPFx({ pageContext }));\n\n        //Graph\n        this._graph = graphfi().using(gSPFx({ aadTokenProviderFactory }));\n    }\n\n    public getLists(): Promise&lt;any[]&gt; {\n        return this._sp.web.lists();\n    }\n}\n</code></pre> <p>Depending on the architecture of your solution you can also opt to export the service as a global. If you choose this route you would need to modify the service to create an Init function where you would pass the service scope instead of doing so in the constructor. You would then export a constant that creates a global instance of the service.</p> <pre><code>export const mySampleService = new SampleService();\n</code></pre> <p>For a full sample, please see our PnPjs Version 3 Sample Project</p>"},{"location":"concepts/selective-imports/","title":"Selective Imports","text":"<p>As the libraries have grown to support more of the SharePoint and Graph API they have also grown in size. On one hand this is good as more functionality becomes available but you had to include lots of code you didn't use if you were only doing simple operations. To solve this we introduced selective imports. This allows you to only import the parts of the sp or graph library you need, allowing you to greatly reduce your overall solution bundle size - and enables treeshaking.</p> <p>This concept works well with custom bundling to create a shared package tailored exactly to your needs.</p> <p>If you would prefer to not worry about selective imports please see the section on presets.</p> <p>A quick note on how TypeScript handles type only imports. If you have a line like <code>import { IWeb } from \"@pnp/sp/webs\"</code> everything will transpile correctly but you will get runtime errors because TS will see that line as a type only import and drop it. You need to include both <code>import { IWeb } from \"@pnp/sp/webs\"</code> and <code>import \"@pnp/sp/webs\"</code> to ensure the webs functionality is correctly included. You can see this in the last example below.</p> <pre><code>// the sp var now has almost nothing attached at import time and relies on\n\n// we need to import each of the pieces we need to \"attach\" them for chaining\n// here we are importing the specific sub modules we need and attaching the functionality for lists to web and items to list\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists/web\";\nimport \"@pnp/sp/items/list\";\n\n// placeholder for fully configuring the sp interface\nconst sp = spfi();\n\nconst itemData = await sp.web.lists.getById('00000000-0000-0000-0000-000000000000').items.getById(1)();\n</code></pre> <p>Above we are being very specific in what we are importing, but you can also import entire sub-modules and be slightly less specific</p> <pre><code>// the sp var now has almost nothing attached at import time and relies on\n\n// we need to import each of the pieces we need to \"attach\" them for chaining\n// here we are importing the specific sub modules we need and attaching the functionality for lists to web and items to list\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/items\";\n\n// placeholder for fully configuring the sp interface\nconst sp = spfi();\n\nconst itemData = await sp.web.lists.getById('00000000-0000-0000-0000-000000000000').items.getById(1)();\n</code></pre> <p>The above two examples both work just fine but you may end up with slightly smaller bundle sizes using the first. Consider this example:</p> <pre><code>// this import statement will attach content-type functionality to list, web, and item\nimport \"@pnp/sp/content-types\";\n\n// this import statement will only attach content-type functionality to web\nimport \"@pnp/sp/content-types/web\";\n</code></pre> <p>If you only need to access content types on the web object you can reduce size by only importing that piece.</p> <p>The below example shows the need to import types and module augmentation separately.</p> <pre><code>// this will fail\nimport \"@pnp/sp/webs\";\nimport { IList } from \"@pnp/sp/lists\";\n\n// do this instead\nimport { sp } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport { IList } from \"@pnp/sp/lists\";\n\n// placeholder for fully configuring the sp interface\nconst sp = spfi();\n\nconst lists = await sp.web.lists();\n</code></pre>"},{"location":"concepts/selective-imports/#presets","title":"Presets","text":"<p>Sometimes you don't care as much about bundle size - testing or node development for example. In these cases we have provided what we are calling presets to allow you to skip importing each module individually. Both libraries supply an \"all\" preset that will attach all of the available library functionality.</p> <p>While the presets provided may be useful, we encourage you to look at making your own project presets or custom bundles as a preferred solution. Use of the presets in client-side solutions is not recommended.</p>"},{"location":"concepts/selective-imports/#sp","title":"SP","text":"<pre><code>import \"@pnp/sp/presets/all\";\n\n\n// placeholder for fully configuring the sp interface\nconst sp = spfi();\n\n// sp.* will have all of the library functionality bound to it, tree shaking will not work\nconst lists = await sp.web.lists();\n</code></pre>"},{"location":"concepts/selective-imports/#graph","title":"Graph","text":"<p>The graph library contains a single preset, \"all\" mimicking the v1 structure.</p> <pre><code>import \"@pnp/graph/presets/all\";\nimport { graphfi } from \"@pnp/graph\";\n\n// placeholder for fully configuring the sp interface\nconst graph = graphfi();\n\n// graph.* will have all of the library functionality bound to it, tree shaking will not work\nconst me = await graph.me();\n</code></pre>"},{"location":"concepts/typings/","title":"Typing Return Objects","text":"<p>Whenever you make a request of the library for data from an object and utilize the <code>select</code> method to reduce the size of the objects in the payload its preferable in TypeScript to be able to type that returned object. The library provides you a method to do so by using TypeScript's Generics declaration.</p> <p>By defining the objects type in the &lt;&gt; after the closure of the select method the resulting object is typed.</p> <pre><code>  .select(\"Title\")&lt;{Title: string}&gt;()\n</code></pre> <p>Below are some examples of typing the return payload:</p> <pre><code>  const _sp = spfi().using(SPFx(this.context));\n\n  //Typing the Title property of a field\n  const field = await _sp.site.rootWeb.fields.getById(titleFieldId).select(\"Title\")&lt;{ Title: string }&gt;();\n\n  //Typing the ParentWebUrl property of the selected list.\n  const testList = await _sp.web.lists.getByTitle('MyList').select(\"ParentWebUrl\")&lt;{ ParentWebUrl: string }&gt;();\n</code></pre> <p>There have been discussions in the past around auto-typing based on select and the expected properties of the return object. We haven't done so for a few reasons: there is no even mildly complex way to account for all the possibilities expand introduces to selects, and if we \"ignore\" expand it effectively makes the select typings back to \"any\". Looking at template types etc, we haven't yet seen a way to do this that makes it worth the effort and doesn't introduce some other limitation or confusion.</p>"},{"location":"contributing/","title":"Contributing to PnPjs","text":"<p>Thank you for your interest in contributing to PnPjs. We have updated our contribution section to make things easier to get started, debug the library locally, and learn how to extend the functionality.</p> Section Description NPM Scripts Explains the npm scripts and their uses Setup Dev Machine Covers setting up your machine to ensure you are ready to debug the solution Local Debug Configuration Discusses the steps required to establish local configuration used for debugging and running tests Debugging Describes how to debug PnPjs locally Extending the library Basic examples on how to extend the library such as adding a method or property Writing Tests How to write and debug tests Update Documentation Describes the steps required to edit and locally view the documentation Submit a Pull Request Outlines guidance for submitting a pull request"},{"location":"contributing/#need-help","title":"Need Help?","text":"<p>The PnP \"Sharing Is Caring\" initiative teaches the basics around making changes in GitHub, submitting pull requests to the PnP &amp; Microsoft 365 open-source repositories such as PnPjs. </p> <p>Every month, we provide multiple live hands-on sessions that walk attendees through the process of using and contributing to PnP initiatives.</p> <p>To learn more and register for an upcoming session, please visit the Sharing is Caring website.</p>"},{"location":"contributing/debug-tests/","title":"Writing Tests","text":"<p>With version 2 we have made a significant effort to improve out test coverage. To keep that up, all changes submitted will require one or more tests be included. For new functionality at least a basic test that the method executes is required. For bug fixes please include a test that would have caught the bug (i.e. fail before your fix) and passes with your fix in place.</p>"},{"location":"contributing/debug-tests/#how-to-write-tests","title":"How to write Tests","text":"<p>We use Mocha and Chai for our testing framework. You can see many examples of writing tests within the ./test folder. Here is a sample with extra comments to help explain what's happening, taken from ./test/sp/items.ts:</p> <pre><code>import { getRandomString } from \"@pnp/core\";\nimport { testSettings } from \"../main\";\nimport { expect } from \"chai\";\nimport { sp } from \"@pnp/sp\";\nimport \"@pnp/sp/lists/web\";\nimport \"@pnp/sp/items/list\";\nimport { IList } from \"@pnp/sp/lists\";\n\ndescribe(\"Items\", () =&gt; {\n\n    // any tests that make a web request should be withing a block checking if web tests are enabled\n    if (testSettings.enableWebTests) {\n\n        // a block scoped var we will use across our tests\n        let list: IList = null;\n\n        // we use the before block to setup\n        // executed before all the tests in this block, see the mocha docs for more details\n        // mocha prefers using function vs arrow functions and this is recommended\n        before(async function () {\n\n            // execute a request to ensure we have a list\n            const ler = await sp.web.lists.ensure(\"ItemTestList\", \"Used to test item operations\");\n            list = ler.list;\n\n            // in this case we want to have some items in the list for testing so we add those\n            // only if the list was just created\n            if (ler.created) {\n\n                // add a few items to get started\n                const batch = sp.web.createBatch();\n                list.items.inBatch(batch).add({ Title: `Item ${getRandomString(4)}` });\n                list.items.inBatch(batch).add({ Title: `Item ${getRandomString(4)}` });\n                list.items.inBatch(batch).add({ Title: `Item ${getRandomString(4)}` });\n                list.items.inBatch(batch).add({ Title: `Item ${getRandomString(4)}` });\n                list.items.inBatch(batch).add({ Title: `Item ${getRandomString(4)}` });\n                await batch.execute();\n            }\n        });\n\n        // this test has a label \"get items\" and is run via an async function\n        it(\"get items\", async function () {\n\n            // make a request for the list's items\n            const items = await list.items();\n\n            // report that we expect that result to be an array with more than 0 items\n            expect(items.length).to.be.gt(0);\n        });\n\n        // ... remainder of code removed\n    }\n}\n</code></pre>"},{"location":"contributing/debug-tests/#general-guidelines-for-writing-tests","title":"General Guidelines for Writing Tests","text":"<ul> <li>Tests should operate within the site defined in testSettings</li> <li>Tests should be able to run multiple times on the same site, but do not need to cleanup after themselves</li> <li>Each test should be self contained and not depend on other tests, they can depend on work done in before or beforeAll</li> <li>When writing tests you can use \"only\" and \"skip\" from mochajs to focus on only the tests you are writing</li> <li>Be sure to review the various options when running your tests</li> <li>If you are writing a test and the endpoint doesn't support app only permissions, you can skip writing a test - but please note that in the PR description</li> </ul>"},{"location":"contributing/debug-tests/#next-steps","title":"Next Steps","text":"<p>Now that you've written tests to cover your changes you'll need to update the docs.</p>"},{"location":"contributing/debugging/","title":"Debugging","text":"<p>Using the steps in this article you will be able to locally debug the library internals as well as new features you are working on.</p> <p>Before proceeding be sure you have reviewed how to setup for local configuration and debugging.</p>"},{"location":"contributing/debugging/#debugging-library-features","title":"Debugging Library Features","text":"<p>The easiest way to debug the library when working on new features is using F5 in Visual Studio Code. This uses launch.json to build and run the library using ./debug/launch/main.ts as the entry point.</p>"},{"location":"contributing/debugging/#basic-sharepoint-testing","title":"Basic SharePoint Testing","text":"<p>You can start the base debugging case by hitting F5. Before you do place a break point in ./debug/launch/sp.ts. You can also place a break point within any of the libraries or modules. Feel free to edit the sp.ts file to try things out, debug suspected issues, or test new features, etc - but please don't commit any changes as this is a shared file. See the section on creating your own debug modules.</p> <p>All of the setup for the node client is handled within sp.ts using the settings from the local configuration.</p>"},{"location":"contributing/debugging/#basic-graph-testing","title":"Basic Graph Testing","text":"<p>Testing and debugging Graph calls follows the same process as outlined for SharePoint, however you need to update main.ts to import graph instead of sp. You can place break points anywhere within the library code and they should be hit.</p> <p>All of the setup for the node client is handled within graph.ts using the settings from the local configuration.</p>"},{"location":"contributing/debugging/#how-to-create-a-debug-module","title":"How to: Create a Debug Module","text":"<p>If you are working on multiple features or want to save sample code for various tasks you can create your own debugging modules and leave them in the debug/launch folder locally. The gitignore file is setup to ignore any files that aren't already in git.</p> <p>Using ./debug/launch/sp.ts as a reference create a file in the debug/launch folder, let's call it mydebug.ts and add this content:</p> <pre><code>// note we can use the actual package names for our imports (ex: @pnp/logging)\nimport { Logger, LogLevel, ConsoleListener } from \"@pnp/logging\";\n// using the all preset for simplicity in the example, selective imports work as expected\nimport { sp, ListEnsureResult } from \"@pnp/sp/presets/all\";\n\ndeclare var process: { exit(code?: number): void };\n\nexport async function MyDebug() {\n\n  // configure your options\n  // you can have different configs in different modules as needed for your testing/dev work\n  sp.setup({\n    sp: {\n      fetchClientFactory: () =&gt; {\n        return new SPFetchClient(settings.testing.sp.url, settings.testing.sp.id, settings.testing.sp.secret);\n      },\n    },\n  });\n\n  // run some debugging\n  const list = await sp.web.lists.ensure(\"MyFirstList\");\n\n  Logger.log({\n    data: list.created,\n    level: LogLevel.Info,\n    message: \"Was list created?\",\n  });\n\n  if (list.created) {\n\n    Logger.log({\n      data: list.data,\n      level: LogLevel.Info,\n      message: \"Raw data from list creation.\",\n    });\n\n  } else {\n\n    Logger.log({\n      data: null,\n      level: LogLevel.Info,\n      message: \"List already existed!\",\n    });\n  }\n\n  process.exit(0);\n}\n</code></pre>"},{"location":"contributing/debugging/#update-maints-to-launch-your-module","title":"Update main.ts to launch your module","text":"<p>First comment out the import for the default example and then add the import and function call for yours, the updated launch/main.ts should look like this:</p> <pre><code>// ...\n\n// comment out the example\n// import { Example } from \"./example\";\n// Example();\n\nimport { MyDebug } from \"./mydebug\"\nMyDebug();\n\n// ...\n</code></pre> <p>Remember, please don't commit any changes to the shared files within the debug folder. (Unless you've found a bug that needs fixing in the original file)</p>"},{"location":"contributing/debugging/#debug","title":"Debug","text":"<p>Place a break point within the mydebug.ts file and hit F5. Your module should run and your break point hit. You can then examine the contents of the objects and see the run time state. Remember, you can also set breakpoints within the package src folders to see exactly how things are working during your debugging scenarios.</p>"},{"location":"contributing/debugging/#debug-module-next-steps","title":"Debug Module Next Steps","text":"<p>Using this pattern you can create and preserve multiple debugging scenarios in separate modules locally - they won't be added to git. You just have to update main.ts to point to the one you want to run.</p>"},{"location":"contributing/debugging/#in-browser-debugging","title":"In Browser Debugging","text":"<p>You can also serve files locally to debug as a user in the browser by serving code using ./debug/serve/main.ts as the entry. The file is served as <code>https://localhost:8080/assets/pnp.js</code>, allowing you to create a single page in your tenant for in browser testing. The remainder of this section describes the process to setup a SharePoint page to debug in this manner.</p>"},{"location":"contributing/debugging/#start-the-local-serve","title":"Start the local serve","text":"<p>This will serve a package with ./debug/serve/main.ts as the entry.</p> <p><code>npm run serve</code></p>"},{"location":"contributing/debugging/#add-reference-to-library","title":"Add reference to library","text":"<p>Within a SharePoint page add a script editor web part and then paste in the following code. The div is to give you a place to target with visual updates should you desire.</p> <pre><code>&lt;script src=\"https://localhost:8080/assets/pnp.js\"&gt;&lt;/script&gt;\n&lt;div id=\"pnp-test\"&gt;&lt;/div&gt;\n</code></pre> <p>You should see an alert with the current web's title using the default main.ts. Feel free to update main.ts to do whatever you would like, but remember not to commit changes to the shared files.</p>"},{"location":"contributing/debugging/#debug_1","title":"Debug","text":"<p>Refresh the page and open the developer tools in your browser of choice. If the pnp.js file is blocked due to security restrictions you will need to allow it.</p>"},{"location":"contributing/debugging/#next-steps","title":"Next Steps","text":"<p>You can make changes to the library and immediately see them reflected in the browser. All files are watched so changes will be available as soon as webpack reloads the package. This allows you to rapidly test the library in the browser.</p> <p>Now you can learn about extending the library.</p>"},{"location":"contributing/documentation/","title":"Documentation","text":"<p>Just like with tests we have invested much time in updating the documentation and when you make a change to the library you should update the associated documentation as part of the pull request.</p>"},{"location":"contributing/documentation/#writing-docs","title":"Writing Docs","text":"<p>Our docs are all written in markdown and processed using MkDocs. You can use code blocks, tables, and other markdown formatting. You can review the other articles for examples on writing docs. Generally articles should focus on how to use the library and where appropriate link to official outside documents as needed. Official documentation could be Microsoft, other library project docs such as MkDocs, or other sources.</p>"},{"location":"contributing/documentation/#building-docs-locally","title":"Building Docs Locally","text":"<p>Building the documentation locally can help you visualize change you are making to the docs. What you see locally will be what you see online. Documentation is built using MkDocs. You will need to latest version of Python (tested on version 3.7.1) and pip. If you're on the Windows operating system, make sure you have added Python to your Path environment variable.</p> <p>When executing the pip module on Windows you can prefix it with python -m. For example:</p> <p><code>python -m pip install mkdocs-material</code></p> <ul> <li>Install MkDocs<ul> <li>pip install mkdocs</li> </ul> </li> <li>Install the Material theme<ul> <li>pip install mkdocs-material</li> </ul> </li> <li>install the mkdocs-markdownextradata-plugin - this is used for the version variable<ul> <li>pip install mkdocs-markdownextradata-plugin (doesn't work on Python v2.7)</li> </ul> </li> <li>install redirect plugin - used to redirect from moved pages<ul> <li>pip install mkdocs-redirects</li> </ul> </li> <li>Serve it up<ul> <li><code>mkdocs serve</code></li> <li>Open a browser to <code>http://127.0.0.1:8000/</code></li> </ul> </li> </ul> <p>Please see the official mkdocs site for more details on working with mkdocs</p>"},{"location":"contributing/documentation/#next-steps","title":"Next Steps","text":"<p>After your changes are made, you've added/updated tests, and updated the docs you're ready to submit a pull request!</p>"},{"location":"contributing/extending-the-library/","title":"Extending PnPjs","text":"<p>This article is targeted at people wishing to extend PnPjs itself, usually by adding a method or property.</p> <p>At the most basic level PnPjs is a set of libraries used to build and execute a web request and handle the response from that request. Conceptually each object in the fluent chain serves as input when creating the next object in the chain. This is how configuration, url, query, and other values are passed along. To get a sense for what this looks like see the code below. This is taken from inside the webs submodule and shows how the \"webs\" property is added to the web class.</p> <pre><code>// TypeScript property, returning an interface\npublic get webs(): IWebs {\n    // using the Webs factory function and providing \"this\" as the first parameter\n    return Webs(this);\n}\n</code></pre>"},{"location":"contributing/extending-the-library/#understanding-factory-functions","title":"Understanding Factory Functions","text":"<p>PnPjs v3 is designed to only expose interfaces and factory functions. Let's look at the Webs factory function, used above as an example. All factory functions in sp and graph have a similar form.</p> <pre><code>// create a constant which is a function of type ISPInvokableFactory having the name Webs\n// this is bound by the generic type param to return an IWebs instance\n// and it will use the _Webs concrete class to form the internal type of the invocable\nexport const Webs = spInvokableFactory&lt;IWebs&gt;(_Webs);\n</code></pre> <p>The ISPInvokableFactory type looks like:</p> <pre><code>export type ISPInvokableFactory&lt;R = any&gt; = (baseUrl: string | ISharePointQueryable, path?: string) =&gt; R;\n</code></pre> <p>And the matching graph type:</p> <pre><code>&lt;R&gt;(f: any): (baseUrl: string | IGraphQueryable, path?: string) =&gt; R\n</code></pre> <p>The general idea of a factory function is that it takes two parameters. The first is either a string or Queryable derivative which forms base for the new object. The second is the next part of the url. In some cases (like the webs property example above) you will note there is no second parameter. Some classes are decorated with defaultPath, which automatically fills the second param. Don't worry too much right now about the deep internals of the library, let's instead focus on some concrete examples.</p> <pre><code>import { SPFx } from \"@pnp/sp\";\nimport { Web } from \"@pnp/sp/webs\";\n\n// create a web from an absolute url\nconst web = Web(\"https://tenant.sharepoint.com\").using(SPFx(this.context));\n\n// as an example, create a new web using the first as a base\n// targets: https://tenant.sharepoint.com/sites/dev\nconst web2 = Web(web, \"sites/dev\");\n\n// or you can add any path components you want, here as an example we access the current user property\nconst cu = Web(web, \"currentuser\");\nconst currentUserInfo = cu();\n</code></pre> <p>Now hey you might say - you can't create a request to current user using the Web factory. Well you can, since everything is just based on urls under the covers the actual factory names don't mean anything other than they have the appropriate properties and method hung off them. This is brought up as you will see in many cases objects being used to create queries within methods and properties that don't match their \"type\". It is an important concept when working with the library to always remember we are just building strings.</p>"},{"location":"contributing/extending-the-library/#class-structure","title":"Class structure","text":"<p>Internally to the library we have a bit of complexity to make the whole invocable proxy architecture work and provide the typings folks expect. Here is an example implementation with extra comments explaining what is happening. You don't need to understand the entire stack to add a property or method</p> <pre><code>/*\nThe concrete class implementation. This is never exported or shown directly\nto consumers of the library. It is wrapped by the Proxy we do expose.\n\nIt extends the _SharePointQueryableInstance class for which there is a matching\n_SharePointQueryableCollection. The generic parameter defines the return type\nof a get operation and the invoked result.\n\nClasses can have methods and properties as normal. This one has a single property as a simple example\n*/\nexport class _HubSite extends _SharePointQueryableInstance&lt;IHubSiteInfo&gt; {\n\n    /**\n     * Gets the ISite instance associated with this hub site\n     */\n    // the tag decorator is used to provide some additional telemetry on what methods are\n    // being called.\n    @tag(\"hs.getSite\")\n    public async getSite(): Promise&lt;ISite&gt; {\n\n        // we execute a request using this instance, selecting the SiteUrl property, and invoking it immediately and awaiting the result\n        const d = await this.select(\"SiteUrl\")();\n\n        // we then return a new ISite instance created from the Site factory using the returned SiteUrl property as the baseUrl\n        return Site(d.SiteUrl);\n    }\n}\n\n/*\nThis defines the interface we export and expose to consumers.\nIn most cases this extends the concrete object but may add or remove some methods/properties\nin special cases\n*/\nexport interface IHubSite extends _HubSite { }\n\n/*\nThis defines the HubSite factory function as discussed above\nbinding the spInvokableFactory to a generic param of IHubSite and a param of _HubSite.\n\nThis is understood to mean that HubSite is a factory function that returns a types of IHubSite\nwhich the spInvokableFactory will create using _HubSite as the concrete underlying type.\n*/\nexport const HubSite = spInvokableFactory&lt;IHubSite&gt;(_HubSite);\n</code></pre>"},{"location":"contributing/extending-the-library/#add-a-property","title":"Add a Property","text":"<p>In most cases you won't need to create the class, interface, or factory - you just want to add a property or method. An example of this is sp.web.lists. web is a property of sp and lists is a property of web. You can have a look at those classes as examples. Let's have a look at the fields on the _View class.</p> <pre><code>export class _View extends _SharePointQueryableInstance&lt;IViewInfo&gt; {\n\n    // ... other code removed\n\n    // add the property, and provide a return type\n    // return types should be interfaces\n    public get fields(): IViewFields {\n        // we use the ViewFields factory function supplying \"this\" as the first parameter\n        // this will create a url like \".../fields/viewfields\" due to the defaultPath decorator\n        // on the _ViewFields class. This is equivalent to: ViewFields(this, \"viewfields\")\n        return ViewFields(this);\n    }\n\n    // ... other code removed\n}\n</code></pre> <p>There are many examples throughout the library that follow this pattern.</p>"},{"location":"contributing/extending-the-library/#add-a-method","title":"Add a Method","text":"<p>Adding a method is just like adding a property with the key difference that a method usually does something like make a web request or act like a property but take parameters. Let's look at the _Items getById method:</p> <pre><code>@defaultPath(\"items\")\nexport class _Items extends _SharePointQueryableCollection {\n\n    /**\n    * Gets an Item by id\n    *\n    * @param id The integer id of the item to retrieve\n    */\n    // we declare a method and set the return type to an interface\n    public getById(id: number): IItem {\n        // here we use the tag helper to add some telemetry to our request\n        // we create a new IItem using the factory and appending the id value to the end\n        // this gives us a valid url path to a single item .../items/getById(2)\n        // we can then use the returned IItem to extend our chain or execute a request\n        return tag.configure(Item(this).concat(`(${id})`), \"is.getById\");\n    }\n\n    // ... other code removed\n}\n</code></pre>"},{"location":"contributing/extending-the-library/#web-request-method","title":"Web Request Method","text":"<p>A second example is a method that performs a request. Here we use the _Item recycle method as an example:</p> <pre><code>/**\n * Moves the list item to the Recycle Bin and returns the identifier of the new Recycle Bin item.\n */\n// we use the tag decorator to add telemetry\n@tag(\"i.recycle\")\n// we return a promise\npublic recycle(): Promise&lt;string&gt; {\n    // we use the spPost method to post the request created by cloning our current instance IItem using\n    // the Item factory and adding the path \"recycle\" to the end. Url will look like .../items/getById(2)/recycle\n    return spPost&lt;string&gt;(Item(this, \"recycle\"));\n}\n</code></pre>"},{"location":"contributing/extending-the-library/#augment-using-selective-imports","title":"Augment Using Selective Imports","text":"<p>To understand is how to extend functionality within the selective imports structures look at list.ts file in the items submodule. Here you can see the code below, with extra comments to explain what is happening. Again, you will see this pattern repeated throughout the library so there are many examples available.</p> <pre><code>// import the addProp helper\nimport { addProp } from \"@pnp/queryable\";\n// import the _List concrete class from the types module (not the index!)\nimport { _List } from \"../lists/types\";\n// import the interface and factory we are going to add to the List\nimport { Items, IItems } from \"./types\";\n\n// This module declaration fixes up the types, allowing .items to appear in intellisense\n// when you import \"@pnp/sp/items/list\";\ndeclare module \"../lists/types\" {\n    // we need to extend the concrete type\n    interface _List {\n        readonly items: IItems;\n    }\n    // we need to extend the interface\n    // this may not be strictly necessary as the IList interface extends _List so it\n    // should pick up the same additions, but we have seen in some cases this does seem\n    // to be required. So we include it for safety as it will all be removed during\n    // transpilation we don't need to care about the extra code\n    interface IList {\n        readonly items: IItems;\n    }\n}\n\n// finally we add the property to the _List class\n// this method call says add a property to _List named \"items\" and that property returns a result using the Items factory\n// The factory will be called with \"this\" when the property is accessed. If needed there is a fourth parameter to append additional path\n// information to the property url\naddProp(_List, \"items\", Items);\n</code></pre>"},{"location":"contributing/extending-the-library/#general-rules-for-extending-pnpjs","title":"General Rules for Extending PnPjs","text":"<ul> <li>Only expose interfaces to consumers</li> <li>Use the factory functions except in very special cases</li> <li>Look for other properties and methods as examples</li> <li>Simple is always preferable, but not always possible - use your best judgement</li> <li>If you find yourself writing a ton of code to solve a problem you think should be easy, ask</li> <li>If you find yourself deep within the core classes or odata library trying to make a change, ask - changes to the core classes are rarely needed</li> </ul>"},{"location":"contributing/extending-the-library/#next-steps","title":"Next Steps","text":"<p>Now that you have extended the library you need to write a test to cover it!</p>"},{"location":"contributing/local-debug-configuration/","title":"Local Debugging Configuration","text":"<p>This article covers the local setup required to debug the library and run tests. This only needs to be done once (unless you update the app registrations, then you just need to update the settings.js file accordingly).</p>"},{"location":"contributing/local-debug-configuration/#create-settingsjs","title":"Create settings.js","text":"<p>Both local debugging and tests make use of a settings.js file located in the root of the project. Ensure you create a settings.js files by copying settings.example.js and renaming it to settings.js. For more information the settings file please see <code>Settings</code></p>"},{"location":"contributing/local-debug-configuration/#minimal-configuration","title":"Minimal Configuration","text":"<p>You can control which tests are run by including or omitting sp and graph sections. If sp is present and graph is not, only sp tests are run. Include both and all tests are run, respecting the enableWebTests flag.</p> <p>The following configuration file allows you to run all the tests that do not contact services.</p> <pre><code>export const settings = {\n  testing: {\n    enableWebTests: false,\n  },\n}\n</code></pre>"},{"location":"contributing/local-debug-configuration/#test-your-setup","title":"Test your setup","text":"<p>If you hit F5 in VSCode now you should be able to see the full response from getting the web's title in the internal console window. If not, ensure that you have properly updated the settings file and registered the add-in perms correctly.</p>"},{"location":"contributing/npm-scripts/","title":"Supported NPM Scripts","text":"<p>As you likely are aware you can embed scripts within package.json. Using this capability coupled with the knowledge that pretty much all of the tools we use now support code files (.js/.ts) as configuration we have removed gulp from our tooling and now execute our various actions via scripts. This is not a knock on gulp, it remains a great tool, rather an opportunity for us to remove some dependencies.</p> <p>This article outlines the current scripts we've implemented and how to use them, with available options and examples.</p>"},{"location":"contributing/npm-scripts/#start","title":"Start","text":"<p>Executes the <code>serve</code> command</p> <pre><code>npm start\n</code></pre>"},{"location":"contributing/npm-scripts/#serve","title":"Serve","text":"<p>Starts a debugging server serving a bundled script with ./debug/serve/main.ts as the entry point. This allows you to run tests and debug code running within the context of a webpage rather than node.</p> <pre><code>npm run serve\n</code></pre>"},{"location":"contributing/npm-scripts/#test","title":"Test","text":"<p>Runs the tests and coverage for the library.</p> <p>More details on setting up MSAL for node.</p>"},{"location":"contributing/npm-scripts/#options","title":"Options","text":"<p>There are several options you can provide to the test command. All of these need to be separated using a \"--\" double hyphen so they are passed to the spawned sub-commands.</p>"},{"location":"contributing/npm-scripts/#test-a-single-package","title":"Test a Single Package","text":"<p><code>--package</code> or <code>-p</code></p> <p>This option will only run the tests associated with the package you specify. The values are the folder names within the ./packages directory.</p> <pre><code># run only sp tests\nnpm test -- -p sp\n\n# run only logging tests\nnpm test -- -package logging\n</code></pre>"},{"location":"contributing/npm-scripts/#run-a-single-test-file","title":"Run a Single Test File","text":"<p><code>--single</code> or <code>--s</code></p> <p>You can also run a specific file with a package. This option must be used with the single package option as you are essentially specifying the folder and file. This option uses either the  flags.</p> <pre><code># run only sp web tests\nnpm test -- -p sp -s web\n\n# run only graph groups tests\nnpm test -- -package graph -single groups\n</code></pre>"},{"location":"contributing/npm-scripts/#specify-a-site","title":"Specify a Site","text":"<p><code>--site</code></p> <p>By default every time you run the tests a new sub-site is created below the site specified in your settings file. You can choose to reuse a site for testing, which saves time when re-running a set of tests frequently. Testing content is not deleted after tests, so if you need to inspect the created content from testing you may wish to forgo this option.</p> <p>This option can be used with any or none of the other testing options.</p> <pre><code># run only sp web tests with a certain site\nnpm test -- -p sp -s web --site https://some.site.com/sites/dev\n</code></pre>"},{"location":"contributing/npm-scripts/#cleanup","title":"Cleanup","text":"<p><code>--cleanup</code></p> <p>If you include this flag the testing web will be deleted once tests are complete. Useful for local testing where you do not need to inspect the web once the tests are complete. Works with any of the other options, be careful when specifying a web using <code>--site</code> as it will be deleted.</p> <pre><code># clean up our testing site\nnpm test -- --cleanup\n</code></pre>"},{"location":"contributing/npm-scripts/#logging","title":"Logging","text":"<p><code>--logging</code></p> <p>If you include this flag a console logger will be subscribed and the log level will be set to Info. This will provide console output for all the requests being made during testing. This flag is compatible with all other flags - however unless you are trying to debug a specific test this will produce a lot of chatty output.</p> <pre><code># enable logging during testing\nnpm test -- --logging\n</code></pre> <p>You can also optionally set a log level of error, warning, info, or verbose:</p> <pre><code># enable logging during testing in verbose (lots of info)\nnpm test -- --logging verbose\n</code></pre> <pre><code># enable logging during testing in error\nnpm test -- --logging error\n</code></pre>"},{"location":"contributing/npm-scripts/#spverbose","title":"spVerbose","text":"<p><code>--spverbose</code></p> <p>This flag will enable \"verbose\" OData mode for SharePoint tests. This flag is compatible with other flags.</p> <pre><code>npm test -- --spverbose\n</code></pre>"},{"location":"contributing/npm-scripts/#build","title":"build","text":"<p>Invokes the pnpbuild cli to transpile the TypeScript into JavaScript. All behavior is controlled via the tsconfig.json in the root of the project and sub folders as needed.</p> <pre><code>npm run build\n</code></pre>"},{"location":"contributing/npm-scripts/#package","title":"package","text":"<p>Invokes the pnpbuild cli to create the package directories under the dist folder. This will allow you to see exactly what will end up in the npm packages once they are published.</p> <pre><code>npm run package\n</code></pre>"},{"location":"contributing/npm-scripts/#lint","title":"lint","text":"<p>Runs the linter.</p> <pre><code>npm run lint\n</code></pre>"},{"location":"contributing/npm-scripts/#clean","title":"clean","text":"<p>Removes any generated folders from the working directory.</p> <pre><code>npm run clean\n</code></pre>"},{"location":"contributing/pull-requests/","title":"Submitting Pull Requests","text":"<p>Pull requests may be large or small - adding whole new features or fixing some misspellings. Regardless, they are all appreciated and help improve the library for everyone! By following the below guidelines we'll have an easier time merging your work and getting it into the next release.</p> <ul> <li>Target your pull requests to the version-3 branch</li> <li>Add/Update any relevant docs articles in the relevant package's docs folder related to your changes</li> <li>Include a test for any new functionality and ensure all existing tests are passing by running <code>npm test</code></li> <li>Ensure linting checks pass by typing <code>npm run lint</code></li> <li>Ensure everything works for a build by running <code>npm run package</code></li> <li>Keep your PRs as simple as possible and describe the changes to help the reviewer understand your work</li> <li>If you have an idea for a larger change to the library please open an issue and let's discuss before you invest many hours - these are very welcome but want to ensure it is something we can merge before you spend the time :)</li> </ul> <p>If you need to target a PR for version 1, please target the \"version-1\" branch</p>"},{"location":"contributing/pull-requests/#sharing-is-caring-pull-request-guidance","title":"Sharing is Caring - Pull Request Guidance","text":"<p>The PnP \"Sharing Is Caring\" initiative teaches the basics around making changes in GitHub, submitting pull requests to the PnP &amp; Microsoft 365 open-source repositories such as PnPjs. </p> <p>Every month, we provide multiple live hands-on sessions that walk attendees through the process of using and contributing to PnP initiatives.</p> <p>To learn more and register for an upcoming session, please visit the Sharing is Caring website.</p>"},{"location":"contributing/pull-requests/#next-steps","title":"Next Steps","text":"<p>Now that you've submitted your PR please keep an eye on it as we might have questions. Once an initial review is complete we'll tag it with the expected version number for which it is targeted.</p> <p>Thank you for helping PnPjs grow and improve!!</p>"},{"location":"contributing/settings/","title":"Project Settings","text":"<p>This article discusses creating a project settings file for use in local development and debugging of the libraries. The settings file contains authentication and other settings to enable you to run and debug the project locally.</p> <p>The settings file is a JavaScript file that exports a single object representing the settings of your project. You can view the example settings file in the project root.</p>"},{"location":"contributing/settings/#settings-file-format","title":"Settings File Format","text":"<p>The settings file is configured with MSAL authentication for both SharePoint and Graph. For more information coinfiguring MSAL please review the section in the authentication section for node.</p> <p>MSAL configuration has two parts, these are the initialization which is passed directly to the MsalFetchClient (and on to the underlying msal-node instance) and the scopes. The scopes are always \"https://{tenant}.sharepoint.com/.default\" or \"https://graph.microsoft.com/.default\" depending on what you are calling.</p> <p>If you are calling Microsoft Graph sovereign or gov clouds the scope may need to be updated.</p> <p>You will need to create testing certs for the sample settings file below. Using the following code you end up with three files, \"cert.pem\", \"key.pem\", and \"keytmp.pem\". The \"cert.pem\" file is uploaded to your AAD application registration. The \"key.pem\" is read as the private key for the configuration. Copy the contents of the \"key.pem\" file and paste it in the <code>privateKey</code> variable below. The <code>gitignore</code> file in this repository will ignore the settings.js file.</p> <p>Replace <code>HereIsMySuperPass</code> with your own password</p> <pre><code>mkdir \\temp\ncd \\temp\nopenssl req -x509 -newkey rsa:2048 -keyout keytmp.pem -out cert.pem -days 365 -passout pass:HereIsMySuperPass -subj '/C=US/ST=Washington/L=Seattle'\nopenssl rsa -in keytmp.pem -out key.pem -passin pass:HereIsMySuperPass\n</code></pre> <pre><code>const privateKey = `-----BEGIN RSA PRIVATE KEY-----\nyour private key, read from a file or included here\n-----END RSA PRIVATE KEY-----\n`;\n\nvar msalInit = {\n    auth: {\n        authority: \"https://login.microsoftonline.com/{tenant id}\",\n        clientCertificate: {\n            thumbprint: \"{certificate thumbnail}\",\n            privateKey: privateKey,\n        },\n        clientId: \"{AAD App registration id}\",\n    }\n}\n\nexport const settings = {\n    testing: {\n        enableWebTests: true,\n        testUser: \"i:0#.f|membership|user@consto.com\",\n        testGroupId:\"{ Microsoft 365 Group ID }\",\n        sp: {\n            url: \"{required for MSAL - absolute url of test site}\",\n            notificationUrl: \"{ optional: notification url }\",\n            msal: {\n                init: msalInit,\n                scopes: [\"https://{tenant}.sharepoint.com/.default\"]\n            },\n        },\n        graph: {\n            msal: {\n                init: msalInit,\n                scopes: [\"https://graph.microsoft.com/.default\"]\n            },\n        },\n    },\n}\n\n</code></pre> <p>The settings object has a single sub-object <code>testing</code> which contains the configuration used for debugging and testing PnPjs. The parts of this object are described in detail below.</p> enableWebTests Flag to toggle if tests are run against the live services or not. If this is set to false none of the other sections are required. testUser AAD login account to be used when running tests. testGroupId Group ID of Microsoft 365 Group to be used when running test cases. sp Settings used to configure SharePoint (sp library) debugging and tests graph Settings used to configure Microsoft Graph (graph library) debugging and tests"},{"location":"contributing/settings/#sp-values","title":"SP values","text":"name description url The url of the site to use for all requests. If a site parameter is not specified a child web will be created under the web at this url. See scripts article for more details. notificationUrl Url used when registering test subscriptions msal Information about MSAL authentication setup"},{"location":"contributing/settings/#graph-value","title":"Graph value","text":"<p>The graph values are described in the table below and come from registering an AAD Application. The permissions required by the registered application are dictated by the tests you want to run or resources you wish to test against.</p> name description msal Information about MSAL authentication setup"},{"location":"contributing/settings/#create-settingsjs-file","title":"Create Settings.js file","text":"<ol> <li>Copy the example file and rename it settings.js. Place the file in the root of your project.</li> <li>Update the settings as needed for your environment.</li> </ol> <p>If you are only doing SharePoint testing you can leave the graph section off and vice-versa. Also, if you are not testing anything with hooks you can leave off the notificationUrl.</p>"},{"location":"contributing/setup-dev-machine/","title":"Setting up your Developer Machine","text":"<p>If you are a longtime client side developer you likely have your machine already configured and can skip to forking the repo and debugging.</p>"},{"location":"contributing/setup-dev-machine/#setup-your-development-environment","title":"Setup your development environment","text":"<p>These steps will help you get your environment setup for contributing to the core library.</p> <ol> <li> <p>Install Visual Studio Code - this is the development environment we use so the contribution sections expect you are as well. If you prefer you can use Visual Studio or any editor you like.</p> </li> <li> <p>Install Node JS - this provides two key capabilities; the first is the nodejs server which will act as our development server (think iisexpress), the second is npm a package manager (think nuget).</p> <p>This library requires node &gt;= 10.18.0</p> </li> <li> <p>On Windows: Install Python</p> </li> <li> <p>[Optional] Install the tslint extension in VS Code:</p> <ol> <li>Press Shift + Ctrl + \"p\" to open the command panel</li> <li>Begin typing \"install extension\" and select the command when it appears in view</li> <li>Begin typing \"tslint\" and select the package when it appears in view</li> <li>Restart Code after installation</li> </ol> </li> </ol>"},{"location":"contributing/setup-dev-machine/#fork-the-repo","title":"Fork The Repo","text":"<p>All of our contributions come via pull requests and you'll need to fork the repository</p> <ol> <li> <p>Now we need to fork and clone the git repository. This can be done using your console or using your preferred Git GUI tool.</p> </li> <li> <p>Once you have the code locally, navigate to the root of the project in your console. Type the following command:</p> <p><code>npm install</code></p> </li> <li> <p>Follow the guidance to complete the one-time local configuration required to debug and run tests.</p> </li> <li> <p>Then you can follow the guidance in the debugging article.</p> </li> </ol>"},{"location":"core/behavior-recipes/","title":"Behavior Recipes","text":"<p>This article contains example recipes for building your own behaviors. We don't want to include every possible behavior within the library, but do want folks to have easy ways to solve the problems they encounter. If have ideas for a missing recipe, please let us know in the issues list OR submit them to this page as a PR! We want to see what types of behaviors folks build and will evaluate options to either include them in the main libraries, leave them here as a reference resource, or possibly release a community behaviors package.</p> <p>Alternatively we encourage you to publish your own behaviors as npm packages to share with others!</p>"},{"location":"core/behavior-recipes/#proxy","title":"Proxy","text":"<p>At times you might need to introduce a proxy for requests for debugging or other networking needs. You can easily do so using your proxy of choice in Nodejs. This example uses \"https-proxy-agent\" but would work similarly for any implementation. </p> <p>proxy.ts</p> <pre><code>import { TimelinePipe } from \"@pnp/core\";\nimport { Queryable } from \"@pnp/queryable\";\nimport { HttpsProxyAgent } from \"https-proxy-agent\";\n\nexport function Proxy(proxyInit: string): TimelinePipe&lt;Queryable&gt;;\n// eslint-disable-next-line no-redeclare\nexport function Proxy(proxyInit: any): TimelinePipe&lt;Queryable&gt;;\n// eslint-disable-next-line no-redeclare\nexport function Proxy(proxyInit: any): TimelinePipe&lt;Queryable&gt; {\n\n    const proxy = typeof proxyInit === \"string\" ? new HttpsProxyAgent(proxyInit) : proxyInit;\n\n    return (instance: Queryable) =&gt; {\n\n        instance.on.pre(async (url, init, result) =&gt; {\n\n            // we add the proxy to the request\n            (&lt;any&gt;init).agent = proxy;\n\n            return [url, init, result];\n        });\n\n        return instance;\n    };\n}\n</code></pre> <p>usage</p> <pre><code>import { Proxy } from \"./proxy.ts\";\n\nimport \"@pnp/sp/webs\";\nimport { SPDefault } from \"@pnp/nodejs\";\n\n// would work with graph library in the same manner\nconst sp = spfi(\"https://tenant.sharepoint.com/sites.dev\").using(SPDefault({\n    msal: {\n        config: { config },\n        scopes: {scopes },\n    },\n}), Proxy(\"http://127.0.0.1:8888\"));\n\nconst webInfo = await sp.webs();\n</code></pre>"},{"location":"core/behavior-recipes/#add-querystring-to-bypass-request-caching","title":"Add QueryString to bypass request caching","text":"<p>In some instances users express a desire to append something to the querystring to avoid getting cached responses back for requests. This pattern is an example of doing that in v3.</p> <p>query-cache-param.ts</p> <pre><code>export function CacheBust(): TimelinePipe&lt;Queryable&gt; {\n\n    return (instance: Queryable) =&gt; {\n\n        instance.on.pre(async (url, init, result) =&gt; {\n\n            url += url.indexOf(\"?\") &gt; -1 ? \"&amp;\" : \"?\";\n\n            url += \"nonce=\" + encodeURIComponent(new Date().toISOString());\n\n            return [url, init, result];\n        });\n\n        return instance;\n    };\n}\n</code></pre> <p>usage</p> <pre><code>import { CacheBust } from \"./query-cache-param.ts\";\n\nimport \"@pnp/sp/webs\";\nimport { SPDefault } from \"@pnp/nodejs\";\n\n// would work with graph library in the same manner\nconst sp = spfi(\"https://tenant.sharepoint.com/sites.dev\").using(SPDefault({\n    msal: {\n        config: { config },\n        scopes: { scopes },\n    },\n}), CacheBust());\n\nconst webInfo = await sp.webs();\n</code></pre>"},{"location":"core/behavior-recipes/#acs-authentication","title":"ACS Authentication","text":"<p>Starting with v3 we no longer provide support for ACS authentication within the library. However you may have a need (legacy applications, on-premises) to use ACS authentication while wanting to migrate to v3. Below you can find an example implementation of an Authentication observer for ACS. This is not a 100% full implementation, for example the tokens are not cached.</p> <p>Whenever possible we encourage you to use AAD authentication and move away from ACS for securing your server-side applications.</p> <pre><code>export function ACS(clientId: string, clientSecret: string, authUrl = \"https://accounts.accesscontrol.windows.net\"): (instance: Queryable) =&gt; Queryable {\n\n  const SharePointServicePrincipal = \"00000003-0000-0ff1-ce00-000000000000\";\n\n  async function getRealm(siteUrl: string): Promise&lt;string&gt; {\n\n    const url = combine(siteUrl, \"_vti_bin/client.svc\");\n\n    const r = await nodeFetch(url, {\n      \"headers\": {\n        \"Authorization\": \"Bearer \",\n      },\n      \"method\": \"POST\",\n    });\n\n    const data: string = r.headers.get(\"www-authenticate\") || \"\";\n    const index = data.indexOf(\"Bearer realm=\\\"\");\n    return data.substring(index + 14, index + 50);\n  }\n\n  function getFormattedPrincipal(principalName: string, hostName: string, realm: string): string {\n    let resource = principalName;\n    if (hostName !== null &amp;&amp; hostName !== \"\") {\n      resource += \"/\" + hostName;\n    }\n    resource += \"@\" + realm;\n    return resource;\n  }\n\n  async function getFullAuthUrl(realm: string): Promise&lt;string&gt; {\n\n    const url = combine(authUrl, `/metadata/json/1?realm=${realm}`);\n\n    const r = await nodeFetch(url, { method: \"GET\" });\n    const json: { endpoints: { protocol: string; location: string }[] } = await r.json();\n\n    const eps = json.endpoints.filter(ep =&gt; ep.protocol === \"OAuth2\");\n    if (eps.length &gt; 0) {\n      return eps[0].location;\n    }\n\n    throw Error(\"Auth URL Endpoint could not be determined from data.\");\n  }\n\n  return (instance: Queryable) =&gt; {\n\n    instance.on.auth.replace(async (url: URL, init: RequestInit) =&gt; {\n\n      const realm = await getRealm(url.toString());\n      const fullAuthUrl = await getFullAuthUrl(realm);\n\n      const resource = getFormattedPrincipal(SharePointServicePrincipal, url.host, realm);\n      const formattedClientId = getFormattedPrincipal(clientId, \"\", realm);\n\n      const body: string[] = [];\n      body.push(\"grant_type=client_credentials\");\n      body.push(`client_id=${formattedClientId}`);\n      body.push(`client_secret=${encodeURIComponent(clientSecret)}`);\n      body.push(`resource=${resource}`);\n\n      const r = await nodeFetch(fullAuthUrl, {\n        body: body.join(\"&amp;\"),\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\n        },\n        method: \"POST\",\n      });\n\n      const accessToken: { access_token: string } = await r.json();\n\n      init.headers = { ...init.headers, Authorization: `Bearer ${accessToken.access_token}` };\n\n      return [url, init];\n    });\n\n    return instance;\n  };\n}\n</code></pre> <p>usage</p> <pre><code>import { CacheBust } from \"./acs-auth-behavior.ts\";\nimport \"@pnp/sp/webs\";\nimport { SPDefault } from \"@pnp/nodejs\";\n\nconst sp = spfi(\"https://tenant.sharepoint.com/sites.dev\").using(SPDefault(), ACS(\"{client id}\", \"{client secret}\"));\n\n// you can optionally provide the authentication url, here using the one for China's sovereign cloud or an local url if working on-premises\n// const sp = spfi(\"https://tenant.sharepoint.com/sites.dev\").using(SPDefault(), ACS(\"{client id}\", \"{client secret}\", \"https://accounts.accesscontrol.chinacloudapi.cn\"));\n\nconst webInfo = await sp.webs();\n</code></pre>"},{"location":"core/behaviors/","title":"@pnp/core : behaviors","text":"<p>While you can always register observers to any Timeline's moments using the <code>.on.moment</code> syntax, to make things easier we have included the ability to create behaviors. Behaviors define one or more observer registrations abstracted into a single registration. To differentiate behaviors are applied with the <code>.using</code> method. The power of behaviors is they are composable so a behavior can apply other behaviors.</p>"},{"location":"core/behaviors/#basic-example","title":"Basic Example","text":"<p>Let's create a behavior that will register two observers to a Timeline. We'll use error and log since they exist on all Timelines. In this example let's imagine we need to include some special secret into every lifecycle for logging to work. And we also want a company wide method to track errors. So we roll our own behavior.</p> <pre><code>import { Timeline, TimelinePipe } from \"@pnp/core\";\nimport { MySpecialLoggingFunction } from \"../mylogging.js\";\n\n// top level function allows binding of values within the closure\nexport function MyBehavior(specialSecret: string): TimelinePipe {\n\n    // returns the actual behavior function that is applied to the instance\n    return (instance: Timeline&lt;any&gt;) =&gt; {\n\n        // register as many observers as needed\n        instance.on.log(function (message: string, severity: number) {\n\n            MySpecialLoggingFunction(message, severity, specialSecret);\n        });\n\n        instance.on.error(function (err: string | Error) {\n\n            MySpecialLoggingFunction(typeof err === \"string\" ? err : err.toString(), severity, specialSecret);\n        });\n\n        return instance;\n    };\n}\n\n// apply the behavior to a Timeline/Queryable\nobj.using(MyBehavior(\"HereIsMySuperSecretValue\"));\n</code></pre>"},{"location":"core/behaviors/#composing-behaviors","title":"Composing Behaviors","text":"<p>We encourage you to use our defaults, or create your own default behavior appropriate to your needs. You can see all of the behaviors available in @pnp/nodejs, @pnp/queryable, @pnp/sp, and @pnp/graph.</p> <p>As an example, let's create our own behavior for a nodejs project. We want to call the graph, default to the beta endpoint, setup MSAL, and include a custom header we need for our environment. To do so we create a composed behavior consisting of graph's DefaultInit, graph's DefaultHeaders, nodejs's MSAL, nodejs's NodeFetchWithRetry, and queryable's DefaultParse &amp; InjectHeaders. Then we can import this behavior into all our projects to configure them.</p> <p>company-default.ts</p> <pre><code>import { TimelinePipe } from \"@pnp/core\";\nimport { DefaultParse, Queryable, InjectHeaders } from \"@pnp/queryable\";\nimport { DefaultHeaders, DefaultInit } from \"@pnp/graph\";\nimport { NodeFetchWithRetry, MSAL } from \"@pnp/nodejs\";\n\nexport function CompanyDefault(): TimelinePipe&lt;Queryable&gt; {\n\n    return (instance: Queryable) =&gt; {\n\n        instance.using(\n            // use the default headers\n            DefaultHeaders(),\n            // use the default init, but change the base url to beta\n            DefaultInit(\"https://graph.microsoft.com/beta\"),\n            // use node-fetch with retry\n            NodeFetchWithRetry(),\n            // use the default parsing\n            DefaultParse(),\n            // inject our special header to all requests\n            InjectHeaders({\n                \"X-SomeSpecialToken\": \"{THE SPECIAL TOKEN VALUE}\",\n            }),\n            // setup node's MSAL with configuration from the environment (or any source)\n            MSAL(process.env.MSAL_CONFIG));\n\n        return instance;\n    };\n}\n</code></pre> <p>index.ts</p> <pre><code>import { CompanyDefault } from \"./company-default.ts\";\nimport { graphfi } from \"@pnp/graph\";\n\n// we can consistently and easily setup our graph instance using a single behavior\nconst graph = graphfi().using(CompanyDefault());\n</code></pre> <p>You can easily share your composed behaviors across your projects using library components in SPFx, a company CDN, or an npm package.</p> <p></p>"},{"location":"core/behaviors/#core-behaviors","title":"Core Behaviors","text":"<p>This section describes two behaviors provided by the <code>@pnp/core</code> library, AssignFrom and CopyFrom. Likely you won't often need them directly - they are used in some places internally - but they are made available should they prove useful.</p>"},{"location":"core/behaviors/#assignfrom","title":"AssignFrom","text":"<p>This behavior creates a ref to the supplied Timeline implementation's observers and resets the inheriting flag. This means that changes to the parent, here being the supplied Timeline, will begin affecting the target to which this behavior is applied.</p> <pre><code>import { spfi, SPBrowser } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport { AssignFrom } from \"@pnp/core\";\n// some local project file\nimport { MyCustomeBehavior } from \"./behaviors.ts\";\n\nconst source = spfi().using(SPBrowser());\n\nconst target = spfi().using(MyCustomeBehavior());\n\n// target will now hold a reference to the observers contained in source\n// changes to the subscribed observers in source will apply to target\n// anything that was added by \"MyCustomeBehavior\" will no longer be present\ntarget.using(AssignFrom(source.web));\n\n// you can always apply additional behaviors or register directly on the events\n// but once you modify target it will not longer ref source and changes to source will no longer apply\ntarget.using(SomeOtherBehavior());\ntarget.on.log(console.log);\n</code></pre>"},{"location":"core/behaviors/#copyfrom","title":"CopyFrom","text":"<p>Similar to AssignFrom, this method creates a copy of all the observers on the source and applies them to the target. This can be done either as a <code>replace</code> or <code>append</code> operation using the second parameter. The default is \"append\".</p> <ul> <li>\"replace\" will first clear each source moment's registered observers then apply each in source-order via the <code>on</code> operation.</li> <li>\"append\" will apply each source moment's registered observers in source-order via the <code>on</code> operation</li> </ul> <p>By design CopyFrom does NOT include moments defined by symbol keys.</p> <pre><code>import { spfi, SPBrowser } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport { CopyFrom } from \"@pnp/core\";\n// some local project file\nimport { MyCustomeBehavior } from \"./behaviors.ts\";\n\nconst source = spfi().using(SPBrowser());\n\nconst target = spfi().using(MyCustomeBehavior());\n\n// target will have the observers copied from source, but no reference to source. Changes to source's registered observers will not affect target.\n// any previously registered observers in target are maintained as the default behavior is to append\ntarget.using(CopyFrom(source.web));\n\n// target will have the observers copied from source, but no reference to source. Changes to source's registered observers will not affect target.\n// any previously registered observers in target are removed\ntarget.using(CopyFrom(source.web, \"replace\"));\n\n// you can always apply additional behaviors or register directly on the events\n// with CopyFrom no reference to source is maintained\ntarget.using(SomeOtherBehavior());\ntarget.on.log(console.log);\n</code></pre> <p>As well <code>CopyFrom</code> supports a filter parameter if you only want to copy the observers from a subset of moments. This filter is a predicate function taking a single string key and returning true if the observers from that moment should be copied to the target.</p> <pre><code>import { spfi, SPBrowser } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport { CopyFrom } from \"@pnp/core\";\n// some local project file\nimport { MyCustomeBehavior } from \"./behaviors.ts\";\n\nconst source = spfi().using(SPBrowser());\n\nconst target = spfi().using(MyCustomeBehavior());\n\n// target will have the observers copied from source, but no reference to source. Changes to source's registered observers will not affect target.\n// any previously registered observers in target are maintained as the default behavior is to append\ntarget.using(CopyFrom(source.web));\n\n// target will have the observers `auth` and `send` copied from source, but no reference to source. Changes to source's registered observers will not affect target.\n// any previously registered observers in target are removed\ntarget.using(CopyFrom(source.web, \"replace\", (k) =&gt; /(auth|send)/i.test(k)));\n\n// you can always apply additional behaviors or register directly on the events\n// with CopyFrom no reference to source is maintained\ntarget.using(SomeOtherBehavior());\ntarget.on.log(console.log);\n</code></pre>"},{"location":"core/moments/","title":"@pnp/core : moments","text":"<p>Moments are the name we use to describe the steps executed during a timeline lifecycle. They are defined on a plain object by a series of functions with the general form:</p> <pre><code>// the first argument is the set of observers subscribed to the given moment\n// the rest of the args vary by an interaction between moment and observer types and represent the args passed when emit is called for a given moment\nfunction (observers: any[], ...args: any[]): any;\n</code></pre> <p>Let's have a look at one of the included moment factory functions, which define how the moment interacts with its registered observers, and use it to understand a bit more on how things work. In this example we'll look at the broadcast moment, used to mimic a classic event where no return value is tracked, we just want to emit an event to all the subscribed observers.</p> <pre><code>// the broadcast factory function, returning the actual moment implementation function\n// The type T is used by the typings of Timeline to described the arguments passed in emit\nexport function broadcast&lt;T extends ObserverAction&gt;(): (observers: T[], ...args: any[]) =&gt; void {\n\n    // this is the actual moment implementation, called each time a given moment occurs in the timeline\n    return function (observers: T[], ...args: any[]): void {\n\n        // we make a local ref of the observers\n        const obs = [...observers];\n\n        // we loop through sending the args to each observer\n        for (let i = 0; i &lt; obs.length; i++) {\n\n            // note that within every moment and observer \"this\" will be the current timeline object\n            Reflect.apply(obs[i], this, args);\n        }\n    };\n}\n</code></pre> <p>Let's use <code>broadcast</code> in a couple examples to show how it works. You can also review the timeline article for a fuller example.</p> <pre><code>// our first type determines the type of the observers that will be regsitered to the moment \"first\"\ntype Broadcast1ObserverType = (this: Timeline&lt;any&gt;, message: string) =&gt; void;\n\n// our second type determines the type of the observers that will be regsitered to the moment \"second\"\ntype Broadcast2ObserverType = (this: Timeline&lt;any&gt;, value: number, value2: number) =&gt; void;\n\nconst moments = {\n    first: broadcast&lt;Broadcast1ObserverType&gt;(),\n    second: broadcast&lt;Broadcast2ObserverType&gt;(),\n} as const;\n</code></pre> <p>Now that we have defined two moments we can update our Timeline implementing class to emit each as we desire, as covered in the timeline article. Let's focus on the relationship between the moment definition and the typings inherited by <code>on</code> and <code>emit</code> in Timeline.</p> <p>Because we want observers of a given moment to understand what arguments they will get the typings of Timeline are setup to use the type defining the moment's observer across all operations. For example, using our moment \"first\" from above. Each moment can be subscribed by zero or more observers.</p> <pre><code>// our observer function matches the type of Broadcast1ObserverType and the intellisense will reflect that.\n// If you want to change the signature you need only do so in the type Broadcast1ObserverType and the change will update the on and emit typings as well\n// here we want to reference \"this\" inside our observer function (preferred)\nobj.on.first(function (this: Timeline&lt;any&gt;, message: string) {\n    // we use \"this\", which will be the current timeline and the default log method to emit a logging event\n    this.log(message, 0);\n});\n\n// we don't need to reference \"this\" so we use arrow notation\nobj.on.first((message: string) =&gt; {\n    console.log(message);\n});\n</code></pre> <p>Similarily for <code>second</code> our observers would match Broadcast2Observer.</p> <pre><code>obj.on.second(function (this: Timeline&lt;any&gt;, value: number, value2: number) {\n    // we use \"this\", which will be the current timeline and the default log method to emit a logging event\n    this.log(`got value1: ${value} value2: ${value2}`, 0);\n});\n\nobj.on.second((value: number, value2: number) =&gt; {\n    console.log(`got value1: ${value} value2: ${value2}`);\n});\n</code></pre>"},{"location":"core/moments/#existing-moment-factories","title":"Existing Moment Factories","text":"<p>You a already familiar with <code>broadcast</code> which passes the emited args to all subscribed observers, this section lists the existing built in moment factories:</p>"},{"location":"core/moments/#broadcast","title":"broadcast","text":"<p>Creates a moment that passes the emited args to all subscribed observers. Takes a single type parameter defining the observer signature and always returns void. Is not async.</p> <pre><code>import { broadcast } from \"@pnp/core\";\n\n// can have any method signature you want that returns void, \"this\" will always be set\ntype BroadcastObserver = (this: Timeline&lt;any&gt;, message: string) =&gt; void;\n\nconst moments = {\n    example: broadcast&lt;BroadcastObserver&gt;(),\n} as const;\n\nobj.on.example(function (this: Timeline&lt;any&gt;, message: string) {\n    this.log(message, 0);\n});\n\nobj.emit.example(\"Hello\");\n</code></pre>"},{"location":"core/moments/#asyncreduce","title":"asyncReduce","text":"<p>Creates a moment that executes each observer asynchronously, awaiting the result and passes the returned arguments as the arguments to the next observer. This is very much like the redux pattern taking the arguments as the state which each observer may modify then returning a new state.</p> <pre><code>import { asyncReduce } from \"@pnp/core\";\n\n// can have any method signature you want, so long as it is async and returns a tuple matching in order the arguments, \"this\" will always be set\ntype AsyncReduceObserver = (this: Timeline&lt;any&gt;, arg1: string, arg2: number) =&gt; Promise&lt;[string, number]&gt;;\n\nconst moments = {\n    example: asyncReduce&lt;AsyncReduceObserver&gt;(),\n} as const;\n\nobj.on.example(async function (this: Timeline&lt;any&gt;, arg1: string, arg2: number) {\n\n    this.log(message, 0);\n\n    // we can manipulate the values\n    arg2++;\n\n    // always return a tuple of the passed arguments, possibly modified\n    return [arg1, arg2];\n});\n\nobj.emit.example(\"Hello\", 42);\n</code></pre>"},{"location":"core/moments/#request","title":"request","text":"<p>Creates a moment where the first registered observer is used to asynchronously execute a request, returning a single result. If no result is returned (undefined) no further action is taken and the result will be undefined (i.e. additional observers are not used).</p> <p>This is used by us to execute web requets, but would also serve to represent any async request such as a database read, file read, or provisioning step.</p> <pre><code>import { request } from \"@pnp/core\";\n\n// can have any method signature you want, \"this\" will always be set\ntype RequestObserver = (this: Timeline&lt;any&gt;, arg1: string, arg2: number) =&gt; Promise&lt;string&gt;;\n\nconst moments = {\n    example: request&lt;RequestObserver&gt;(),\n} as const;\n\nobj.on.example(async function (this: Timeline&lt;any&gt;, arg1: string, arg2: number) {\n\n    this.log(`Sending request: ${arg1}`, 0);\n\n    // request expects a single value result\n    return `result value ${arg2}`;\n});\n\nobj.emit.example(\"Hello\", 42);\n</code></pre>"},{"location":"core/moments/#additional-examples","title":"Additional Examples","text":""},{"location":"core/moments/#waitall","title":"waitall","text":"<p>Perhaps you have a situation where you would like to wait until all of the subscribed observers for a given moment complete, but they can run async in parallel.</p> <pre><code>export function waitall&lt;T extends ObserverFunction&gt;(): (observers: T[], ...args: any[]) =&gt; Promise&lt;void&gt; {\n\n    // this is the actual moment implementation, called each time a given moment occurs in the timeline\n    return function (observers: T[], ...args: any[]): void {\n\n        // we make a local ref of the observers\n        const obs = [...observers];\n\n        const promises = [];\n\n        // we loop through sending the args to each observer\n        for (let i = 0; i &lt; obs.length; i++) {\n\n            // note that within every moment and observer \"this\" will be the current timeline object\n            promises.push(Reflect.apply(obs[i], this, args));\n        }\n\n        return Promise.all(promises).then(() =&gt; void(0));\n    };\n}\n</code></pre>"},{"location":"core/moments/#first","title":"first","text":"<p>Perhaps you would instead like to only get the result of the first observer to return.</p> <pre><code>export function first&lt;T extends ObserverFunction&gt;(): (observers: T[], ...args: any[]) =&gt; Promise&lt;any&gt; {\n\n    // this is the actual moment implementation, called each time a given moment occurs in the timeline\n    return function (observers: T[], ...args: any[]): void {\n\n        // we make a local ref of the observers\n        const obs = [...observers];\n\n        const promises = [];\n\n        // we loop through sending the args to each observer\n        for (let i = 0; i &lt; obs.length; i++) {\n\n            // note that within every moment and observer \"this\" will be the current timeline object\n            promises.push(Reflect.apply(obs[i], this, args));\n        }\n\n        return Promise.race(promises);\n    };\n}\n</code></pre>"},{"location":"core/observers/","title":"@pnp/core : observers","text":"<p>Observers are used to implement all of the functionality within a Timeline's moments. Each moment defines the signature of observers you can register, and calling the observers is orchestrated by the implementation of the moment. A few facts about observers:</p> <ul> <li>All observers are functions</li> <li>The \"this\" of an observer is always the Timeline implementation that emitted the moment</li> <li>Do not handle non-recoverable errors in observers, let them throw and they will be handled by the library appropriately and routed to the <code>error</code> moment.</li> </ul> <p>For details on implementing observers for Queryable, please see this article.</p>"},{"location":"core/observers/#observer-inheritance","title":"Observer Inheritance","text":"<p>Timelines created from other timelines (i.e. how sp and graph libraries work) inherit all of the observers from the parent. Observers added to the parent will apply for all children.</p> <p>When you make a change to the set of observers through any of the subscription methods outlined below that inheritance is broken. Meaning changes to the parent will no longer apply to that child, and changes to a child never affect a parent. This applies to ALL moments on change of ANY moment, there is no per-moment inheritance concept.</p> <pre><code>const sp = new spfi().using(...lots of behaviors);\n\n// web is current inheriting all observers from \"sp\"\nconst web = sp.web;\n\n// at this point web no longer inherits from \"sp\" and has its own observers\n// but still includes everything that was registered in sp before this call\nweb.on.log(...);\n\n// web2 inherits from sp as each invocation of .web creates a fresh IWeb instance\nconst web2 = sp.web;\n\n// list inherits from web's observers and will contain the extra `log` observer added above\nconst list = web.lists.getById(\"\");\n\n// this new behavior will apply to web2 and any subsequent objects created from sp\nsp.using(AnotherBehavior());\n\n// web will again inherit from sp through web2, the extra log handler is gone\n// list now ALSO is reinheriting from sp as it was pointing to web\nweb.using(AssignFrom(web2));\n// see below for more information on AssignFrom\n</code></pre>"},{"location":"core/observers/#obserever-subscriptions","title":"Obserever Subscriptions","text":"<p>All timeline moments are exposed through the <code>on</code> property with three options for subscription.</p>"},{"location":"core/observers/#append","title":"Append","text":"<p>This is the default, and adds your observer to the end of the array of subscribed observers.</p> <pre><code>obj.on.log(function(this: Queryable, message: string, level: number) {\n    if (level &gt; 1) {\n        console.log(message);\n    }\n});\n</code></pre>"},{"location":"core/observers/#prepend","title":"Prepend","text":"<p>Using prepend will place your observer as the first item in the array of subscribed observers. There is no gaurantee it will always remain first, other code can also use prepend.</p> <pre><code>obj.on.log.prepend(function(this: Queryable, message: string, level: number) {\n    if (level &gt; 1) {\n        console.log(message);\n    }\n});\n</code></pre>"},{"location":"core/observers/#replace","title":"Replace","text":"<p>Replace will remove all other subscribed observers from a moment and add the supplied observer as the only one in the array of subscribed observers.</p> <pre><code>obj.on.log.replace(function(this: Queryable, message: string, level: number) {\n    if (level &gt; 1) {\n        console.log(message);\n    }\n});\n</code></pre>"},{"location":"core/observers/#toarray","title":"ToArray","text":"<p>The ToArray method creates a cloned copy of the array of registered observers for a given moment. Note that because it is a clone changes to the returned array do not affect the registered observers.</p> <pre><code>const arr = obj.on.log.toArray();\n</code></pre>"},{"location":"core/observers/#clear","title":"Clear","text":"<p>This clears ALL observers for a given moment, returning true if any observers were removed, and false if no changes were made.</p> <pre><code>const didChange = obj.on.log.clear();\n</code></pre>"},{"location":"core/observers/#special-behaviors","title":"Special Behaviors","text":"<p>The core library includes two special behaviors used to help manage observer inheritance. The best case is to manage inheritance using the methods described above, but these provide quick shorthand to help in certain scenarios. These are AssignFrom and CopyFrom.</p>"},{"location":"core/storage/","title":"@pnp/core : storage","text":"<p>This module provides a thin wrapper over the browser local and session storage. If neither option is available it shims storage with a non-persistent in memory polyfill. Optionally through configuration you can activate expiration. Sample usage is shown below.</p>"},{"location":"core/storage/#pnpclientstorage","title":"PnPClientStorage","text":"<p>The main export of this module, contains properties representing local and session storage.</p> <pre><code>import { PnPClientStorage } from \"@pnp/core\";\n\nconst storage = new PnPClientStorage();\nconst myvalue = storage.local.get(\"mykey\");\n</code></pre>"},{"location":"core/storage/#pnpclientstoragewrapper","title":"PnPClientStorageWrapper","text":"<p>Each of the storage locations (session and local) are wrapped with this helper class. You can use it directly, but generally it would be used from an instance of PnPClientStorage as shown below. These examples all use local storage, the operations are identical for session storage.</p> <pre><code>import { PnPClientStorage } from \"@pnp/core\";\n\nconst storage = new PnPClientStorage();\n\n// get a value from storage\nconst value = storage.local.get(\"mykey\");\n\n// put a value into storage\nstorage.local.put(\"mykey2\", \"my value\");\n\n// put a value into storage with an expiration\nstorage.local.put(\"mykey2\", \"my value\", new Date());\n\n// put a simple object into storage\n// because JSON.stringify is used to package the object we do NOT do a deep rehydration of stored objects\nstorage.local.put(\"mykey3\", {\n    key: \"value\",\n    key2: \"value2\",\n});\n\n// remove a value from storage\nstorage.local.delete(\"mykey3\");\n\n// get an item or add it if it does not exist\n// returns a promise in case you need time to get the value for storage\n// optionally takes a third parameter specifying the expiration\nstorage.local.getOrPut(\"mykey4\", () =&gt; {\n    return Promise.resolve(\"value\");\n});\n\n// delete expired items\nstorage.local.deleteExpired();\n</code></pre>"},{"location":"core/storage/#cache-expiration","title":"Cache Expiration","text":"<p>The ability remove of expired items based on a configured timeout can help if the cache is filling up. This can be accomplished by explicitly calling the deleteExpired method on the cache you wish to clear. A suggested usage is to add this into your page init code as clearing expired items once per page load is likely sufficient.</p> <pre><code>import { PnPClientStorage } from \"@pnp/core\";\n\nconst storage = new PnPClientStorage();\n\n// session storage\nstorage.session.deleteExpired();\n\n// local storage\nstorage.local.deleteExpired();\n\n// this returns a promise, so you can perform some activity after the expired items are removed:\nstorage.local.deleteExpired().then(_ =&gt; {\n    // init my application\n});\n</code></pre> <p>In previous versions we included code to automatically remove expired items. Due to a lack of necessity we removed that, but you can recreate the concept as shown below:</p> <pre><code>function expirer(timeout = 3000) {\n\n    // session storage\n    storage.session.deleteExpired();\n\n    // local storage\n    storage.local.deleteExpired();\n\n    setTimeout(() =&gt; expirer(timeout), timeout);\n}\n</code></pre>"},{"location":"core/timeline/","title":"@pnp/core : timeline","text":"<p>Timeline provides base functionality for ochestrating async operations. A timeline defines a set of moments to which observers can be registered. Observers are functions that can act independently or together during a moment in the timeline. The model is event-like but each moment's implementation can be unique in how it interacts with the registered observers. Keep reading under Define Moments to understand more about what a moment is and how to create one.</p> <p></p> <p>The easiest way to understand Timeline is to walk through implementing a simple one below. You also review Queryable to see how we use Timeline internally to the library.</p>"},{"location":"core/timeline/#create-a-timeline","title":"Create a Timeline","text":"<p>Implementing a timeline involves several steps, each explained below.</p> <ol> <li>Define Moments</li> <li>Implement concrete Timeline class</li> </ol>"},{"location":"core/timeline/#define-moments","title":"Define Moments","text":"<p>A timeline is made up of a set of moments which are themselves defined by a plain object with one or more properties, each of which is a function. You can use predefined moments, or create your own to meet your exact requirements. Below we define two moments within the <code>MyMoments</code> object, first and second. These names are entirely your choice and the order moments are defined in the plain object carries no meaning.</p> <p>The <code>first</code> moment uses a pre-defined moment implementation <code>asyncReduce</code>. This moment allows you to define a state based on the arguments of the observer function, in this case <code>FirstObserver</code>. <code>asyncReduce</code> takes those arguments, does some processing, and returns a promise resolving an array matching the input arguments in order and type with optionally changed values. Those values become the arguments to the next observer registered to that moment.</p> <pre><code>import { asyncReduce, ObserverAction, Timeline } from \"@pnp/core\";\n\n// the first observer is a function taking a number and async returning a number in an array\n// all asyncReduce observers must follow this pattern of returning async a tuple matching the args\nexport type FirstObserver = (this: any, counter: number) =&gt; Promise&lt;[number]&gt;;\n\n// the second observer is a function taking a number and returning void\nexport type SecondObserver = (this: any, result: number) =&gt; void;\n\n// this is a custom moment definition as an example.\nexport function report&lt;T extends ObserverAction&gt;(): (observers: T[], ...args: any[]) =&gt; void {\n\n    return function (observers: T[], ...args: any[]): void {\n\n        const obs = [...observers];\n\n        // for this \n        if (obs.length &gt; 0) {\n             Reflect.apply(obs[0], this, args);\n        }\n    };\n}\n\n// this plain object defines the moments which will be available in our timeline\n// the property name \"first\" and \"second\" will be the moment names, used when we make calls such as instance.on.first and instance.on.second\nconst TestingMoments = {\n    first: asyncReduce&lt;FirstObserver&gt;(),\n    second: report&lt;SecondObserver&gt;(),\n} as const;\n// note as well the use of as const, this allows TypeScript to properly resolve all the complex typings and not treat the plain object as \"any\"\n</code></pre>"},{"location":"core/timeline/#subclass-timeline","title":"Subclass Timeline","text":"<p>After defining our moments we need to subclass Timeline to define how those moments emit through the lifecycle of the Timeline. Timeline has a single abstract method \"execute\" you must implement. You will also need to provide a way for callers to trigger the protected \"start\" method.</p> <pre><code>// our implementation of timeline, note we use `typeof TestingMoments` and ALSO pass the testing moments object to super() in the constructor\nclass TestTimeline extends Timeline&lt;typeof TestingMoments&gt; {\n\n    // we create two unique refs for our implementation we will use\n    // to resolve the execute promise\n    private InternalResolveEvent = Symbol.for(\"Resolve\");\n    private InternalRejectEvent = Symbol.for(\"Reject\");\n\n    constructor() {\n        // we need to pass the moments to the base Timeline\n        super(TestingMoments);\n    }\n\n    // we implement the execute the method to define when, in what order, and how our moments are called. This give you full control within the Timeline framework\n    // to determine your implementation's behavior\n    protected async execute(init?: any): Promise&lt;any&gt; {\n\n        // we can always emit log to any subscribers\n        this.log(\"Starting\", 0);\n\n        // set our timeline to start in the next tick\n        setTimeout(async () =&gt; {\n\n            try {\n\n                // we emit our \"first\" event\n                let [value] = await this.emit.first(init);\n\n                // we emit our \"second\" event\n                [value] = await this.emit.second(value);\n\n                // we reolve the execute promise with the final value\n                this.emit[this.InternalResolveEvent](value);\n\n            } catch (e) {\n\n                // we emit our reject event\n                this.emit[this.InternalRejectEvent](e);\n                // we emit error to any subscribed observers\n                this.error(e);\n            }\n        }, 0);\n\n        // return a promise which we will resolve/reject during the timeline lifecycle\n        return new Promise((resolve, reject) =&gt; {\n            this.on[this.InternalResolveEvent].replace(resolve);\n            this.on[this.InternalRejectEvent].replace(reject);\n        });\n    }\n\n    // provide a method to trigger our timeline, this could be protected or called directly by the user, your choice\n    public go(startValue = 0): Promise&lt;number&gt; {\n\n        // here we take a starting number\n        return this.start(startValue);\n    }\n}\n</code></pre>"},{"location":"core/timeline/#using-your-timeline","title":"Using your Timeline","text":"<pre><code>import { TestTimeline } from \"./file.js\";\n\nconst tl = new TestTimeline();\n\n// register observer\ntl.on.first(async (n) =&gt; [++n]);\n\n// register observer\ntl.on.second(async (n) =&gt; [++n]);\n\n// h === 2\nconst h = await tl.go(0);\n\n// h === 7\nconst h2 = await tl.go(5);\n</code></pre>"},{"location":"core/timeline/#understanding-the-timeline-lifecycle","title":"Understanding the Timeline Lifecycle","text":"<p>Now that you implemented a simple timeline let's take a minute to understand the lifecycle of a timeline execution. There are four moments always defined for every timeline: init, dispose, log, and error. Of these init and dispose are used within the lifecycle, while log and error are used as you need.</p>"},{"location":"core/timeline/#timeline-lifecycle","title":"Timeline Lifecycle","text":"<ul> <li>.on.init (always)</li> <li>your moments as defined in execute, in our example:</li> <li>.on.first</li> <li>.on.second</li> <li>.on.dispose (always)</li> </ul> <p>As well the moments log and error exist on every Timeline derived class and can occur at any point during the lifecycle.</p>"},{"location":"core/timeline/#observer-inheritance","title":"Observer Inheritance","text":"<p>Let's say that you want to contruct a system whereby you can create Timeline based instances from other Timeline based instances - which is what Queryable does. Imagine we have a class with a pseudo-signature like:</p> <pre><code>class ExampleTimeline extends Timeline&lt;typeof SomeMoments&gt; {\n\n    // we create two unique refs for our implementation we will use\n    // to resolve the execute promise\n    private InternalResolveEvent = Symbol.for(\"Resolve\");\n    private InternalRejectEvent = Symbol.for(\"Reject\");\n\n    constructor(base: ATimeline) {\n\n        // we need to pass the moments to the base Timeline\n        super(TestingMoments, base.observers);\n    }\n\n    //...\n}\n</code></pre> <p>We can then use it like:</p> <pre><code>const tl1 = new ExampleTimeline();\ntl1.on.first(async (n) =&gt; [++n]);\ntl1.on.second(async (n) =&gt; [++n]);\n\n// at this point tl2's observer collection is a pointer to the same collection as tl1\nconst tl2 = new ExampleTimeline(tl1);\n\n// we add a second observer to first, it is applied to BOTH tl1 and tl2\ntl1.on.first(async (n) =&gt; [++n]);\n\n// BUT when we modify tl2's observers, either by adding or clearing a moment it begins to track its own collection\ntl2.on.first(async (n) =&gt; [++n]);\n</code></pre>"},{"location":"core/util/","title":"@pnp/core : util","text":"<p>This module contains utility methods that you can import individually from the core library.</p>"},{"location":"core/util/#combine","title":"combine","text":"<p>Combines any number of paths, normalizing the slashes as required</p> <pre><code>import { combine } from \"@pnp/core\";\n\n// \"https://microsoft.com/something/more\"\nconst paths = combine(\"https://microsoft.com\", \"something\", \"more\");\n\n// \"also/works/with/relative\"\nconst paths2 = combine(\"/also/\", \"/works\", \"with/\", \"/relative\\\\\");\n</code></pre>"},{"location":"core/util/#dateadd","title":"dateAdd","text":"<p>Manipulates a date, please see the Stack Overflow discussion from which this method was taken.</p> <pre><code>import { dateAdd } from \"@pnp/core\";\n\nconst now = new Date();\n\nconst newData = dateAdd(now, \"minute\", 10);\n</code></pre>"},{"location":"core/util/#getguid","title":"getGUID","text":"<p>Creates a random guid, please see the Stack Overflow discussion from which this method was taken.</p> <pre><code>import { getGUID } from \"@pnp/core\";\n\nconst newGUID = getGUID();\n</code></pre>"},{"location":"core/util/#getrandomstring","title":"getRandomString","text":"<p>Gets a random string containing the number of characters specified.</p> <pre><code>import { getRandomString } from \"@pnp/core\";\n\nconst randomString = getRandomString(10);\n</code></pre>"},{"location":"core/util/#hop","title":"hOP","text":"<p>Shortcut for Object.hasOwnProperty. Determines if an object has a specified property.</p> <pre><code>import { HttpRequestError } from \"@pnp/queryable\";\nimport { hOP } from \"@pnp/core\";\n\nexport async function handleError(e: Error | HttpRequestError): Promise&lt;void&gt; {\n\n  //Checks to see if the error object has a property called isHttpRequestError. Returns a bool.\n  if (hOP(e, \"isHttpRequestError\")) {\n      // Handle this type or error\n  } else {\n    // not an HttpRequestError so we do something else\n\n  }\n}\n</code></pre>"},{"location":"core/util/#jss","title":"jsS","text":"<p>Shorthand for JSON.stringify</p> <pre><code>import { jsS } from \"@pnp/core\";\n\nconst s: string = jsS({ hello: \"world\" });\n</code></pre>"},{"location":"core/util/#isarray","title":"isArray","text":"<p>Determines if a supplied variable represents an array.</p> <pre><code>import { isArray } from \"@pnp/core\";\n\nconst x = [1, 2, 3];\n\nif (isArray(x)){\n    console.log(\"I am an array\");\n} else {\n    console.log(\"I am not an array\");\n}\n</code></pre>"},{"location":"core/util/#isfunc","title":"isFunc","text":"<p>Determines if a supplied variable represents a function.</p> <pre><code>import { isFunc } from \"@pnp/core\";\n\npublic testFunction() {\n    console.log(\"test function\");\n    return\n}\n\nif (isFunc(testFunction)){\n    console.log(\"this is a function\");\n    testFunction();\n}\n</code></pre>"},{"location":"core/util/#isurlabsolute","title":"isUrlAbsolute","text":"<p>Determines if a supplied url is absolute, returning true; otherwise returns false.</p> <pre><code>import { isUrlAbsolute } from \"@pnp/core\";\n\nconst webPath = 'https://{tenant}.sharepoint.com/sites/dev/';\n\nif (isUrlAbsolute(webPath)){\n    console.log(\"URL is absolute\");\n}else{\n    console.log(\"URL is not absolute\");\n}\n</code></pre>"},{"location":"core/util/#objectdefinednotnull","title":"objectDefinedNotNull","text":"<p>Determines if an object is defined and not null.</p> <pre><code>import { objectDefinedNotNull } from \"@pnp/core\";\n\nconst obj = {\n    prop: 1\n};\n\nif (objectDefinedNotNull(obj)){\n    console.log(\"Not null\");\n} else {\n    console.log(\"Null\");\n}\n</code></pre>"},{"location":"core/util/#stringisnullorempty","title":"stringIsNullOrEmpty","text":"<p>Determines if a supplied string is null or empty.</p> <pre><code>import { stringIsNullOrEmpty } from \"@pnp/core\";\n\nconst x: string = \"hello\";\n\nif (stringIsNullOrEmpty(x)){\n    console.log(\"Null or empty\");\n} else {\n    console.log(\"Not null or empty\");\n}\n</code></pre>"},{"location":"core/util/#gethashcode","title":"getHashCode","text":"<p>Gets a (mostly) unique hashcode for a specified string.</p> <p>Taken from: https://stackoverflow.com/questions/6122571/simple-non-secure-hash-function-for-javascript</p> <pre><code>import { getHashCode } from \"@pnp/core\";\n\nconst x: string = \"hello\";\n\nconst hash = getHashCode(x);\n</code></pre>"},{"location":"core/util/#delay","title":"delay","text":"<p>Provides an awaitable delay specified in milliseconds.</p> <pre><code>import { delay } from \"@pnp/core\";\n\n// wait 1 second\nawait delay(1000);\n\n// wait 10 second\nawait delay(10000);\n</code></pre>"},{"location":"graph/behaviors/","title":"@pnp/graph : behaviors","text":"<p>The article describes the behaviors exported by the <code>@pnp/graph</code> library. Please also see available behaviors in @pnp/core, @pnp/queryable, @pnp/sp, and @pnp/nodejs.</p>"},{"location":"graph/behaviors/#defaultinit","title":"DefaultInit","text":"<p>The <code>DefaultInit</code> behavior, itself a composed behavior includes Telemetry, RejectOnError, and ResolveOnData. Additionally, it sets the cache and credentials properties of the RequestInit and ensures the request url is absolute.</p> <pre><code>import { graphfi, DefaultInit } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\n\nconst graph = graphfi().using(DefaultInit());\n\nawait graph.users();\n</code></pre>"},{"location":"graph/behaviors/#defaultheaders","title":"DefaultHeaders","text":"<p>The <code>DefaultHeaders</code> behavior uses InjectHeaders to set the Content-Type header.</p> <pre><code>import { graphfi, DefaultHeaders } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\n\nconst graph = graphfi().using(DefaultHeaders());\n\nawait graph.users();\n</code></pre> <p>DefaultInit and DefaultHeaders are separated to make it easier to create your own default headers or init behavior. You should include both if composing your own default behavior.</p>"},{"location":"graph/behaviors/#paged","title":"Paged","text":"<p>Added in 3.4.0</p> <p>The Paged behavior allows you to access the information in a collection through a series of pages. While you can use it directly, you will likely use the <code>paged</code> method of the collections which handles things for you.</p> <p>Note that not all entity types support <code>count</code> and where it is unsupported it will return 0.</p> <p>Basic example, read all users:</p> <pre><code>import { graphfi, DefaultHeaders } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\n\nconst graph = graphfi().using(DefaultHeaders());\n\nconst allUsers = [];\nlet users = await graph.users.top(300).paged();\n\nallUsers.push(...users.value);\n\nwhile (users.hasNext) {\n  users = await users.next();\n  allUsers.push(...users.value);\n}\n\nconsole.log(`All users: ${JSON.stringify(allUsers)}`);\n</code></pre> <p>Beyond the basics other query operations are supported such as filter and select.</p> <pre><code>import { graphfi, DefaultHeaders } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\n\nconst graph = graphfi().using(DefaultHeaders());\n\nconst allUsers = [];\nlet users = await graph.users.top(50).select(\"userPrincipalName\", \"displayName\").filter(\"startswith(displayName, 'A')\").paged();\n\nallUsers.push(...users.value);\n\nwhile (users.hasNext) {\n  users = await users.next();\n  allUsers.push(...users.value);\n}\n\nconsole.log(`All users: ${JSON.stringify(allUsers)}`);\n</code></pre> <p>And similarly for groups, showing the same pattern for different types of collections</p> <pre><code>import { graphfi, DefaultHeaders } from \"@pnp/graph\";\nimport \"@pnp/graph/groups\";\n\nconst graph = graphfi().using(DefaultHeaders());\n\nconst allGroups = [];\nlet groups = await graph.groups.paged();\n\nallGroups.push(...groups.value);\n\nwhile (groups.hasNext) {\n  groups = await groups.next();\n  allGroups.push(...groups.value);\n}\n\nconsole.log(`All groups: ${JSON.stringify(allGroups)}`);\n</code></pre>"},{"location":"graph/behaviors/#endpoint","title":"Endpoint","text":"<p>This behavior is used to change the endpoint to which requests are made, either \"beta\" or \"v1.0\". This allows you to easily switch back and forth between the endpoints as needed.</p> <pre><code>import { graphfi, Endpoint } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\n\nconst beta = graphfi().using(Endpoint(\"beta\"));\n\nconst vOne = graphfi().using(Endpoint(\"v1.0\"));\n\nawait beta.users();\n\nawait vOne.users();\n</code></pre> <p>It can also be used at any point in the fluid chain to switch an isolated request to a different endpoint.</p> <pre><code>import { graphfi, Endpoint } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\n\n// will point to v1 by default\nconst graph = graphfi().using();\n\nconst user = graph.users.getById(\"{id}\");\n\n// this only applies to the \"user\" instance now\nconst userInfoFromBeta = user.using(Endpoint(\"beta\"))();\n</code></pre> <p>Finally, if you always want to make your requests to the beta end point (as an example) it is more efficient to set it in the graphfi factory.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\n\nconst beta = graphfi(\"https://graph.microsoft.com/beta\");\n</code></pre>"},{"location":"graph/behaviors/#graphbrowser","title":"GraphBrowser","text":"<p>A composed behavior suitable for use within a SPA or other scenario outside of SPFx. It includes DefaultHeaders, DefaultInit, BrowserFetchWithRetry, and DefaultParse. As well it adds a pre observer to try and ensure the request url is absolute if one is supplied in props.</p> <p>The baseUrl prop can be used to configure the graph endpoint to which requests will be sent.</p> <p>If you are building a SPA you likely need to handle authentication. For this we support the msal library which you can use directly or as a pattern to roll your own MSAL implementation behavior.</p> <pre><code>import { graphfi, GraphBrowser } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\n\nconst graph = graphfi().using(GraphBrowser());\n\nawait graph.users();\n</code></pre> <p>You can also set a baseUrl. This is equivelent to calling graphfi with an absolute url.</p> <pre><code>import { graphfi, GraphBrowser } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\n\nconst graph = graphfi().using(GraphBrowser({ baseUrl: \"https://graph.microsoft.com/v1.0\" }));\n\n// this is the same as the above, and maybe a litter easier to read, and is more efficient\n// const graph = graphfi(\"https://graph.microsoft.com/v1.0\").using(GraphBrowser());\n\nawait graph.users();\n</code></pre>"},{"location":"graph/behaviors/#spfx","title":"SPFx","text":"<p>This behavior is designed to work closely with SPFx. The only parameter is the current SPFx Context. <code>SPFx</code> is a composed behavior including DefaultHeaders, DefaultInit, BrowserFetchWithRetry, and DefaultParse. It also replaces any authentication present with a method to get a token from the SPFx aadTokenProviderFactory.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\n\n// this.context represents the context object within an SPFx webpart, application customizer, or ACE.\nconst graph = graphfi(...).using(SPFx(this.context));\n\nawait graph.users();\n</code></pre> <p>Note that both the sp and graph libraries export an SPFx behavior. They are unique to their respective libraries and cannot be shared, i.e. you can't use the graph SPFx to setup sp and vice-versa.</p> <pre><code>import { GraphFI, graphfi, SPFx as graphSPFx } from '@pnp/graph'\nimport { SPFI, spfi, SPFx as spSPFx } from '@pnp/sp'\n\nconst sp = spfi().using(spSPFx(this.context));\nconst graph = graphfi().using(graphSPFx(this.context));\n</code></pre> <p>If you want to use a different form of authentication you can apply that behavior after <code>SPFx</code> to override it. In this case we are using the client MSAL authentication.</p>"},{"location":"graph/behaviors/#spfxtoken","title":"SPFxToken","text":"<p>Added in 3.12</p> <p>Allows you to include the SharePoint Framework application token in requests. This behavior is include within the SPFx behavior, but is available separately should you wish to compose it into your own behaviors.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\n\n// this.context represents the context object within an SPFx webpart, application customizer, or ACE.\nconst graph = graphfi(...).using(SPFxToken(this.context));\n\nawait graph.users();\n</code></pre> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport { MSAL } from \"@pnp/msaljsclient\";\nimport \"@pnp/graph/users\";\n\n// this.context represents the context object within an SPFx webpart, application customizer, or ACE.\nconst graph = graphfi().using(SPFx(this.context), MSAL({ /* proper MSAL settings */}));\n\nawait graph.users();\n</code></pre>"},{"location":"graph/behaviors/#telemetry","title":"Telemetry","text":"<p>This behavior helps provide usage statistics to us about the number of requests made to the service using this library, as well as the methods being called. We do not, and cannot, access any PII information or tie requests to specific users. The data aggregates at the tenant level. We use this information to better understand how the library is being used and look for opportunities to improve high-use code paths.</p> <p>You can always opt out of the telemetry by creating your own default behaviors and leaving it out. However, we encourgage you to include it as it helps us understand usage and impact of the work.</p> <pre><code>import { graphfi, Telemetry } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\n\nconst graph = graphfi().using(Telemetry());\n\nawait graph.users();\n</code></pre>"},{"location":"graph/behaviors/#consistencylevel","title":"ConsistencyLevel","text":"<p>Using this behavior you can set the consistency level of your requests. You likely won't need to use this directly as we include it where needed.</p> <p>Basic usage:</p> <pre><code>import { graphfi, ConsistencyLevel } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\n\nconst graph = graphfi().using(ConsistencyLevel());\n\nawait graph.users();\n</code></pre> <p>If in the future there is another value other than \"eventual\" you can supply it to the behavior. For now only \"eventual\" is a valid value, which is the default, so you do not need to pass it as a param.</p> <pre><code>import { graphfi, ConsistencyLevel } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\n\nconst graph = graphfi().using(ConsistencyLevel(\"{level value}\"));\n\nawait graph.users();\n</code></pre>"},{"location":"graph/bookings/","title":"@pnp/graph/bookings","text":"<p>Represents the Bookings services available to a user.</p> <p>You can learn more  by reading the Official Microsoft Graph Documentation.</p>"},{"location":"graph/bookings/#ibookingcurrencies-ibookingcurrency-ibookingbusinesses-ibookingbusiness-ibookingappointments-ibookingappointment-ibookingcustomers-ibookingcustomer-ibookingservices-ibookingservice-ibookingstaffmembers-ibookingstaffmember-ibookingcustomquestions-ibookingcustomquestion","title":"IBookingCurrencies, IBookingCurrency, IBookingBusinesses, IBookingBusiness, IBookingAppointments, IBookingAppointment, IBookingCustomers, IBookingCustomer, IBookingServices, IBookingService, IBookingStaffMembers, IBookingStaffMember,  IBookingCustomQuestions, IBookingCustomQuestion","text":""},{"location":"graph/bookings/#get-booking-currencies","title":"Get Booking Currencies","text":"<p>Get the supported currencies</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/bookings\";\n\nconst graph = graphfi(...);\n\n// Get all the currencies\nconst currencies = await graph.bookingCurrencies();\n// get the details of the first currency\nconst currency = await graph.bookingCurrencies.getById(currencies[0].id)();\n</code></pre>"},{"location":"graph/bookings/#work-with-booking-businesses","title":"Work with Booking Businesses","text":"<p>Get the bookings businesses</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/bookings\";\n\nconst graph = graphfi(...);\n\n// Get all the businesses\nconst businesses = await graph.bookingBusinesses();\n// get the details of the first business\nconst business = graph.bookingBusinesses.getById(businesses[0].id)();\nconst businessDetails = await business();\n// get the business calendar\nconst calView = await business.calendarView(\"2022-06-01\", \"2022-08-01\")();\n// publish the business\nawait business.publish();\n// unpublish the business\nawait business.unpublish();\n</code></pre>"},{"location":"graph/bookings/#work-with-booking-services","title":"Work with Booking Services","text":"<p>Get the bookings business services</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/bookings\";\nimport { BookingService } from \"@microsoft/microsoft-graph-types\";\n\nconst graph = graphfi(...);\n\nconst business = graph.bookingBusinesses.getById({Booking Business Id})();\n// get the business services\nconst services = await business.services();\n// add a service\nconst newServiceDesc: BookingService = {booking service details -- see Microsoft Graph documentation};\nconst newService = services.add(newServiceDesc);\n// get service by id\nconst service = await business.services.getById({service id})();\n// update service\nconst updateServiceDesc: BookingService = {booking service details -- see Microsoft Graph documentation};\nconst update = await business.services.getById({service id}).update(updateServiceDesc);\n// delete service\nawait business.services.getById({service id}).delete();\n</code></pre>"},{"location":"graph/bookings/#work-with-booking-customers","title":"Work with Booking Customers","text":"<p>Get the bookings business customers</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/bookings\";\nimport { BookingCustomer } from \"@microsoft/microsoft-graph-types\";\n\nconst graph = graphfi(...);\n\nconst business = graph.bookingBusinesses.getById({Booking Business Id})();\n// get the business customers\nconst customers = await business.customers();\n// add a customer\nconst newCustomerDesc: BookingCustomer = {booking customer details -- see Microsoft Graph documentation};\nconst newCustomer = customers.add(newCustomerDesc);\n// get customer by id\nconst customer = await business.customers.getById({customer id})();\n// update customer\nconst updateCustomerDesc: BookingCustomer = {booking customer details -- see Microsoft Graph documentation};\nconst update = await business.customers.getById({customer id}).update(updateCustomerDesc);\n// delete customer\nawait business.customers.getById({customer id}).delete();\n</code></pre>"},{"location":"graph/bookings/#work-with-booking-staffmembers","title":"Work with Booking StaffMembers","text":"<p>Get the bookings business staffmembers</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/bookings\";\nimport { BookingStaffMember } from \"@microsoft/microsoft-graph-types\";\n\nconst graph = graphfi(...);\n\nconst business = graph.bookingBusinesses.getById({Booking Business Id})();\n// get the business staff members\nconst staffmembers = await business.staffMembers();\n// add a staff member\nconst newStaffMemberDesc: BookingStaffMember = {booking staff member details -- see Microsoft Graph documentation};\nconst newStaffMember = staffmembers.add(newStaffMemberDesc);\n// get staff member by id\nconst staffmember = await business.staffMembers.getById({staff member id})();\n// update staff member\nconst updateStaffMemberDesc: BookingStaffMember = {booking staff member details -- see Microsoft Graph documentation};\nconst update = await business.staffMembers.getById({staff member id}).update(updateStaffMemberDesc);\n// delete staffmember\nawait business.staffMembers.getById({staff member id}).delete();\n</code></pre>"},{"location":"graph/bookings/#work-with-booking-appointments","title":"Work with Booking Appointments","text":"<p>Get the bookings business appointments</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/bookings\";\nimport { BookingAppointment } from \"@microsoft/microsoft-graph-types\";\n\nconst graph = graphfi(...);\n\nconst business = graph.bookingBusinesses.getById({Booking Business Id})();\n// get the business appointments\nconst appointments = await business.appointments();\n// add a appointment\nconst newAppointmentDesc: BookingAppointment = {booking appointment details -- see Microsoft Graph documentation};\nconst newAppointment = appointments.add(newAppointmentDesc);\n// get appointment by id\nconst appointment = await business.appointments.getById({appointment id})();\n// cancel the appointment\nawait appointment.cancel();\n// update appointment\nconst updateAppointmentDesc: BookingAppointment = {booking appointment details -- see Microsoft Graph documentation};\nconst update = await business.appointments.getById({appointment id}).update(updateAppointmentDesc);\n// delete appointment\nawait business.appointments.getById({appointment id}).delete();\n</code></pre>"},{"location":"graph/bookings/#work-with-booking-custom-questions","title":"Work with Booking Custom Questions","text":"<p>Get the bookings business custom questions</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/bookings\";\nimport { BookingCustomQuestion } from \"@microsoft/microsoft-graph-types\";\n\nconst graph = graphfi(...);\n\nconst business = graph.bookingBusinesses.getById({Booking Business Id})();\n// get the business custom questions\nconst customQuestions = await business.customQuestions();\n// add a custom question\nconst newCustomQuestionDesc: BookingCustomQuestion = {booking custom question details -- see Microsoft Graph documentation};\nconst newCustomQuestion = customQuestions.add(newCustomQuestionDesc);\n// get custom question by id\nconst customquestion = await business.customQuestions.getById({customquestion id})();\n// update custom question\nconst updateCustomQuestionDesc: BookingCustomQuestion = {booking custom question details -- see Microsoft Graph documentation};\nconst update = await business.customQuestions.getById({custom question id}).update(updateCustomQuestionDesc);\n// delete custom question\nawait business.customQuestions.getById({customquestion id}).delete();\n</code></pre>"},{"location":"graph/calendars/","title":"@pnp/graph/calendars","text":"<p>More information can be found in the official Graph documentation:</p> <ul> <li>Calendar Resource Type</li> <li>Event Resource Type</li> </ul>"},{"location":"graph/calendars/#icalendar-icalendars","title":"ICalendar, ICalendars","text":""},{"location":"graph/calendars/#get-all-calendars-for-a-user","title":"Get All Calendars For a User","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport '@pnp/graph/calendars';\nimport '@pnp/graph/users';\n\nconst graph = graphfi(...);\n\nconst calendars = await graph.users.getById('user@tenant.onmicrosoft.com').calendars();\n\nconst myCalendars = await graph.me.calendars();\n\n</code></pre>"},{"location":"graph/calendars/#get-a-specific-calendar-for-a-user","title":"Get a Specific Calendar For a User","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport '@pnp/graph/calendars';\nimport '@pnp/graph/users';\n\nconst graph = graphfi(...);\n\nconst CALENDAR_ID = 'AQMkAGZjNmY0MDN3LRI3YTYtNDQAFWQtOWNhZC04MmY3MGYxODkeOWUARgAAA-xUBMMopY1NkrWA0qGcXHsHAG4I-wMXjoRMkgRnRetM5oIAAAIBBgAAAG4I-wMXjoRMkgRnRetM5oIAAAIsYgAAAA==';\n\nconst calendar = await graph.users.getById('user@tenant.onmicrosoft.com').calendars.getById(CALENDAR_ID)();\n\nconst myCalendar = await graph.me.calendars.getById(CALENDAR_ID)();\n</code></pre>"},{"location":"graph/calendars/#get-a-users-default-calendar","title":"Get a User's Default Calendar","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport '@pnp/graph/calendars';\nimport '@pnp/graph/users';\n\nconst graph = graphfi(...);\n\nconst calendar = await graph.users.getById('user@tenant.onmicrosoft.com').calendar();\n\nconst myCalendar = await graph.me.calendar();\n</code></pre>"},{"location":"graph/calendars/#get-events-for-a-users-default-calendar","title":"Get Events For a User's Default Calendar","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport '@pnp/graph/calendars';\nimport '@pnp/graph/users';\n\nconst graph = graphfi(...);\n\n// You can get the default calendar events\nconst events = await graph.users.getById('user@tenant.onmicrosoft.com').calendar.events();\n// or get all events for the user\nconst events = await graph.users.getById('user@tenant.onmicrosoft.com').events();\n\n// You can get my default calendar events\nconst events = await graph.me.calendar.events();\n// or get all events for me\nconst events = await graph.me.events();\n</code></pre>"},{"location":"graph/calendars/#get-events-by-id","title":"Get Events By ID","text":"<p>You can use .events.getByID to search through all the events in all calendars or narrow the request to a specific calendar.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport '@pnp/graph/calendars';\nimport '@pnp/graph/users';\n\nconst graph = graphfi(...);\n\nconst CalendarID = 'AQMkAGZjNmY0MDN3LRI3YTYtNDQAFWQtOWNhZC04MmY3MGYxODkeOWUARgAAA==';\n\nconst EventID = 'AQMkAGZjNmY0MDN3LRI3YTYtNDQAFWQtOWNhZC04MmY3MGYxODkeOWUARgAAA-xUBMMopY1NkrWA0qGcXHsHAG4I-wMXjoRMkgRnRetM5oIAAAIBBgAAAG4I-wMXjoRMkgRnRetM5oIAAAIsYgAAAA==';\n\n// Get events by ID\nconst event = await graph.users.getById('user@tenant.onmicrosoft.com').events.getByID(EventID);\n\nconst events = await graph.me.events.getByID(EventID);\n\n// Get an event by ID from a specific calendar\nconst event = await graph.users.getById('user@tenant.onmicrosoft.com').calendars.getByID(CalendarID).events.getByID(EventID);\n\nconst events = await graph.me.calendars.getByID(CalendarID).events.getByID(EventID);\n\n</code></pre>"},{"location":"graph/calendars/#create-events","title":"Create Events","text":"<p>This will work on any <code>IEvents</code> objects (e.g. anything accessed using an <code>events</code> key).</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport '@pnp/graph/calendars';\nimport '@pnp/graph/users';\n\nconst graph = graphfi(...);\n\nawait graph.users.getById('user@tenant.onmicrosoft.com').calendar.events.add(\n{\n  \"subject\": \"Let's go for lunch\",\n  \"body\": {\n    \"contentType\": \"HTML\",\n    \"content\": \"Does late morning work for you?\"\n  },\n  \"start\": {\n      \"dateTime\": \"2017-04-15T12:00:00\",\n      \"timeZone\": \"Pacific Standard Time\"\n  },\n  \"end\": {\n      \"dateTime\": \"2017-04-15T14:00:00\",\n      \"timeZone\": \"Pacific Standard Time\"\n  },\n  \"location\":{\n      \"displayName\":\"Harry's Bar\"\n  },\n  \"attendees\": [\n    {\n      \"emailAddress\": {\n        \"address\":\"samanthab@contoso.onmicrosoft.com\",\n        \"name\": \"Samantha Booth\"\n      },\n      \"type\": \"required\"\n    }\n  ]\n});\n</code></pre>"},{"location":"graph/calendars/#update-events","title":"Update Events","text":"<p>This will work on any <code>IEvents</code> objects (e.g. anything accessed using an <code>events</code> key).</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport '@pnp/graph/calendars';\nimport '@pnp/graph/users';\n\nconst graph = graphfi(...);\n\nconst EVENT_ID = 'BBMkAGZjNmY6MDM3LWI3YTYtNERhZC05Y2FkLTgyZjcwZjE4OTI5ZQBGAAAAAAD8VQTDKKWNTY61gNKhnFzLBwBuCP8DF46ETJIEZ0XrTOaCAAAAAAENAABuCP8DF46ETJFEZ0EnTOaCAAFvdoJvAAA=';\n\nawait graph.users.getById('user@tenant.onmicrosoft.com').calendar.events.getById(EVENT_ID).update({\n    reminderMinutesBeforeStart: 99,\n});\n</code></pre>"},{"location":"graph/calendars/#delete-event","title":"Delete Event","text":"<p>This will work on any <code>IEvents</code> objects (e.g. anything accessed using an <code>events</code> key).</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport '@pnp/graph/calendars';\nimport '@pnp/graph/users';\n\nconst graph = graphfi(...);\n\nconst EVENT_ID = 'BBMkAGZjNmY6MDM3LWI3YTYtNERhZC05Y2FkLTgyZjcwZjE4OTI5ZQBGAAAAAAD8VQTDKKWNTY61gNKhnFzLBwBuCP8DF46ETJIEZ0XrTOaCAAAAAAENAABuCP8DF46ETJFEZ0EnTOaCAAFvdoJvAAA=';\n\nawait graph.users.getById('user@tenant.onmicrosoft.com').events.getById(EVENT_ID).delete();\n\nawait graph.me.events.getById(EVENT_ID).delete();\n</code></pre>"},{"location":"graph/calendars/#get-schedules","title":"Get Schedules","text":"<p>Get the free/busy availability information for a collection of users, distributions lists, or resources (rooms or equipment) for a specified time period.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport '@pnp/graph/calendars';\nimport '@pnp/graph/users';\n\nconst graph = graphfi(...);\n\nawait graph.users.getById('user@tenant.onmicrosoft.com').calendar.schedule.get(\n{\n  \"startTime\": {\n      \"dateTime\": \"2017-04-15T12:00:00\",\n      \"timeZone\": \"Pacific Standard Time\"\n  },\n  \"endTime\": {\n      \"dateTime\": \"2017-04-15T14:00:00\",\n      \"timeZone\": \"Pacific Standard Time\"\n  },\n  \"schedules\": [\n      \"user@tenant.onmicrosoft.com\"\n  ],\n  \"availabilityViewInterval\": 30\n});\n</code></pre>"},{"location":"graph/calendars/#get-calendar-for-a-group","title":"Get Calendar for a Group","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport '@pnp/graph/calendars';\nimport '@pnp/graph/groups';\n\nconst graph = graph.using(SPFx(this.context));\n\nconst calendar = await graph.groups.getById('21aaf779-f6d8-40bd-88c2-4a03f456ee82').calendar();\n</code></pre>"},{"location":"graph/calendars/#get-events-for-a-group","title":"Get Events for a Group","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport '@pnp/graph/calendars';\nimport '@pnp/graph/groups';\n\nconst graph = graphfi(...);\n\n// You can do one of\nconst events = await graph.groups.getById('21aaf779-f6d8-40bd-88c2-4a03f456ee82').calendar.events();\n// or\nconst events = await graph.groups.getById('21aaf779-f6d8-40bd-88c2-4a03f456ee82').events();\n</code></pre>"},{"location":"graph/calendars/#get-calendar-view","title":"Get Calendar View","text":"<p>Gets the events in a calendar during a specified date range.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport '@pnp/graph/calendars';\nimport '@pnp/graph/users';\n\nconst graph = graphfi(...);\n\n// basic request, note need to invoke the returned queryable\nconst view = await graph.users.getById('user@tenant.onmicrosoft.com').calendarView(\"2020-01-01\", \"2020-03-01\")();\n\n// you can use select, top, etc to filter your returned results\nconst view2 = await graph.users.getById('user@tenant.onmicrosoft.com').calendarView(\"2020-01-01\", \"2020-03-01\").select(\"subject\").top(3)();\n\n// you can specify times along with the dates\nconst view3 = await graph.users.getById('user@tenant.onmicrosoft.com').calendarView(\"2020-01-01T19:00:00-08:00\", \"2020-03-01T19:00:00-08:00\")();\n\nconst view4 = await graph.me.calendarView(\"2020-01-01\", \"2020-03-01\")();\n</code></pre>"},{"location":"graph/calendars/#find-rooms","title":"Find Rooms","text":"<p>Gets the <code>emailAddress</code> objects that represent all the meeting rooms in the user's tenant or in a specific room list.</p> <p></p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport '@pnp/graph/calendars';\nimport '@pnp/graph/users';\n\nconst graph = graphfi(...);\n// basic request, note need to invoke the returned queryable\nconst rooms1 = await graph.users.getById('user@tenant.onmicrosoft.com').findRooms()();\n// you can pass a room list to filter results\nconst rooms2 = await graph.users.getById('user@tenant.onmicrosoft.com').findRooms('roomlist@tenant.onmicrosoft.com')();\n// you can use select, top, etc to filter your returned results\nconst rooms3 = await graph.users.getById('user@tenant.onmicrosoft.com').findRooms().select('name').top(10)();\n</code></pre>"},{"location":"graph/calendars/#get-event-instances","title":"Get Event Instances","text":"<p>Get the instances (occurrences) of an event for a specified time range.</p> <p>If the event is a <code>seriesMaster</code> type, this returns the occurrences and exceptions of the event in the specified time range.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport '@pnp/graph/calendars';\nimport '@pnp/graph/users';\n\nconst graph = graphfi(...);\nconst event = graph.me.events.getById('');\n// basic request, note need to invoke the returned queryable\nconst instances = await event.instances(\"2020-01-01\", \"2020-03-01\")();\n// you can use select, top, etc to filter your returned results\nconst instances2 = await event.instances(\"2020-01-01\", \"2020-03-01\").select(\"subject\").top(3)();\n// you can specify times along with the dates\nconst instance3 = await event.instances(\"2020-01-01T19:00:00-08:00\", \"2020-03-01T19:00:00-08:00\")(); \n</code></pre>"},{"location":"graph/cloud-communications/","title":"@pnp/graph/cloud-communications","text":"<p>The ability to retrieve information about a user's presence, including their availability and user activity.</p> <p>More information can be found in the official Graph documentation:</p> <ul> <li>Presence Type</li> </ul>"},{"location":"graph/cloud-communications/#ipresence","title":"IPresence","text":""},{"location":"graph/cloud-communications/#get-users-presence","title":"Get users presence","text":"<p>Gets a list of all the contacts for the user.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/cloud-communications\";\n\nconst graph = graphfi(...);\n\nconst presenceMe = await graph.me.presence();\n\nconst presenceThem = await graph.users.getById(\"99999999-9999-9999-9999-999999999999\").presence();\n\n</code></pre>"},{"location":"graph/cloud-communications/#get-presence-for-multiple-users","title":"Get presence for multiple users","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/cloud-communications\";\n\nconst graph = graphfi(...);\n\nconst presenceList = await graph.communications.getPresencesByUserId([\"99999999-9999-9999-9999-999999999999\"]);\n\n</code></pre>"},{"location":"graph/columns/","title":"Graph Columns","text":"<p>More information can be found in the official Graph documentation:</p> <ul> <li>Columns Resource Type</li> <li>List Resource Type</li> <li>Content Type Resource Type</li> </ul> <p> </p>"},{"location":"graph/columns/#get-columns","title":"Get Columns","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/sites\";\nimport \"@pnp/graph/columns\";\n//Needed for lists\nimport \"@pnp/graph/lists\";\n//Needed for content types\nimport \"@pnp/graph/content-types\";\n\nconst graph = graphfi(...);\n\nconst siteColumns = await graph.site.getById(\"{site identifier}\").columns();\nconst listColumns = await graph.site.getById(\"{site identifier}\").lists.getById(\"{list identifier}\").columns();\nconst contentTypeColumns = await graph.site.getById(\"{site identifier}\").contentTypes.getById(\"{content type identifier}\").columns();\n</code></pre>"},{"location":"graph/columns/#get-columns-by-id","title":"Get Columns by Id","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/sites\";\nimport \"@pnp/graph/columns\";\n//Needed for lists\nimport \"@pnp/graph/lists\";\n//Needed for content types\nimport \"@pnp/graph/content-types\";\n\nconst graph = graphfi(...);\n\nconst siteColumn = await graph.site.getById(\"{site identifier}\").columns.getById(\"{column identifier}\")();\nconst listColumn = await graph.site.getById(\"{site identifier}\").lists.getById(\"{list identifier}\").columns.getById(\"{column identifier}\")();\nconst contentTypeColumn = await graph.site.getById(\"{site identifier}\").contentTypes.getById(\"{content type identifier}\").columns.getById(\"{column identifier}\")();\n</code></pre>"},{"location":"graph/columns/#add-a-columns-sites-and-list","title":"Add a Columns (Sites and List)","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/sites\";\nimport \"@pnp/graph/columns\";\n//Needed for lists\nimport \"@pnp/graph/lists\";\n\nconst graph = graphfi(...);\n\nconst sampleColumn: ColumnDefinition = {\n    description: \"PnPTestColumn Description\",\n    enforceUniqueValues: false,\n    hidden: false,\n    indexed: false,\n    name: \"PnPTestColumn\",\n    displayName: \"PnPTestColumn\",\n    text: {\n        allowMultipleLines: false,\n        appendChangesToExistingText: false,\n        linesForEditing: 0,\n        maxLength: 255,\n    },\n};\n\nconst siteColumn = await graph.site.getById(\"{site identifier}\").columns.add(sampleColumn);\nconst listColumn = await graph.site.getById(\"{site identifier}\").lists.getById(\"{list identifier}\").columns.add(sampleColumn);\n</code></pre>"},{"location":"graph/columns/#add-a-column-reference-content-types","title":"Add a Column Reference (Content Types)","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/sites\";\nimport \"@pnp/graph/columns\";\n//Needed for content types\nimport \"@pnp/graph/content-ypes\";\n\nconst graph = graphfi(...);\n\nconst siteColumn = await graph.site.getById(\"{site identifier}\").columns.getById(\"{column identifier}\")();\nconst contentTypeColumn = await graph.site.getById(\"{site identifier}\").contentTypes.getById(\"{content type identifier}\").columns.addRef(siteColumn);\n</code></pre>"},{"location":"graph/columns/#update-a-column-sites-and-list","title":"Update a Column (Sites and List)","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/sites\";\nimport \"@pnp/graph/columns\";\n//Needed for lists\nimport \"@pnp/graph/lists\";\n\nconst graph = graphfi(...);\n\nconst site = graph.site.getById(\"{site identifier}\");\nconst updatedSiteColumn = await site.columns.getById(\"{column identifier}\").update({ displayName: \"New Name\" });\nconst updateListColumn = await site.lists.getById(\"{list identifier}\").columns.getById(\"{column identifier}\").update({ displayName: \"New Name\" });\n</code></pre>"},{"location":"graph/columns/#delete-a-column","title":"Delete a Column","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/sites\";\nimport \"@pnp/graph/columns\";\n//Needed for lists\nimport \"@pnp/graph/lists\";\n//Needed for content types\nimport \"@pnp/graph/content-types\";\n\nconst graph = graphfi(...);\n\nconst site = graph.site.getById(\"{site identifier}\");\nconst siteColumn = await site.columns.getById(\"{column identifier}\").delete();\nconst listColumn = await site.lists.getById(\"{list identifier}\").columns.getById(\"{column identifier}\").delete();\nconst contentTypeColumn = await site.contentTypes.getById(\"{content type identifier}\").columns.getById(\"{column identifier}\").delete();\n</code></pre>"},{"location":"graph/contacts/","title":"@pnp/graph/contacts","text":"<p>The ability to manage contacts and folders in Outlook is a capability introduced in version 1.2.2 of @pnp/graphfi(). Through the methods described you can add and edit both contacts and folders in a users Outlook.</p> <p>More information can be found in the official Graph documentation:</p> <ul> <li>Contact Resource Type</li> </ul>"},{"location":"graph/contacts/#icontact-icontacts-icontactfolder-icontactfolders","title":"IContact, IContacts, IContactFolder, IContactFolders","text":""},{"location":"graph/contacts/#set-up-notes","title":"Set up notes","text":"<p>To make user calls you can use getById where the id is the users email address. Contact ID, Folder ID, and Parent Folder ID use the following format \"AAMkADY1OTQ5MTM0LTU2OTktNDI0Yy1iODFjLWNiY2RmMzNjODUxYwBGAAAAAAC75QV12PBiRIjb8MNVIrJrBwBgs0NT6NreR57m1u_D8SpPAAAAAAEOAABgs0NT6NreR57m1u_D8SpPAAFCCnApAAA=\"</p>"},{"location":"graph/contacts/#get-all-of-the-contacts","title":"Get all of the Contacts","text":"<p>Gets a list of all the contacts for the user.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\"\nimport \"@pnp/graph/contacts\"\n\nconst graph = graphfi(...);\n\nconst contacts = await graph.users.getById('user@tenant.onmicrosoft.com').contacts();\n\nconst contacts2 = await graph.me.contacts();\n\n</code></pre>"},{"location":"graph/contacts/#get-contact-by-id","title":"Get Contact by Id","text":"<p>Gets a specific contact by ID for the user.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/contacts\";\n\nconst graph = graphfi(...);\n\nconst contactID = \"AAMkADY1OTQ5MTM0LTU2OTktNDI0Yy1iODFjLWNiY2RmMzNjODUxYwBGAAAAAAC75QV12PBiRIjb8MNVIrJrBwBgs0NT6NreR57m1u_D8SpPAAAAAAEOAABgs0NT6NreR57m1u_D8SpPAAFCCnApAAA=\";\n\nconst contact = await graph.users.getById('user@tenant.onmicrosoft.com').contacts.getById(contactID)();\n\nconst contact2 = await graph.me.contacts.getById(contactID)();\n\n</code></pre>"},{"location":"graph/contacts/#add-a-new-contact","title":"Add a new Contact","text":"<p>Adds a new contact for the user.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport { EmailAddress } from \"@microsoft/microsoft-graph-types\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/contacts\";\n\nconst graph = graphfi(...);\n\nconst addedContact = await graph.users.getById('user@tenant.onmicrosoft.com').contacts.add('Pavel', 'Bansky', [&lt;EmailAddress&gt;{address: 'pavelb@fabrikam.onmicrosoft.com', name: 'Pavel Bansky' }], ['+1 732 555 0102']);\n\nconst addedContact2 = await graph.me.contacts.add('Pavel', 'Bansky', [&lt;EmailAddress&gt;{address: 'pavelb@fabrikam.onmicrosoft.com', name: 'Pavel Bansky' }], ['+1 732 555 0102']);\n\n</code></pre>"},{"location":"graph/contacts/#update-a-contact","title":"Update a Contact","text":"<p>Updates a specific contact by ID for teh designated user</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/contacts\";\n\nconst graph = graphfi(...);\n\nconst contactID = \"AAMkADY1OTQ5MTM0LTU2OTktNDI0Yy1iODFjLWNiY2RmMzNjODUxYwBGAAAAAAC75QV12PBiRIjb8MNVIrJrBwBgs0NT6NreR57m1u_D8SpPAAAAAAEOAABgs0NT6NreR57m1u_D8SpPAAFCCnApAAA=\";\n\nconst updContact = await graph.users.getById('user@tenant.onmicrosoft.com').contacts.getById(contactID).update({birthday: \"1986-05-30\" });\n\nconst updContact2 = await graph.me.contacts.getById(contactID).update({birthday: \"1986-05-30\" });\n\n</code></pre>"},{"location":"graph/contacts/#delete-a-contact","title":"Delete a Contact","text":"<p>Delete a contact from the list of contacts for a user.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/contacts\";\n\nconst graph = graphfi(...);\n\nconst contactID = \"AAMkADY1OTQ5MTM0LTU2OTktNDI0Yy1iODFjLWNiY2RmMzNjODUxYwBGAAAAAAC75QV12PBiRIjb8MNVIrJrBwBgs0NT6NreR57m1u_D8SpPAAAAAAEOAABgs0NT6NreR57m1u_D8SpPAAFCCnApAAA=\";\n\nconst delContact = await graph.users.getById('user@tenant.onmicrosoft.com').contacts.getById(contactID).delete();\n\nconst delContact2 = await graph.me.contacts.getById(contactID).delete();\n\n</code></pre>"},{"location":"graph/contacts/#get-all-of-the-contact-folders","title":"Get all of the Contact Folders","text":"<p>Get all the folders for the designated user's contacts</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/contacts\";\n\nconst graph = graphfi(...);\n\nconst contactFolders = await graph.users.getById('user@tenant.onmicrosoft.com').contactFolders();\n\nconst contactFolders2 = await graph.me.contactFolders();\n\n</code></pre>"},{"location":"graph/contacts/#get-contact-folder-by-id","title":"Get Contact Folder by Id","text":"<p>Get a contact folder by ID for the specified user</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/contacts\";\n\nconst graph = graphfi(...);\n\nconst folderID = \"AAMkADY1OTQ5MTM0LTU2OTktNDI0Yy1iODFjLWNiY2RmMzNjODUxYwAuAAAAAAC75QV12PBiRIjb8MNVIrJrAQBgs0NT6NreR57m1u_D8SpPAAFCCqH9AAA=\";\n\nconst contactFolder = await graph.users.getById('user@tenant.onmicrosoft.com').contactFolders.getById(folderID)();\n\nconst contactFolder2 = await graph.me.contactFolders.getById(folderID)();\n\n</code></pre>"},{"location":"graph/contacts/#add-a-new-contact-folder","title":"Add a new Contact Folder","text":"<p>Add a new folder in the users contacts</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/contacts\";\n\nconst graph = graphfi(...);\n\nconst parentFolderID = \"AAMkADY1OTQ5MTM0LTU2OTktNDI0Yy1iODFjLWNiY2RmMzNjODUxYwAuAAAAAAC75QV12PBiRIjb8MNVIrJrAQBgs0NT6NreR57m1u_D8SpPAAAAAAEOAAA=\";\n\nconst addedContactFolder = await graph.users.getById('user@tenant.onmicrosoft.com').contactFolders.add(\"New Folder\", parentFolderID);\n\nconst addedContactFolder2 = await graph.me.contactFolders.add(\"New Folder\", parentFolderID);\n\n</code></pre>"},{"location":"graph/contacts/#update-a-contact-folder","title":"Update a Contact Folder","text":"<p>Update an existing folder in the users contacts</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/contacts\";\n\nconst graph = graphfi(...);\n\nconst folderID = \"AAMkADY1OTQ5MTM0LTU2OTktNDI0Yy1iODFjLWNiY2RmMzNjODUxYwAuAAAAAAC75QV12PBiRIjb8MNVIrJrAQBgs0NT6NreR57m1u_D8SpPAAFCCqH9AAA=\";\n\nconst updContactFolder = await graph.users.getById('user@tenant.onmicrosoft.com').contactFolders.getById(folderID).update({displayName: \"Updated Folder\" });\n\nconst updContactFolder2 = await graph.me.contactFolders.getById(folderID).update({displayName: \"Updated Folder\" });\n\n</code></pre>"},{"location":"graph/contacts/#delete-a-contact-folder","title":"Delete a Contact Folder","text":"<p>Delete a folder from the users contacts list. Deleting a folder deletes the contacts in that folder.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/contacts\";\n\nconst graph = graphfi(...);\n\nconst folderID = \"AAMkADY1OTQ5MTM0LTU2OTktNDI0Yy1iODFjLWNiY2RmMzNjODUxYwAuAAAAAAC75QV12PBiRIjb8MNVIrJrAQBgs0NT6NreR57m1u_D8SpPAAFCCqH9AAA=\";\n\nconst delContactFolder = await graph.users.getById('user@tenant.onmicrosoft.com').contactFolders.getById(folderID).delete();\n\nconst delContactFolder2 = await graph.me.contactFolders.getById(folderID).delete();\n\n</code></pre>"},{"location":"graph/contacts/#get-all-of-the-contacts-from-the-contact-folder","title":"Get all of the Contacts from the Contact Folder","text":"<p>Get all the contacts in a folder</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/contacts\";\n\nconst graph = graphfi(...);\n\nconst folderID = \"AAMkADY1OTQ5MTM0LTU2OTktNDI0Yy1iODFjLWNiY2RmMzNjODUxYwAuAAAAAAC75QV12PBiRIjb8MNVIrJrAQBgs0NT6NreR57m1u_D8SpPAAFCCqH9AAA=\";\n\nconst contactsInContactFolder = await graph.users.getById('user@tenant.onmicrosoft.com').contactFolders.getById(folderID).contacts();\n\nconst contactsInContactFolder2 = await graph.me.contactFolders.getById(folderID).contacts();\n\n</code></pre>"},{"location":"graph/contacts/#get-child-folders-of-the-contact-folder","title":"Get Child Folders of the Contact Folder","text":"<p>Get child folders from contact folder</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/contacts\";\n\nconst graph = graphfi(...);\n\nconst folderID = \"AAMkADY1OTQ5MTM0LTU2OTktNDI0Yy1iODFjLWNiY2RmMzNjODUxYwAuAAAAAAC75QV12PBiRIjb8MNVIrJrAQBgs0NT6NreR57m1u_D8SpPAAFCCqH9AAA=\";\n\nconst childFolders = await graph.users.getById('user@tenant.onmicrosoft.com').contactFolders.getById(folderID).childFolders();\n\nconst childFolders2 = await graph.me.contactFolders.getById(folderID).childFolders();\n\n</code></pre>"},{"location":"graph/contacts/#add-a-new-child-folder","title":"Add a new Child Folder","text":"<p>Add a new child folder to a contact folder</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/contacts\";\n\nconst graph = graphfi(...);\n\nconst folderID = \"AAMkADY1OTQ5MTM0LTU2OTktNDI0Yy1iODFjLWNiY2RmMzNjODUxYwAuAAAAAAC75QV12PBiRIjb8MNVIrJrAQBgs0NT6NreR57m1u_D8SpPAAFCCqH9AAA=\";\n\nconst addedChildFolder = await graph.users.getById('user@tenant.onmicrosoft.com').contactFolders.getById(folderID).childFolders.add(\"Sub Folder\", folderID);\n\nconst addedChildFolder2 = await graph.me.contactFolders.getById(folderID).childFolders.add(\"Sub Folder\", folderID);\n</code></pre>"},{"location":"graph/contacts/#get-child-folder-by-id","title":"Get Child Folder by Id","text":"<p>Get child folder by ID from user contacts</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/contacts\";\n\nconst graph = graphfi(...);\n\nconst folderID = \"AAMkADY1OTQ5MTM0LTU2OTktNDI0Yy1iODFjLWNiY2RmMzNjODUxYwAuAAAAAAC75QV12PBiRIjb8MNVIrJrAQBgs0NT6NreR57m1u_D8SpPAAFCCqH9AAA=\";\nconst subFolderID = \"AAMkADY1OTQ5MTM0LTU2OTktNDI0Yy1iODFjLWNiY2RmMzNjODUxYwAuAAAAAAC75QV12PBiRIjb8MNVIrJrAQBgs0NT6NreR57m1u_D8SpPAAFCCqIZAAA=\";\n\nconst childFolder = await graph.users.getById('user@tenant.onmicrosoft.com').contactFolders.getById(folderID).childFolders.getById(subFolderID)();\n\nconst childFolder2 = await graph.me.contactFolders.getById(folderID).childFolders.getById(subFolderID)();\n</code></pre>"},{"location":"graph/contacts/#add-contact-in-child-folder-of-contact-folder","title":"Add Contact in Child Folder of Contact Folder","text":"<p>Add a new contact to a child folder</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport { EmailAddress } from \"./@microsoft/microsoft-graph-types\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/contacts\";\n\nconst graph = graphfi(...);\n\nconst folderID = \"AAMkADY1OTQ5MTM0LTU2OTktNDI0Yy1iODFjLWNiY2RmMzNjODUxYwAuAAAAAAC75QV12PBiRIjb8MNVIrJrAQBgs0NT6NreR57m1u_D8SpPAAFCCqH9AAA=\";\nconst subFolderID = \"AAMkADY1OTQ5MTM0LTU2OTktNDI0Yy1iODFjLWNiY2RmMzNjODUxYwAuAAAAAAC75QV12PBiRIjb8MNVIrJrAQBgs0NT6NreR57m1u_D8SpPAAFCCqIZAAA=\";\n\nconst addedContact = await graph.users.getById('user@tenant.onmicrosoft.com').contactFolders.getById(folderID).childFolders.getById(subFolderID).contacts.add('Pavel', 'Bansky', [&lt;EmailAddress&gt;{address: 'pavelb@fabrikam.onmicrosoft.com', name: 'Pavel Bansky' }], ['+1 732 555 0102']);\n\nconst addedContact2 = await graph.me.contactFolders.getById(folderID).childFolders.getById(subFolderID).contacts.add('Pavel', 'Bansky', [&lt;EmailAddress&gt;{address: 'pavelb@fabrikam.onmicrosoft.com', name: 'Pavel Bansky' }], ['+1 732 555 0102']);\n\n</code></pre>"},{"location":"graph/content-types/","title":"Graph Content Types","text":"<p>More information can be found in the official Graph documentation:</p> <ul> <li>Columns Resource Type</li> <li>List Resource Type</li> <li>Content Type Resource Type</li> </ul> <p> </p>"},{"location":"graph/content-types/#get-content-types","title":"Get Content Types","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/sites\";\nimport \"@pnp/graph/content-types\";\n//Needed for lists\nimport \"@pnp/graph/lists\";\n\nconst graph = graphfi(...);\n\nconst siteContentTypes = await graph.site.getById(\"{site identifier}\").contentTypes();\nconst listContentTypes = await graph.site.getById(\"{site identifier}\").lists.getById(\"{list identifier}\").contentTypes();\n</code></pre>"},{"location":"graph/content-types/#get-content-types-by-id","title":"Get Content Types by Id","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/sites\";\nimport \"@pnp/graph/content-types\";\n//Needed for lists\nimport \"@pnp/graph/lists\";\n\nconst graph = graphfi(...);\n\nconst siteContentType = await graph.site.getById(\"{site identifier}\").contentTypes.getById(\"{content type identifier}\")();\nconst listContentType = await graph.site.getById(\"{site identifier}\").lists.getById(\"{list identifier}\").contentTypes.getById(\"{content type identifier}\")();\n</code></pre>"},{"location":"graph/content-types/#add-a-content-type-site","title":"Add a Content Type (Site)","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/sites\";\nimport \"@pnp/graph/content-types\";\n\nconst graph = graphfi(...);\n\nconst sampleContentType: ContentType = {\n    name: \"PnPTestContentType\",\n    description: \"PnPTestContentType Description\",\n    base: {\n        name: \"Item\",\n        id: \"0x01\",\n    },\n    group: \"PnPTest Content Types\",\n    id: \"0x0100CDB27E23CEF44850904C80BD666FA645\",\n};\n\nconst siteContentType = await graph.sites.getById(\"{site identifier}\").contentTypes.add(sampleContentType);\n</code></pre>"},{"location":"graph/content-types/#add-a-content-type-copy-list","title":"Add a Content Type - Copy (List)","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/sites\";\nimport \"@pnp/graph/lists\";\nimport \"@pnp/graph/content-types\";\n\nconst graph = graphfi(...);\n\n//Get a list of compatible site content types for the list\nconst siteContentType = await graph.site.getById(\"{site identifier}\").getApplicableContentTypesForList(\"{list identifier}\")();\n//Get a specific content type from the site.\nconst siteContentType = await graph.site.getById(\"{site identifier}\").contentTypes.getById(\"{content type identifier}\")();\nconst listContentType = await graph.sites.getById(\"{site identifier}\").lists.getById(\"{list identifier}\").contentTypes.addCopy(siteContentType);\n</code></pre>"},{"location":"graph/content-types/#update-a-content-type-sites-and-list","title":"Update a Content Type (Sites and List)","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/sites\";\nimport \"@pnp/graph/columns\";\n//Needed for lists\nimport \"@pnp/graph/lists\";\n\nconst graph = graphfi(...);\n\nconst site = graph.site.getById(\"{site identifier}\");\nconst updatedSiteContentType = await site.contentTypes.getById(\"{content type identifier}\").update({ description: \"New Description\" });\nconst updateListContentType = await site.lists.getById(\"{list identifier}\").contentTypes.getById(\"{content type identifier}\").update({ description: \"New Description\" });\n</code></pre>"},{"location":"graph/content-types/#delete-a-content-type","title":"Delete a Content Type","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/sites\";\nimport \"@pnp/graph/content-types\";\n//Needed for lists\nimport \"@pnp/graph/lists\";\n\nconst graph = graphfi(...);\n\nawait graph.site.getById(\"{site identifier}\").contentTypes.getById(\"{content type identifier}\").delete();\nawait graph.site.getById(\"{site identifier}\").lists.getById(\"{list identifier}\").contentTypes.getById(\"{content type identifier}\").delete();\n</code></pre>"},{"location":"graph/content-types/#get-compatible-content-types-from-hub","title":"Get Compatible Content Types from Hub","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/sites\";\nimport \"@pnp/graph/content-types\";\n//Needed for lists\nimport \"@pnp/graph/lists\";\n\nconst graph = graphfi(...);\n\nconst siteContentTypes = await graph.site.getById(\"{site identifier}\").contentTypes.getCompatibleHubContentTypes();\nconst listContentTypes = await graph.site.getById(\"{site identifier}\").lists.getById(\"{list identifier}\").contentTypes.getCompatibleHubContentTypes();\n</code></pre>"},{"location":"graph/content-types/#addsync-content-types-from-hub-site-and-list","title":"Add/Sync Content Types from Hub (Site and List)","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/sites\";\nimport \"@pnp/graph/content-types\";\n//Needed for lists\nimport \"@pnp/graph/lists\";\n\nconst graph = graphfi(...);\n\nconst hubSiteContentTypes = await graph.site.getById(\"{site identifier}\").contentTypes.getCompatibleHubContentTypes();\nconst siteContentType = await graph.site.getById(\"{site identifier}\").contentTypes.addCopyFromContentTypeHub(hubSiteContentTypes[0].Id);\n\nconst hubListContentTypes = await graph.site.getById(\"{site identifier}\").lists.getById(\"{list identifier}\").contentTypes.getCompatibleHubContentTypes();\nconst listContentType = await graph.site.getById(\"{site identifier}\").lists.getById(\"{list identifier}\").contentTypes.addCopyFromContentTypeHub(hubListContentTypes[0].Id);\n</code></pre>"},{"location":"graph/content-types/#site-content-type-ispublished-publish-unpublish","title":"Site Content Type (isPublished, Publish, Unpublish)","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/sites\";\nimport \"@pnp/graph/content-types\";\n\nconst graph = graphfi(...);\n\nconst siteContentType = graph.site.getById(\"{site identifier}\").contentTypes.getById(\"{content type identifier}\");\nconst isPublished = await siteContentType.isPublished();\nawait siteContentType.publish();\nawait siteContentType.unpublish();;\n</code></pre>"},{"location":"graph/content-types/#associate-content-type-with-hub-sites","title":"Associate Content Type with Hub Sites","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/sites\";\nimport \"@pnp/graph/content-types\";\n\nconst graph = graphfi(...);\n\nconst hubSiteUrls: string[] = [hubSiteUrl1, hubSiteUrl2, hubSiteUrl3];\nconst propagateToExistingLists = true;\n// NOTE: the site must be the content type hub\nconst contentTypeHub = graph.site.getById(\"{content type hub site identifier}\");\nconst siteContentType = await contentTypeHub.contentTypes.getById(\"{content type identifier}\").associateWithHubSites(hubSiteUrls, propagateToExistingLists);\n</code></pre>"},{"location":"graph/content-types/#copy-a-file-to-a-default-content-location-in-a-content-type","title":"Copy a file to a default content location in a content type","text":"<p>Not fully implemented, requires Files support</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/sites\";\nimport \"@pnp/graph/content-types\";\n\nconst graph = graphfi(...);\n\n// Not fully implemented\nconst sourceFile: ItemReference = {};\nconst destinationFileName: string = \"NewFileName\";\n\nconst site = graph.site.getById(\"{site identifier}\");\nconst siteContentType = await site.contentTypes.getById(\"{content type identifier}\").copyToDefaultContentLocation(sourceFile, destinationFileName);\n</code></pre>"},{"location":"graph/directoryobjects/","title":"@pnp/graph/directoryObjects","text":"<p>Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types.</p> <p>More information can be found in the official Graph documentation:</p> <ul> <li>DirectoryObject Resource Type</li> </ul>"},{"location":"graph/directoryobjects/#idirectoryobject-idirectoryobjects","title":"IDirectoryObject, IDirectoryObjects","text":""},{"location":"graph/directoryobjects/#the-groups-and-directory-roles-for-the-user","title":"The groups and directory roles for the user","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\n\nconst graph = graphfi(...);\n\nconst memberOf = await graph.users.getById('user@tenant.onmicrosoft.com').memberOf();\n\nconst memberOf2 = await graph.me.memberOf();\n\n</code></pre>"},{"location":"graph/directoryobjects/#return-all-the-groups-the-user-group-or-directoryobject-is-a-member-of-add-true-parameter-to-return-only-security-enabled-groups","title":"Return all the groups the user, group or directoryObject is a member of. Add true parameter to return only security enabled groups","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/groups\";\n\nconst graph = graphfi(...);\n\nconst memberGroups = await graph.users.getById('user@tenant.onmicrosoft.com').getMemberGroups();\n\nconst memberGroups2 = await graph.me.getMemberGroups();\n\n// Returns only security enabled groups\nconst memberGroups3 = await graph.me.getMemberGroups(true);\n\nconst memberGroups4 = await graph.groups.getById('user@tenant.onmicrosoft.com').getMemberGroups();\n\n</code></pre>"},{"location":"graph/directoryobjects/#returns-all-the-groups-administrative-units-and-directory-roles-that-a-user-group-or-directory-object-is-a-member-of-add-true-parameter-to-return-only-security-enabled-groups","title":"Returns all the groups, administrative units and directory roles that a user, group, or directory object is a member of. Add true parameter to return only security enabled groups","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/groups\";\n\nconst graph = graphfi(...);\n\nconst memberObjects = await graph.users.getById('user@tenant.onmicrosoft.com').getMemberObjects();\n\nconst memberObjects2 = await graph.me.getMemberObjects();\n\n// Returns only security enabled groups\nconst memberObjects3 = await graph.me.getMemberObjects(true);\n\nconst memberObjects4 = await graph.groups.getById('99dc1039-eb80-43b1-a09e-250d50a80b26').getMemberObjects();\n</code></pre>"},{"location":"graph/directoryobjects/#check-for-membership-in-a-specified-list-of-groups","title":"Check for membership in a specified list of groups","text":"<p>And returns from that list those groups of which the specified user, group, or directory object is a member</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/groups\";\n\nconst graph = graphfi(...);\n\nconst checkedMembers = await graph.users.getById('user@tenant.onmicrosoft.com').checkMemberGroups([\"c2fb52d1-5c60-42b1-8c7e-26ce8dc1e741\",\"2001bb09-1d46-40a6-8176-7bb867fb75aa\"]);\n\nconst checkedMembers2 = await graph.me.checkMemberGroups([\"c2fb52d1-5c60-42b1-8c7e-26ce8dc1e741\",\"2001bb09-1d46-40a6-8176-7bb867fb75aa\"]);\n\nconst checkedMembers3 = await graph.groups.getById('99dc1039-eb80-43b1-a09e-250d50a80b26').checkMemberGroups([\"c2fb52d1-5c60-42b1-8c7e-26ce8dc1e741\",\"2001bb09-1d46-40a6-8176-7bb867fb75aa\"]);\n</code></pre>"},{"location":"graph/directoryobjects/#get-directoryobject-by-id","title":"Get directoryObject by Id","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/directory-objects\";\n\nconst graph = graphfi(...);\n\nconst dirObject = await graph.directoryObjects.getById('99dc1039-eb80-43b1-a09e-250d50a80b26');\n\n</code></pre>"},{"location":"graph/directoryobjects/#delete-directoryobject","title":"Delete directoryObject","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/directory-objects\";\n\nconst graph = graphfi(...);\n\nconst deleted = await graph.directoryObjects.getById('99dc1039-eb80-43b1-a09e-250d50a80b26').delete()\n\n</code></pre>"},{"location":"graph/groups/","title":"@pnp/graph/groups","text":"<p>Groups are collections of users and other principals who share access to resources in Microsoft services or in your app. All group-related operations in Microsoft Graph require administrator consent.</p> <p>Note: Groups can only be created through work or school accounts. Personal Microsoft accounts don't support groups.</p> <p>You can learn more about Microsoft Graph Groups by reading the Official Microsoft Graph Documentation.</p>"},{"location":"graph/groups/#igroup-igroups","title":"IGroup, IGroups","text":""},{"location":"graph/groups/#add-a-group","title":"Add a Group","text":"<p>Add a new group.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/groups\";\nimport { GroupType } from '@pnp/graph/groups';\n\nconst graph = graphfi(...);\n\nconst groupAddResult = await graph.groups.add(\"GroupName\", \"Mail_NickName\", GroupType.Office365);\nconst group = await groupAddResult.group();\n</code></pre>"},{"location":"graph/groups/#delete-a-group","title":"Delete a Group","text":"<p>Deletes an existing group.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/groups\";\n\nconst graph = graphfi(...);\n\nawait graph.groups.getById(\"7d2b9355-0891-47d3-84c8-bf2cd9c62177\").delete();\n</code></pre>"},{"location":"graph/groups/#update-group-properties","title":"Update Group Properties","text":"<p>Updates an existing group.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/groups\";\n\nconst graph = graphfi(...);\n\nawait graph.groups.getById(\"7d2b9355-0891-47d3-84c8-bf2cd9c62177\").update({ displayName: newName, propertyName: updatedValue});\n</code></pre>"},{"location":"graph/groups/#add-favorite","title":"Add favorite","text":"<p>Add the group to the list of the current user's favorite groups. Supported for Office 365 groups only.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/groups\";\n\nconst graph = graphfi(...);\n\nawait graph.groups.getById(\"7d2b9355-0891-47d3-84c8-bf2cd9c62177\").addFavorite();\n</code></pre>"},{"location":"graph/groups/#remove-favorite","title":"Remove favorite","text":"<p>Remove the group from the list of the current user's favorite groups. Supported for Office 365 Groups only.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/groups\";\n\nconst graph = graphfi(...);\n\nawait graph.groups.getById(\"7d2b9355-0891-47d3-84c8-bf2cd9c62177\").removeFavorite();\n</code></pre>"},{"location":"graph/groups/#reset-unseen-count","title":"Reset Unseen Count","text":"<p>Reset the unseenCount of all the posts that the current user has not seen since their last visit. Supported for Office 365 groups only.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/groups\";\n\nconst graph = graphfi(...);\n\nawait graph.groups.getById(\"7d2b9355-0891-47d3-84c8-bf2cd9c62177\").resetUnseenCount();\n</code></pre>"},{"location":"graph/groups/#subscribe-by-mail","title":"Subscribe By Mail","text":"<p>Calling this method will enable the current user to receive email notifications for this group, about new posts, events, and files in that group. Supported for Office 365 groups only.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/groups\";\n\nconst graph = graphfi(...);\n\nawait graph.groups.getById(\"7d2b9355-0891-47d3-84c8-bf2cd9c62177\").subscribeByMail();\n</code></pre>"},{"location":"graph/groups/#unsubscribe-by-mail","title":"Unsubscribe By Mail","text":"<p>Calling this method will prevent the current user from receiving email notifications for this group about new posts, events, and files in that group. Supported for Office 365 groups only.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/groups\";\n\nconst graph = graphfi(...);\n\nawait graph.groups.getById(\"7d2b9355-0891-47d3-84c8-bf2cd9c62177\").unsubscribeByMail();\n</code></pre>"},{"location":"graph/groups/#get-calendar-view","title":"Get Calendar View","text":"<p>Get the occurrences, exceptions, and single instances of events in a calendar view defined by a time range, from the default calendar of a group.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/groups\";\n\nconst graph = graphfi(...);\n\nconst startDate = new Date(\"2020-04-01\");\nconst endDate = new Date(\"2020-03-01\");\n\nconst events = graph.groups.getById(\"7d2b9355-0891-47d3-84c8-bf2cd9c62177\").getCalendarView(startDate, endDate);\n</code></pre>"},{"location":"graph/groups/#group-photo-operations","title":"Group Photo Operations","text":"<p>See Photos</p>"},{"location":"graph/groups/#group-membership","title":"Group Membership","text":"<p>Get the members and/or owners of a group.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/groups\";\nimport \"@pnp/graph/members\";\n\nconst graph = graphfi(...);\nconst members = await graph.groups.getById(\"7d2b9355-0891-47d3-84c8-bf2cd9c62177\").members();\nconst owners = await graph.groups.getById(\"7d2b9355-0891-47d3-84c8-bf2cd9c62177\").owners();\n</code></pre>"},{"location":"graph/groups/#get-the-team-site-for-a-group","title":"Get the Team Site for a Group","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/groups\";\nimport \"@pnp/graph/sites/group\";\n\nconst graph = graphfi(...);\n\nconst teamSite = await graph.groups.getById(\"7d2b9355-0891-47d3-84c8-bf2cd9c62177\").sites.root();\nconst url = teamSite.webUrl\n</code></pre>"},{"location":"graph/insights/","title":"@pnp/graph/insights","text":"<p>This module helps you get Insights in form of Trending, Used and Shared. The results are based on relationships calculated using advanced analytics and machine learning techniques.</p>"},{"location":"graph/insights/#iinsights","title":"IInsights","text":""},{"location":"graph/insights/#get-all-trending-documents","title":"Get all Trending documents","text":"<p>Returns documents from OneDrive and SharePoint sites trending around a user.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/insights\";\nimport \"@pnp/graph/users\";\n\nconst graph = graphfi(...);\n\nconst trending = await graph.me.insights.trending()\n\nconst trending = await graph.users.getById(\"userId\").insights.trending()\n</code></pre>"},{"location":"graph/insights/#get-a-trending-document-by-id","title":"Get a Trending document by Id","text":"<p>Using the getById method to get a trending document by Id.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/insights\";\nimport \"@pnp/graph/users\";\n\nconst graph = graphfi(...);\n\nconst trendingDoc = await graph.me.insights.trending.getById('Id')()\n\nconst trendingDoc = await graph.users.getById(\"userId\").insights.trending.getById('Id')()\n</code></pre>"},{"location":"graph/insights/#get-the-resource-from-trending-document","title":"Get the resource from Trending document","text":"<p>Using the resources method to get the resource from a trending document.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/insights\";\nimport \"@pnp/graph/users\";\n\nconst graph = graphfi(...);\n\nconst resource = await graph.me.insights.trending.getById('Id').resource()\n\nconst resource = await graph.users.getById(\"userId\").insights.trending.getById('Id').resource()\n</code></pre>"},{"location":"graph/insights/#get-all-used-documents","title":"Get all Used documents","text":"<p>Returns documents viewed and modified by a user. Includes documents the user used in OneDrive for Business, SharePoint, opened as email attachments, and as link attachments from sources like Box, DropBox and Google Drive.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/insights\";\nimport \"@pnp/graph/users\";\n\nconst graph = graphfi(...);\n\nconst used = await graph.me.insights.used()\n\nconst used = await graph.users.getById(\"userId\").insights.used()\n</code></pre>"},{"location":"graph/insights/#get-a-used-document-by-id","title":"Get a Used document by Id","text":"<p>Using the getById method to get a used document by Id.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/insights\";\nimport \"@pnp/graph/users\";\n\nconst graph = graphfi(...);\n\nconst usedDoc = await graph.me.insights.used.getById('Id')()\n\nconst usedDoc = await graph.users.getById(\"userId\").insights.used.getById('Id')()\n</code></pre>"},{"location":"graph/insights/#get-the-resource-from-used-document","title":"Get the resource from Used document","text":"<p>Using the resources method to get the resource from a used document.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/insights\";\nimport \"@pnp/graph/users\";\n\nconst graph = graphfi(...);\n\nconst resource = await graph.me.insights.used.getById('Id').resource()\n\nconst resource = await graph.users.getById(\"userId\").insights.used.getById('Id').resource()\n</code></pre>"},{"location":"graph/insights/#get-all-shared-documents","title":"Get all Shared documents","text":"<p>Returns documents shared with a user. Documents can be shared as email attachments or as OneDrive for Business links sent in emails.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/insights\";\nimport \"@pnp/graph/users\";\n\nconst graph = graphfi(...);\n\nconst shared = await graph.me.insights.shared()\n\nconst shared = await graph.users.getById(\"userId\").insights.shared()\n</code></pre>"},{"location":"graph/insights/#get-a-shared-document-by-id","title":"Get a Shared document by Id","text":"<p>Using the getById method to get a shared document by Id.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/insights\";\nimport \"@pnp/graph/users\";\n\nconst graph = graphfi(...);\n\nconst sharedDoc = await graph.me.insights.shared.getById('Id')()\n\nconst sharedDoc = await graph.users.getById(\"userId\").insights.shared.getById('Id')()\n</code></pre>"},{"location":"graph/insights/#get-the-resource-from-a-shared-document","title":"Get the resource from a Shared document","text":"<p>Using the resources method to get the resource from a shared document.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/insights\";\nimport \"@pnp/graph/users\";\n\nconst graph = graphfi(...);\n\nconst resource = await graph.me.insights.shared.getById('Id').resource()\n\nconst resource = await graph.users.getById(\"userId\").insights.shared.getById('Id').resource()\n</code></pre>"},{"location":"graph/invitations/","title":"@pnp/graph/invitations","text":"<p>The ability invite an external user via the invitation manager</p>"},{"location":"graph/invitations/#iinvitations","title":"IInvitations","text":""},{"location":"graph/invitations/#create-invitation","title":"Create Invitation","text":"<p>Using the invitations.create() you can create an Invitation. We need the email address of the user being invited and the URL user should be redirected to once the invitation is redeemed (redirect URL).</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/invitations\";\n\nconst graph = graphfi(...);\n\nconst invitationResult = await graph.invitations.create('external.user@email-address.com', 'https://tenant.sharepoint.com/sites/redirecturi');\n\n</code></pre>"},{"location":"graph/items/","title":"@pnp/graph/items","text":"<p>Currently, there is no module in graph to access all items directly. Please, instead, default to search by path using the following methods.</p> <p> </p>"},{"location":"graph/items/#get-list-items","title":"Get list items","text":"<pre><code>import { Site } from \"@pnp/graph/sites\";\n\nconst sites = graph.sites.getById(\"{site id}\");\n\nconst items = await Site(sites, \"lists/{listid}/items\")();\n</code></pre>"},{"location":"graph/items/#get-fileitem-version-information","title":"Get File/Item version information","text":"<pre><code>import { Site } from \"@pnp/graph/sites\";\n\nconst sites = graph.sites.getById(\"{site id}\");\n\nconst users = await Site(sites, \"lists/{listid}/items/{item id}/versions\")();\n</code></pre>"},{"location":"graph/items/#get-list-items-with-fields-included","title":"Get list items with fields included","text":"<pre><code>import { Site } from \"@pnp/graph/sites\";\nimport \"@pnp/graph/lists\";\n\nconst sites = graph.sites.getById(\"{site id}\");\n\nconst listItems : IList[] = await Site(sites, \"lists/{site id}/items?$expand=fields\")();\n</code></pre>"},{"location":"graph/items/#hint-note-that-you-can-just-use-normal-graph-queries-in-this-search","title":"Hint: Note that you can just use normal graph queries in this search.","text":""},{"location":"graph/lists/","title":"@pnp/graph/lists","text":"<p>More information can be found in the official Graph documentation:</p> <ul> <li>List Resource Type</li> </ul> <p> </p>"},{"location":"graph/lists/#get-lists","title":"Get Lists","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/lists\";\n\nconst graph = graphfi(...);\n\nconst siteLists = await graph.site.getById(\"{site identifier}\").lists();\n</code></pre>"},{"location":"graph/lists/#get-list-by-id","title":"Get List by Id","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/lists\";\n\nconst graph = graphfi(...);\n\nconst listInfo = await graph.sites.getById(\"{site identifier}\").lists.getById(\"{list identifier}\")();\n</code></pre>"},{"location":"graph/lists/#add-a-list","title":"Add a List","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/lists\";\n\nconst graph = graphfi(...);\n\nconst sampleList: List = {\n    displayName: \"PnPGraphTestList\",\n    list: { \"template\": \"genericList\" },\n};\n\nconst list = await graph.sites.getById(\"{site identifier}\").lists.add(listTemplate);\n</code></pre>"},{"location":"graph/lists/#update-a-list","title":"Update a List","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/lists\";\n\nconst graph = graphfi(...);\n\nconst list = await graph.sites.getById(\"{site identifier}\").lists.getById(\"{list identifier}\").update({ displayName: \"MyNewListName\" });\n</code></pre>"},{"location":"graph/lists/#delete-a-list","title":"Delete a List","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/lists\";\n\nconst graph = graphfi(...);\n\nawait graph.sites.getById(\"{site identifier}\").lists.getById(\"{list identifier}\").delete();\n</code></pre>"},{"location":"graph/lists/#get-list-columns","title":"Get List Columns","text":"<p>For more information about working please see documentation on columns</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/lists\";\nimport \"@pnp/graph/columns\";\n\nconst graph = graphfi(...);\n\nawait graph.sites.getById(\"{site identifier}\").lists.getById(\"{list identifier}\").columns();\n</code></pre>"},{"location":"graph/lists/#get-list-items","title":"Get List Items","text":"<p>Currently, recieving list items via @pnpjs/graph API is not possible.</p> <p>This can currently be done with a call by path as documented under @pnpjs/graph/items</p>"},{"location":"graph/messages/","title":"Graph Messages (Mail)","text":"<p>More information can be found in the official Graph documentation:</p> <ul> <li>Message Resource Type</li> </ul> <p> </p>"},{"location":"graph/messages/#get-users-messages","title":"Get User's Messages","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/messages\";\n\nconst graph = graphfi(...);\n\nconst currentUser = graph.me;\nconst messages = await currentUser.messages();\n</code></pre>"},{"location":"graph/onedrive/","title":"@pnp/graph/onedrive","text":"<p>The ability to manage drives and drive items in Onedrive is a capability introduced in version 1.2.4 of @pnp/graph. Through the methods described you can manage drives and drive items in Onedrive.</p>"},{"location":"graph/onedrive/#iinvitations","title":"IInvitations","text":""},{"location":"graph/onedrive/#get-the-default-drive","title":"Get the default drive","text":"<p>Using the drive you can get the users default drive from Onedrive, or the groups or sites default document library.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/groups\";\nimport \"@pnp/graph/sites\";\nimport \"@pnp/graph/onedrive\";\n\nconst graph = graphfi(...);\n\nconst otherUserDrive = await graph.users.getById(\"user@tenant.onmicrosoft.com\").drive();\n\nconst currentUserDrive = await graph.me.drive();\n\nconst groupDrive = await graph.groups.getById(\"{group identifier}\").drive();\n\nconst siteDrive = await graph.sites.getById(\"{site identifier}\").drive();\n</code></pre>"},{"location":"graph/onedrive/#get-all-of-the-drives","title":"Get all of the drives","text":"<p>Using the drives() you can get the users available drives from Onedrive</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/groups\";\nimport \"@pnp/graph/sites\";\nimport \"@pnp/graph/onedrive\";\n\nconst graph = graphfi(...);\n\nconst otherUserDrive = await graph.users.getById(\"user@tenant.onmicrosoft.com\").drives();\n\nconst currentUserDrive = await graph.me.drives();\n\nconst groupDrives = await graph.groups.getById(\"{group identifier}\").drives();\n\nconst siteDrives = await graph.sites.getById(\"{site identifier}\").drives();\n\n</code></pre>"},{"location":"graph/onedrive/#get-drive-by-id","title":"Get drive by Id","text":"<p>Using the drives.getById() you can get one of the available drives in Outlook</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/onedrive\";\n\nconst graph = graphfi(...);\n\nconst drive = await graph.users.getById(\"user@tenant.onmicrosoft.com\").drives.getById(\"{drive id}\")();\n\nconst drive = await graph.me.drives.getById(\"{drive id}\")();\n\nconst drive = await graph.drives.getById(\"{drive id}\")();\n\n</code></pre>"},{"location":"graph/onedrive/#get-the-associated-list-of-a-drive","title":"Get the associated list of a drive","text":"<p>Using the list() you get the associated list information</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/onedrive\";\n\nconst graph = graphfi(...);\n\nconst list = await graph.users.getById(\"user@tenant.onmicrosoft.com\").drives.getById(\"{drive id}\").list();\n\nconst list = await graph.me.drives.getById(\"{drive id}\").list();\n\n</code></pre> <p>Using the getList(), from the lists implementation, you get the associated IList object. Form more infomration about acting on the IList object see @pnpjs/graph/lists</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/onedrive\";\nimport \"@pnp/graph/lists\";\n\nconst graph = graphfi(...);\n\nconst listObject: IList = await graph.users.getById(\"user@tenant.onmicrosoft.com\").drives.getById(\"{drive id}\").getList();\n\nconst listOBject: IList = await graph.me.drives.getById(\"{drive id}\").getList();\n\nconst list = await listObject();\n</code></pre>"},{"location":"graph/onedrive/#get-the-recent-files","title":"Get the recent files","text":"<p>Using the recent() you get the recent files</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/onedrive\";\n\nconst graph = graphfi(...);\n\nconst files = await graph.users.getById(\"user@tenant.onmicrosoft.com\").drives.getById(\"{drive id}\").recent();\n\nconst files = await graph.me.drives.getById(\"{drive id}\").recent();\n\n</code></pre>"},{"location":"graph/onedrive/#get-the-files-shared-with-me","title":"Get the files shared with me","text":"<p>Using the sharedWithMe() you get the files shared with the user</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/onedrive\";\n\nconst graph = graphfi(...);\n\nconst shared = await graph.users.getById(\"user@tenant.onmicrosoft.com\").drives.getById(\"{drive id}\").sharedWithMe();\n\nconst shared = await graph.me.drives.getById(\"{drive id}\").sharedWithMe();\n\n// By default, sharedWithMe return items shared within your own tenant. To include items shared from external tenants include the options object.\n\nconst options: ISharingWithMeOptions = {allowExternal: true};\nconst shared = await graph.me.drives.getById(\"{drive id}\").sharedWithMe(options);\n\n</code></pre>"},{"location":"graph/onedrive/#get-the-following-files","title":"Get the following files","text":"<p>List the items that have been followed by the signed in user.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/onedrive\";\n\nconst graph = graphfi(...);\n\nconst files = await graph.me.drives.getById(\"{drive id}\").following();\n\n</code></pre>"},{"location":"graph/onedrive/#get-the-root-folder","title":"Get the Root folder","text":"<p>Using the root() you get the root folder</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/sites\";\nimport \"@pnp/graph/groups\";\nimport \"@pnp/graph/onedrive\";\n\nconst graph = graphfi(...);\n\nconst root = await graph.users.getById(\"user@tenant.onmicrosoft.com\").drives.getById(\"{drive id}\").root();\nconst root = await graph.users.getById(\"user@tenant.onmicrosoft.com\").drive.root();\n\nconst root = await graph.me.drives.getById(\"{drive id}\").root();\nconst root = await graph.me.drive.root();\n\nconst root = await graph.sites.getById(\"{site id}\").drives.getById(\"{drive id}\").root();\nconst root = await graph.sites.getById(\"{site id}\").drive.root();\n\nconst root = await graph.groups.getById(\"{site id}\").drives.getById(\"{drive id}\").root();\nconst root = await graph.groups.getById(\"{site id}\").drive.root();\n\n</code></pre>"},{"location":"graph/onedrive/#get-the-children","title":"Get the Children","text":"<p>Using the children() you get the children</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/onedrive\";\n\nconst graph = graphfi(...);\n\nconst rootChildren = await graph.users.getById(\"user@tenant.onmicrosoft.com\").drives.getById(\"{drive id}\").root.children();\n\nconst rootChildren = await graph.me.drives.getById(\"{drive id}\").root.children();\n\nconst itemChildren = await graph.users.getById(\"user@tenant.onmicrosoft.com\").drives.getById(\"{drive id}\").items.getById(\"{item id}\").children();\n\nconst itemChildren = await graph.me.drives.getById(\"{drive id}\").root.items.getById(\"{item id}\").children();\n\n</code></pre>"},{"location":"graph/onedrive/#get-the-children-by-path","title":"Get the children by path","text":"<p>Using the drive.getItemsByPath() you can get the contents of a particular folder path</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/onedrive\";\n\nconst graph = graphfi(...);\n\nconst item = await graph.users.getById(\"user@tenant.onmicrosoft.com\").drives.getItemsByPath(\"MyFolder/MySubFolder\")();\n\nconst item = await graph.me.drives.getItemsByPath(\"MyFolder/MySubFolder\")();\n\n</code></pre>"},{"location":"graph/onedrive/#add-item","title":"Add Item","text":"<p>Using the add you can add an item, for more options please user the upload method instead.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/onedrive\";\nimport \"@pnp/graph/users\";\nimport {IDriveItemAddResult} from \"@pnp/graph/onedrive\";\n\nconst graph = graphfi(...);\n\nconst add1: IDriveItemAddResult = await graph.users.getById(\"user@tenant.onmicrosoft.com\").drives.getById(\"{drive id}\").root.children.add(\"test.txt\", \"My File Content String\");\nconst add2: IDriveItemAddResult = await graph.me.drives.getById(\"{drive id}\").root.children.add(\"filename.txt\", \"My File Content String\");\n</code></pre>"},{"location":"graph/onedrive/#uploadreplace-drive-item-content","title":"Upload/Replace Drive Item Content","text":"<p>Using the .upload method you can add or update the content of an item.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/onedrive\";\nimport \"@pnp/graph/users\";\nimport {IFileOptions, IDriveItemAddResult} from \"@pnp/graph/onedrive\";\n\nconst graph = graphfi(...);\n\n// file path is only file name\nconst fileOptions: IFileOptions = {\n    content: \"This is some test content\",\n    filePathName: \"pnpTest.txt\",\n    contentType: \"text/plain;charset=utf-8\"\n}\n\nconst uDriveRoot: IDriveItemAddResult = await graph.users.getById(\"user@tenant.onmicrosoft.com\").drive.root.upload(fileOptions);\n\nconst uFolder: IDriveItemAddResult = await graph.users.getById(\"user@tenant.onmicrosoft.com\").drive.getItemById(\"{folder id}\").upload(fileOptions);\n\nconst uDriveIdRoot: IDriveItemAddResult = await graph.users.getById(\"user@tenant.onmicrosoft.com\").drives.getById(\"{drive id}\").root.upload(fileOptions);\n\n// file path includes folders\nconst fileOptions2: IFileOptions = {\n    content: \"This is some test content\",\n    filePathName: \"folderA/pnpTest.txt\",\n    contentType: \"text/plain;charset=utf-8\"\n}\n\nconst uFileOptions: IDriveItemAddResult = await graph.users.getById(\"user@tenant.onmicrosoft.com\").drives.getById(\"{drive id}\").root.upload(fileOptions2);\n</code></pre>"},{"location":"graph/onedrive/#add-folder","title":"Add folder","text":"<p>Using addFolder you can add a folder</p> <pre><code>import { graph } from \"@pnp/graph\";\nimport \"@pnp/graph/onedrive\";\nimport \"@pnp/graph/users\"\nimport {IDriveItemAddResult} from \"@pnp/graph/ondrive\";\n\nconst graph = graphfi(...);\n\nconst addFolder1: IDriveItemAddResult = await graph.users.getById(\"user@tenant.onmicrosoft.com\").drives.getById(\"{drive id}\").root.children.addFolder('New Folder');\nconst addFolder2: IDriveItemAddResult = await graph.me.drives.getById(\"{drive id}\").root.children.addFolder('New Folder');\n\n</code></pre>"},{"location":"graph/onedrive/#search-items","title":"Search items","text":"<p>Using the search() you can search for items, and optionally select properties</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/onedrive\";\n\nconst graph = graphfi(...);\n\n// Where searchTerm is the query text used to search for items.\n// Values may be matched across several fields including filename, metadata, and file content.\n\nconst search = await graph.users.getById(\"user@tenant.onmicrosoft.com\").drives.getById(\"{drive id}\").root.search(searchTerm)();\n\nconst search = await graph.me.drives.getById(\"{drive id}\").root.search(searchTerm)();\n\n</code></pre>"},{"location":"graph/onedrive/#get-specific-item-in-drive","title":"Get specific item in drive","text":"<p>Using the items.getById() you can get a specific item from the current drive</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/onedrive\";\n\nconst graph = graphfi(...);\n\nconst item = await graph.users.getById(\"user@tenant.onmicrosoft.com\").drives.getById(\"{drive id}\").items.getById(\"{item id}\")();\n\nconst item = await graph.me.drives.getById(\"{drive id}\").items.getById(\"{item id}\")();\n\n</code></pre>"},{"location":"graph/onedrive/#get-specific-item-in-drive-by-path","title":"Get specific item in drive by path","text":"<p>Using the drive.getItemByPath() you can get a specific item from the current drive</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/onedrive\";\n\nconst graph = graphfi(...);\n\nconst item = await graph.users.getById(\"user@tenant.onmicrosoft.com\").drives.getItemByPath(\"MyFolder/MySubFolder/myFile.docx\")();\n\nconst item = await graph.me.drives.getItemByPath(\"MyFolder/MySubFolder/myFile.docx\")();\n\n</code></pre>"},{"location":"graph/onedrive/#get-drive-item-contents","title":"Get drive item contents","text":"<p>Using the item.getContent() you can get the content of a file.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/onedrive\";\n\nconst graph = graphfi(...);\n\nprivate _readFileAsync(file: Blob): Promise&lt;ArrayBuffer&gt; {\n  return new Promise((resolve, reject) =&gt; {\n    const reader = new FileReader();\n    reader.onload = () =&gt; {\n      resolve(reader.result as ArrayBuffer);\n    };\n    reader.onerror = reject;\n    reader.readAsArrayBuffer(file);\n  });\n}\n\n// Where itemId is the id of the item\nconst fileContents: Blob = await graph.me.drive.getItemById(itemId).getContent();\nconst content: ArrayBuffer = await this._readFileAsync(fileContents);\n\n// This is an example of decoding plain text from the ArrayBuffer\nconst decoder = new TextDecoder('utf-8');\nconst decodedContent = decoder.decode(content);\n</code></pre>"},{"location":"graph/onedrive/#convert-drive-item-contents","title":"Convert drive item contents","text":"<p>Using the item.convertContent() you can get a PDF version of the file. See official documentation for supported file types.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/onedrive\";\n\nconst graph = graphfi(...);\n\nprivate _readFileAsync(file: Blob): Promise&lt;ArrayBuffer&gt; {\n  return new Promise((resolve, reject) =&gt; {\n    const reader = new FileReader();\n    reader.onload = () =&gt; {\n      resolve(reader.result as ArrayBuffer);\n    };\n    reader.onerror = reject;\n    reader.readAsArrayBuffer(file);\n  });\n}\n\n// Where itemId is the id of the item\nconst fileContents: Blob = await graph.me.drive.getItemById(itemId).convertContent(\"pdf\");\nconst content: ArrayBuffer = await this._readFileAsync(fileContents);\n\n// Further manipulation of the array buffer will be needed based on your requriements.\n</code></pre>"},{"location":"graph/onedrive/#get-thumbnails","title":"Get thumbnails","text":"<p>Using the thumbnails() you get the thumbnails</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/onedrive\";\n\nconst graph = graphfi(...);\n\nconst thumbs = await graph.users.getById(\"user@tenant.onmicrosoft.com\").drives.getById(\"{drive id}\").items.getById(\"{item id}\").thumbnails();\n\nconst thumbs = await graph.me.drives.getById(\"{drive id}\").items.getById(\"{item id}\").thumbnails();\n\n</code></pre>"},{"location":"graph/onedrive/#delete-drive-item","title":"Delete drive item","text":"<p>Using the delete() you delete the current item</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/onedrive\";\n\nconst graph = graphfi(...);\n\nconst thumbs = await graph.users.getById(\"user@tenant.onmicrosoft.com\").drives.getById(\"{drive id}\").items.getById(\"{item id}\").delete();\n\nconst thumbs = await graph.me.drives.getById(\"{drive id}\").items.getById(\"{item id}\").delete();\n\n</code></pre>"},{"location":"graph/onedrive/#update-drive-item-metadata","title":"Update drive item metadata","text":"<p>Using the update() you update the current item</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/onedrive\";\n\nconst graph = graphfi(...);\n\nconst update = await graph.users.getById(\"user@tenant.onmicrosoft.com\").drives.getById(\"{drive id}\").items.getById(\"{item id}\").update({name: \"New Name\"});\n\nconst update = await graph.me.drives.getById(\"{drive id}\").items.getById(\"{item id}\").update({name: \"New Name\"});\n\n</code></pre>"},{"location":"graph/onedrive/#move-drive-item","title":"Move drive item","text":"<p>Using the move() you move the current item, and optionally update it</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/onedrive\";\n\nconst graph = graphfi(...);\n\n// Requires a parentReference to the destination folder location\nconst moveOptions: IItemOptions = {\n  parentReference: {\n    id?: {parentLocationId};\n    driveId?: {parentLocationDriveId}};\n  };\n  name?: {newName};\n};\n\nconst move = await graph.users.getById(\"user@tenant.onmicrosoft.com\").drives.getById(\"{drive id}\").items.getById(\"{item id}\").move(moveOptions);\n\nconst move = await graph.me.drives.getById(\"{drive id}\").items.getById(\"{item id}\").move(moveOptions);\n\n</code></pre>"},{"location":"graph/onedrive/#copy-drive-item","title":"Copy drive item","text":"<p>Using the copy() you can copy the current item to a new location, returns the path to the new location</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/onedrive\";\n\nconst graph = graphfi(...);\n\n// Requires a parentReference to the destination folder location\nconst copyOptions: IItemOptions = {\n  parentReference: {\n    id?: {parentLocationId};\n    driveId?: {parentLocationDriveId}};\n  };\n  name?: {newName};\n};\n\nconst copy = await graph.users.getById(\"user@tenant.onmicrosoft.com\").drives.getById(\"{drive id}\").items.getById(\"{item id}\").copy(copyOptions);\n\nconst copy = await graph.me.drives.getById(\"{drive id}\").items.getById(\"{item id}\").copy(copyOptions);\n\n</code></pre>"},{"location":"graph/onedrive/#get-the-users-special-folders","title":"Get the users special folders","text":"<p>Using the users default drive you can get special folders, including: Documents, Photos, CameraRoll, AppRoot, Music</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/onedrive\";\nimport { SpecialFolder, IDriveItem } from \"@pnp/graph/onedrive\";\n\nconst graph = graphfi(...);\n\n// Get the special folder (App Root)\nconst driveItem: IDriveItem = await graph.me.drive.special(SpecialFolder.AppRoot)();\n\n// Get the special folder (Documents)\nconst driveItem: IDriveItem = await graph.me.drive.special(SpecialFolder.Documents)();\n\n// ETC\n</code></pre>"},{"location":"graph/onedrive/#get-drive-item-preview","title":"Get drive item preview","text":"<p>This action allows you to obtain a short-lived embeddable URL for an item in order to render a temporary preview.</p> <p>If you want to obtain long-lived embeddable links, use the createLink API instead.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/onedrive\";\nimport { IPreviewOptions, IDriveItemPreviewInfo } from \"@pnp/graph/onedrive\";\nimport { ItemPreviewInfo } from \"@microsoft/microsoft-graph-types\"\n\nconst graph = graphfi(...);\n\nconst preview: ItemPreviewInfo = await graph.users.getById(\"user@tenant.onmicrosoft.com\").drives.getById(\"{drive id}\").items.getById(\"{item id}\").preview();\n\nconst preview: ItemPreviewInfo = await graph.me.drives.getById(\"{drive id}\").items.getById(\"{item id}\").preview();\n\nconst previewOptions: IPreviewOptions = {\n    page: 1,\n    zoom: 90\n}\n\nconst preview2: ItemPreviewInfo = await graph.users.getById(\"user@tenant.onmicrosoft.com\").drives.getById(\"{drive id}\").items.getById(\"{item id}\").preview(previewOptions);\n\n</code></pre>"},{"location":"graph/onedrive/#track-changes","title":"Track Changes","text":"<p>Track changes in a driveItem and its children over time.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/onedrive\";\nimport { IDeltaItems } from \"@pnp/graph/ondrive\";\n\nconst graph = graphfi(...);\n\n// Get the changes for the drive items from inception\nconst delta: IDeltaItems = await graph.me.drive.root.delta()();\nconst delta: IDeltaItems = await graph.users.getById(\"user@tenant.onmicrosoft.com\").drives.getById(\"{drive id}\").root.delta()();\n\n// Get the changes for the drive items from token\nconst delta: IDeltaItems = await graph.me.drive.root.delta(\"{token}\")();\n</code></pre>"},{"location":"graph/onedrive/#get-drive-item-analytics","title":"Get Drive Item Analytics","text":"<p>Using the analytics() you get the ItemAnalytics for a DriveItem</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/onedrive\";\nimport { IAnalyticsOptions } from \"@pnp/graph/onedrive\";\n\nconst graph = graphfi(...);\n\n// Defaults to lastSevenDays\nconst analytics = await graph.users.getById(\"user@tenant.onmicrosoft.com\").drives.getById(\"{drive id}\").items.getById(\"{item id}\").analytics()();\n\nconst analytics = await graph.me.drives.getById(\"{drive id}\").items.getById(\"{item id}\").analytics()();\n\nconst analyticOptions: IAnalyticsOptions = {\n    timeRange: \"allTime\"\n};\n\nconst analyticsAllTime = await graph.me.drives.getById(\"{drive id}\").items.getById(\"{item id}\").analytics(analyticOptions)();\n</code></pre>"},{"location":"graph/outlook/","title":"@pnp/graph/outlook","text":"<p>Represents the Outlook services available to a user. Currently, only interacting with categories is supported.</p> <p>You can learn more  by reading the Official Microsoft Graph Documentation.</p>"},{"location":"graph/outlook/#iusers-iuser-ipeople","title":"IUsers, IUser, IPeople","text":""},{"location":"graph/outlook/#get-all-categories-user","title":"Get All Categories User","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/outlook\";\n\nconst graph = graphfi(...);\n\n// Delegated permissions\nconst categories = await graph.me.outlook.masterCategories();\n// Application permissions\nconst categories = await graph.users.getById('{user id}').outlook.masterCategories();\n</code></pre>"},{"location":"graph/outlook/#add-category-user","title":"Add Category User","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/outlook\";\n\nconst graph = graphfi(...);\n\n// Delegated permissions\nawait graph.me.outlook.masterCategories.add({\n  displayName: 'Newsletters', \n  color: 'preset2'\n});\n// Application permissions\nawait graph.users.getById('{user id}').outlook.masterCategories.add({\n  displayName: 'Newsletters', \n  color: 'preset2'\n});\n</code></pre>"},{"location":"graph/outlook/#update-category","title":"Update Category","text":"<p> Testing has shown that <code>displayName</code> cannot be updated.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/outlook\";\nimport { OutlookCategory } from \"@microsoft/microsoft-graph-types\";\n\nconst graph = graphfi(...);\n\nconst categoryUpdate: OutlookCategory = {\n    color: \"preset5\"\n}\n\n// Delegated permissions\nconst categories = await graph.me.outlook.masterCategories.getById('{category id}').update(categoryUpdate);\n// Application permissions\nconst categories = await graph.users.getById('{user id}').outlook.masterCategories.getById('{category id}').update(categoryUpdate);\n</code></pre>"},{"location":"graph/outlook/#delete-category","title":"Delete Category","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/outlook\";\n\nconst graph = graphfi(...);\n\n// Delegated permissions\nconst categories = await graph.me.outlook.masterCategories.getById('{category id}').delete();\n// Application permissions\nconst categories = await graph.users.getById('{user id}').outlook.masterCategories.getById('{category id}').delete();\n</code></pre>"},{"location":"graph/photos/","title":"@pnp/graph/photos","text":"<p>A profile photo of a user, group or an Outlook contact accessed from Exchange Online or Azure Active Directory (AAD). It's binary data not encoded in base-64.</p> <p>You can learn more about Microsoft Graph users by reading the Official Microsoft Graph Documentation.</p>"},{"location":"graph/photos/#iphoto","title":"IPhoto","text":""},{"location":"graph/photos/#current-user-photo","title":"Current User Photo","text":"<p>This example shows the getBlob() endpoint, there is also a getBuffer() endpoint to support node.js</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/photos\";\n\nconst graph = graphfi(...);\n\nconst photoValue = await graph.me.photo.getBlob();\nconst url = window.URL || window.webkitURL;\nconst blobUrl = url.createObjectURL(photoValue);\ndocument.getElementById(\"photoElement\").setAttribute(\"src\", blobUrl);\n</code></pre>"},{"location":"graph/photos/#current-user-photo-by-size","title":"Current User Photo by Size","text":"<p>This example shows the getBlob() endpoint, there is also a getBuffer() endpoint to support node.js</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/photos\";\n\nconst graph = graphfi(...);\n\nconst photoValue = await graph.me.photos.getBySize(\"48x48\").getBlob();\nconst url = window.URL || window.webkitURL;\nconst blobUrl = url.createObjectURL(photoValue);\ndocument.getElementById(\"photoElement\").setAttribute(\"src\", blobUrl);\n</code></pre>"},{"location":"graph/photos/#current-group-photo","title":"Current Group Photo","text":"<p>This example shows the getBlob() endpoint, there is also a getBuffer() endpoint to support node.js</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/groups\";\nimport \"@pnp/graph/photos\";\n\nconst graph = graphfi(...);\n\nconst photoValue = await graph.groups.getById(\"7d2b9355-0891-47d3-84c8-bf2cd9c62177\").photo.getBlob();\nconst url = window.URL || window.webkitURL;\nconst blobUrl = url.createObjectURL(photoValue);\ndocument.getElementById(\"photoElement\").setAttribute(\"src\", blobUrl);\n</code></pre>"},{"location":"graph/photos/#current-group-photo-by-size","title":"Current Group Photo by Size","text":"<p>This example shows the getBlob() endpoint, there is also a getBuffer() endpoint to support node.js</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/groups\";\nimport \"@pnp/graph/photos\";\n\nconst graph = graphfi(...);\n\nconst photoValue = await graph.groups.getById(\"7d2b9355-0891-47d3-84c8-bf2cd9c62177\").photos.getBySize(\"120x120\").getBlob();\nconst url = window.URL || window.webkitURL;\nconst blobUrl = url.createObjectURL(photoValue);\ndocument.getElementById(\"photoElement\").setAttribute(\"src\", blobUrl);\n</code></pre>"},{"location":"graph/photos/#current-team-photo","title":"Current Team Photo","text":"<p>This example shows the getBlob() endpoint, there is also a getBuffer() endpoint to support node.js</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/teams\";\nimport \"@pnp/graph/photos\";\n\nconst graph = graphfi(...);\n\nconst photoValue = await graph.teams.getById(\"7d2b9355-0891-47d3-84c8-bf2cd9c62177\").photo.getBlob();\nconst url = window.URL || window.webkitURL;\nconst blobUrl = url.createObjectURL(photoValue);\ndocument.getElementById(\"photoElement\").setAttribute(\"src\", blobUrl);\n</code></pre>"},{"location":"graph/photos/#set-user-photo","title":"Set User Photo","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/photos\";\n\nconst graph = graphfi(...);\n\nconst input = &lt;HTMLInputElement&gt;document.getElementById(\"thefileinput\");\nconst file = input.files[0];\nawait graph.me.photo.setContent(file);\n</code></pre>"},{"location":"graph/photos/#set-group-photo","title":"Set Group Photo","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/photos\";\n\nconst graph = graphfi(...);\n\nconst input = &lt;HTMLInputElement&gt;document.getElementById(\"thefileinput\");\nconst file = input.files[0];\nawait graph.groups.getById(\"7d2b9355-0891-47d3-84c8-bf2cd9c62177\").photo.setContent(file);\n</code></pre>"},{"location":"graph/photos/#set-team-photo","title":"Set Team Photo","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/teams\";\nimport \"@pnp/graph/photos\";\n\nconst graph = graphfi(...);\n\nconst input = &lt;HTMLInputElement&gt;document.getElementById(\"thefileinput\");\nconst file = input.files[0];\nawait graph.teams.getById(\"7d2b9355-0891-47d3-84c8-bf2cd9c62177\").photo.setContent(file);\n</code></pre>"},{"location":"graph/planner/","title":"@pnp/graph/planner","text":"<p>The ability to manage plans and tasks in Planner is a capability introduced in version 1.2.4 of @pnp/graph. Through the methods described you can add, update and delete items in Planner.</p>"},{"location":"graph/planner/#iinvitations","title":"IInvitations","text":""},{"location":"graph/planner/#get-plans-by-id","title":"Get Plans by Id","text":"<p>Using the planner.plans.getById() you can get a specific Plan. Planner.plans is not an available endpoint, you need to get a specific Plan.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/planner\";\n\nconst graph = graphfi(...);\n\nconst plan = await graph.planner.plans.getById('planId')();\n\n</code></pre>"},{"location":"graph/planner/#add-new-plan","title":"Add new Plan","text":"<p>Using the planner.plans.add() you can create a new Plan.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/planner\";\n\nconst graph = graphfi(...);\n\nconst newPlan = await graph.planner.plans.add('groupObjectId', 'title');\n\n</code></pre>"},{"location":"graph/planner/#get-tasks-in-plan","title":"Get Tasks in Plan","text":"<p>Using the tasks() you can get the Tasks in a Plan.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/planner\";\n\nconst graph = graphfi(...);\n\nconst planTasks = await graph.planner.plans.getById('planId').tasks();\n\n</code></pre>"},{"location":"graph/planner/#get-buckets-in-plan","title":"Get Buckets in Plan","text":"<p>Using the buckets() you can get the Buckets in a Plan.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/planner\";\n\nconst graph = graphfi(...);\n\nconst planBuckets = await graph.planner.plans.getById('planId').buckets();\n\n</code></pre>"},{"location":"graph/planner/#get-details-in-plan","title":"Get Details in Plan","text":"<p>Using the details() you can get the details in a Plan.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/planner\";\n\nconst graph = graphfi(...);\n\nconst planDetails = await graph.planner.plans.getById('planId').details();\n\n</code></pre>"},{"location":"graph/planner/#delete-plan","title":"Delete Plan","text":"<p>Using the delete() you can get delete a Plan.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/planner\";\n\nconst graph = graphfi(...);\n\nconst delPlan = await graph.planner.plans.getById('planId').delete('planEtag');\n\n</code></pre>"},{"location":"graph/planner/#update-plan","title":"Update Plan","text":"<p>Using the update() you can get update a Plan.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/planner\";\n\nconst graph = graphfi(...);\n\nconst updPlan = await graph.planner.plans.getById('planId').update({title: 'New Title', eTag: 'planEtag'});\n\n</code></pre>"},{"location":"graph/planner/#get-all-my-tasks-from-all-plans","title":"Get All My Tasks from all plans","text":"<p>Using the tasks() you can get the Tasks across all plans</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/planner\";\n\nconst graph = graphfi(...);\n\nconst planTasks = await graph.me.tasks()\n\n</code></pre>"},{"location":"graph/planner/#get-task-by-id","title":"Get Task by Id","text":"<p>Using the planner.tasks.getById() you can get a specific Task. Planner.tasks is not an available endpoint, you need to get a specific Task.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/planner\";\n\nconst graph = graphfi(...);\n\nconst task = await graph.planner.tasks.getById('taskId')();\n\n</code></pre>"},{"location":"graph/planner/#add-new-task","title":"Add new Task","text":"<p>Using the planner.tasks.add() you can create a new Task.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/planner\";\n\nconst graph = graphfi(...);\n\nconst newTask = await graph.planner.tasks.add('planId', 'title');\n\n</code></pre>"},{"location":"graph/planner/#get-details-in-task","title":"Get Details in Task","text":"<p>Using the details() you can get the details in a Task.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/planner\";\n\nconst graph = graphfi(...);\n\nconst taskDetails = await graph.planner.tasks.getById('taskId').details();\n\n</code></pre>"},{"location":"graph/planner/#delete-task","title":"Delete Task","text":"<p>Using the delete() you can get delete a Task.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/planner\";\n\nconst graph = graphfi(...);\n\nconst delTask = await graph.planner.tasks.getById('taskId').delete('taskEtag');\n\n</code></pre>"},{"location":"graph/planner/#update-task","title":"Update Task","text":"<p>Using the update() you can get update a Task.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/planner\";\n\nconst graph = graphfi(...);\n\nconst updTask = await graph.planner.tasks.getById('taskId').update({properties, eTag:'taskEtag'});\n\n</code></pre>"},{"location":"graph/planner/#get-buckets-by-id","title":"Get Buckets by Id","text":"<p>Using the planner.buckets.getById() you can get a specific Bucket. planner.buckets is not an available endpoint, you need to get a specific Bucket.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/planner\";\n\nconst graph = graphfi(...);\n\nconst bucket = await graph.planner.buckets.getById('bucketId')();\n\n</code></pre>"},{"location":"graph/planner/#add-new-bucket","title":"Add new Bucket","text":"<p>Using the planner.buckets.add() you can create a new Bucket.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/planner\";\n\nconst graph = graphfi(...);\n\nconst newBucket = await graph.planner.buckets.add('name', 'planId');\n\n</code></pre>"},{"location":"graph/planner/#update-bucket","title":"Update Bucket","text":"<p>Using the update() you can get update a Bucket.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/planner\";\n\nconst graph = graphfi(...);\n\nconst updBucket = await graph.planner.buckets.getById('bucketId').update({name: \"Name\", eTag:'bucketEtag'});\n\n</code></pre>"},{"location":"graph/planner/#delete-bucket","title":"Delete Bucket","text":"<p>Using the delete() you can get delete a Bucket.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/planner\";\n\nconst graph = graphfi(...);\n\nconst delBucket = await graph.planner.buckets.getById('bucketId').delete(eTag:'bucketEtag');\n\n</code></pre>"},{"location":"graph/planner/#get-bucket-tasks","title":"Get Bucket Tasks","text":"<p>Using the tasks() you can get Tasks in a Bucket.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/planner\";\n\nconst graph = graphfi(...);\n\nconst bucketTasks = await graph.planner.buckets.getById('bucketId').tasks();\n\n</code></pre>"},{"location":"graph/planner/#get-plans-for-a-group","title":"Get Plans for a group","text":"<p>Gets all the plans for a group</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/groups\";\nimport \"@pnp/graph/planner\";\n\nconst graph = graphfi(...);\n\nconst plans = await graph.groups.getById(\"b179a282-9f94-4bb5-a395-2a80de5a5a78\").plans();\n\n</code></pre>"},{"location":"graph/search/","title":"@pnp/graph/search","text":"<p>The search module allows you to access the Microsoft Graph Search API. You can read full details of using the API, for library examples please see below.</p> <p> </p>"},{"location":"graph/search/#call-graphquery","title":"Call graph.query","text":"<p>This example shows calling the search API via the <code>query</code> method of the root graph object.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/search\";\n\nconst graph = graphfi(...);\n\nconst results = await graph.query({\n    entityTypes: [\"site\"],\n    query: {\n        queryString: \"test\"\n    },\n});\n</code></pre> <p>Note: This library allows you to pass multiple search requests to the <code>query</code> method as the value consumed by the server is an array, but it only a single requests works at this time. Eventually this may change and no updates will be required.</p>"},{"location":"graph/shares/","title":"@pnp/graph/shares","text":"<p>The shares module allows you to access shared files, or any file in the tenant using encoded file urls.</p> <p></p>"},{"location":"graph/shares/#access-a-share-by-id","title":"Access a Share by Id","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/shares\";\n\nconst graph = graphfi(...);\n\nconst shareInfo = await graph.shares.getById(\"{shareId}\")();\n</code></pre>"},{"location":"graph/shares/#encode-a-sharing-link","title":"Encode a Sharing Link","text":"<p>If you don't have a share id but have the absolute path to a file you can encode it into a sharing link, allowing you to access it directly using the /shares endpoint.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/shares\";\n\nconst graph = graphfi(...);\n\nconst shareLink: string = graph.shares.encodeSharingLink(\"https://{tenant}.sharepoint.com/sites/dev/Shared%20Documents/new.pptx\");\n\nconst shareInfo = await graph.shares.getById(shareLink)();\n</code></pre>"},{"location":"graph/shares/#access-a-shares-driveitem-resource","title":"Access a Share's driveItem resource","text":"<p>You can also access the full functionality of the driveItem via a share. Find more details on the capabilities of driveItem here.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/shares\";\n\nconst graph = graphfi(...);\n\nconst driveItemInfo = await graph.shares.getById(\"{shareId}\").driveItem();\n</code></pre>"},{"location":"graph/sites/","title":"@pnp/graph/sites","text":"<p>The search module allows you to access the Microsoft Graph Sites API.</p> <p> </p>"},{"location":"graph/sites/#call-graphsites","title":"Call graph.sites","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/sites\";\n\nconst graph = graphfi(...);\n\nconst sitesInfo = await graph.sites();\n</code></pre>"},{"location":"graph/sites/#call-graphsitesgetbyid","title":"Call graph.sites.getById","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/sites\";\n\nconst graph = graphfi(...);\n\nconst siteInfo = await graph.sites.getById(\"{site identifier}\")();\n</code></pre>"},{"location":"graph/sites/#call-graphsitesgetbyurl","title":"Call graph.sites.getByUrl","text":"<p>Using the sites.getByUrl() you can get a site using url instead of identifier</p> <p> If you get a site with this method, the graph does not support chaining a request further than .drive. We will review and try and create a work around for this issue.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/sites\";\n\nconst graph = graphfi(...);\nconst sharepointHostName = \"contoso.sharepoint.com\";\nconst serverRelativeUrl = \"/sites/teamsite1\";\nconst siteInfo = await graph.sites.getByUrl(sharepointHostName, serverRelativeUrl)();\n</code></pre>"},{"location":"graph/sites/#make-additional-calls-or-recieve-items-from-lists","title":"Make additional calls or recieve items from lists","text":"<p>We don't currently implement all of the available options in graph for sites, rather focusing on the sp library. While we do accept PRs to add functionality, you can also make calls by path.</p>"},{"location":"graph/subscriptions/","title":"@pnp/graph/subscriptions","text":"<p>The ability to manage subscriptions is a capability introduced in version 1.2.9 of @pnp/graph. A subscription allows a client app to receive notifications about changes to data in Microsoft graph. Currently, subscriptions are enabled for the following resources:</p> <ul> <li>Mail, events, and contacts from Outlook.</li> <li>Conversations from Office Groups.</li> <li>Drive root items from OneDrive.</li> <li>Users and Groups from Azure Active Directory.</li> <li>Alerts from the Microsoft Graph Security API.</li> </ul>"},{"location":"graph/subscriptions/#get-all-of-the-subscriptions","title":"Get all of the Subscriptions","text":"<p>Using the subscriptions(). If successful this method returns a 200 OK response code and a list of subscription objects in the response body.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/subscriptions\";\n\nconst graph = graphfi(...);\n\nconst subscriptions = await graph.subscriptions();\n\n</code></pre>"},{"location":"graph/subscriptions/#create-a-new-subscription","title":"Create a new Subscription","text":"<p>Using the subscriptions.add(). Creating a subscription requires read scope to the resource. For example, to get notifications messages, your app needs the Mail.Read permission. To learn more about the scopes visit this url.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/subscriptions\";\n\nconst graph = graphfi(...);\n\nconst addedSubscription = await graph.subscriptions.add(\"created,updated\", \"https://webhook.azurewebsites.net/api/send/myNotifyClient\", \"me/mailFolders('Inbox')/messages\", \"2019-11-20T18:23:45.9356913Z\");\n\n</code></pre>"},{"location":"graph/subscriptions/#get-subscription-by-id","title":"Get Subscription by Id","text":"<p>Using the subscriptions.getById() you can get one of the subscriptions</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/subscriptions\";\n\nconst graph = graphfi(...);\n\nconst subscription = await graph.subscriptions.getById('subscriptionId')();\n\n</code></pre>"},{"location":"graph/subscriptions/#delete-a-subscription","title":"Delete a Subscription","text":"<p>Using the subscriptions.getById().delete() you can remove one of the Subscriptions</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/subscriptions\";\n\nconst graph = graphfi(...);\n\nconst delSubscription = await graph.subscriptions.getById('subscriptionId').delete();\n\n</code></pre>"},{"location":"graph/subscriptions/#update-a-subscription","title":"Update a Subscription","text":"<p>Using the subscriptions.getById().update() you can update one of the Subscriptions</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/subscriptions\";\n\nconst graph = graphfi(...);\n\nconst updSubscription = await graph.subscriptions.getById('subscriptionId').update({changeType: \"created,updated,deleted\" });\n\n</code></pre>"},{"location":"graph/teams/","title":"@pnp/graph/teams","text":"<p>The ability to manage Team is a capability introduced in the 1.2.7 of @pnp/graph. Through the methods described you can add, update and delete items in Teams.</p>"},{"location":"graph/teams/#teams-the-user-is-a-member-of","title":"Teams the user is a member of","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/teams\";\n\nconst graph = graphfi(...);\n\nconst joinedTeams = await graph.users.getById('99dc1039-eb80-43b1-a09e-250d50a80b26').joinedTeams();\n\nconst myJoinedTeams = await graph.me.joinedTeams();\n\n</code></pre>"},{"location":"graph/teams/#get-teams-by-id","title":"Get Teams by Id","text":"<p>Using the teams.getById() you can get a specific Team.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/teams\";\n\nconst graph = graphfi(...);\n\nconst team = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528')();\n</code></pre>"},{"location":"graph/teams/#create-new-teamgroup-method-1","title":"Create new Team/Group - Method #1","text":"<p>The first way to create a new Team and corresponding Group is to first create the group and then create the team. Follow the example in Groups to create the group and get the GroupID. Then make a call to create the team from the group.</p>"},{"location":"graph/teams/#create-a-team-via-a-specific-group","title":"Create a Team via a specific group","text":"<p>Here we get the group via id and use <code>createTeam</code></p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/teams\";\nimport \"@pnp/graph/groups\";\n\nconst graph = graphfi(...);\n\nconst createdTeam = await graph.groups.getById('679c8ff4-f07d-40de-b02b-60ec332472dd').createTeam({\n\"memberSettings\": {\n    \"allowCreateUpdateChannels\": true\n},\n\"messagingSettings\": {\n        \"allowUserEditMessages\": true,\n\"allowUserDeleteMessages\": true\n},\n\"funSettings\": {\n    \"allowGiphy\": true,\n    \"giphyContentRating\": \"strict\"\n}});\n</code></pre>"},{"location":"graph/teams/#create-new-teamgroup-method-2","title":"Create new Team/Group - Method #2","text":"<p>The second way to create a new Team and corresponding Group is to do so in one call. This can be done by using the createTeam method.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/teams\";\n\nconst graph = graphfi(...);\n\nconst team = {\n        \"template@odata.bind\": \"https://graph.microsoft.com/v1.0/teamsTemplates('standard')\",\n        \"displayName\": \"PnPJS Test Team\",\n        \"description\": \"PnPJS Test Team\u2019s Description\",\n        \"members\": [\n            {\n                \"@odata.type\": \"#microsoft.graph.aadUserConversationMember\",\n                \"roles\": [\"owner\"],\n                \"user@odata.bind\": \"https://graph.microsoft.com/v1.0/users('{owners user id}')\",\n            },\n        ],\n    };\n\nconst createdTeam: ITeamCreateResultAsync = await graph.teams.create(team);\n//To check the status of the team creation, call getOperationById for the newly created team.\nconst createdTeamStatus = await graph.teams.getById(createdTeam.teamId).getOperationById(createdTeam.operationId);\n</code></pre>"},{"location":"graph/teams/#clone-a-team","title":"Clone a Team","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/teams\";\n\nconst graph = graphfi(...);\n\nconst clonedTeam = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528').cloneTeam(\n'Cloned','description','apps,tabs,settings,channels,members','public');\n\n</code></pre>"},{"location":"graph/teams/#get-teams-async-operation","title":"Get Teams Async Operation","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/teams\";\n\nconst graph = graphfi(...);\n\nconst clonedTeam = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528').cloneTeam(\n'Cloned','description','apps,tabs,settings,channels,members','public');\nconst clonedTeamStatus = await graph.teams.getById(clonedTeam.teamId).getOperationById(clonedTeam.operationId);\n</code></pre>"},{"location":"graph/teams/#archive-a-team","title":"Archive a Team","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/teams\";\n\nconst graph = graphfi(...);\n\nconst archived = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528').archive();\n</code></pre>"},{"location":"graph/teams/#unarchive-a-team","title":"Unarchive a Team","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/teams\";\n\nconst graph = graphfi(...);\n\nconst archived = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528').unarchive();\n</code></pre>"},{"location":"graph/teams/#get-all-channels-of-a-team","title":"Get all channels of a Team","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/teams\";\n\nconst graph = graphfi(...);\n\nconst channels = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528').channels();\n</code></pre>"},{"location":"graph/teams/#get-primary-channel","title":"Get primary channel","text":"<p>Using the teams.getById() you can get a specific Team.</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/teams\";\n\nconst graph = graphfi(...);\nconst channel = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528').primaryChannel();\n</code></pre>"},{"location":"graph/teams/#get-channel-by-id","title":"Get channel by Id","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/teams\";\n\nconst graph = graphfi(...);\n\nconst channel = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528').channels.getById('19:65723d632b384ca89c81115c281428a3@thread.skype')();\n\n</code></pre>"},{"location":"graph/teams/#create-a-new-channel","title":"Create a new Channel","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\n\nconst graph = graphfi(...);\n\nconst newChannel = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528').channels.create('New Channel', 'Description');\n\n</code></pre>"},{"location":"graph/teams/#list-messages","title":"List Messages","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/teams\";\n\nconst graph = graphfi(...);\n\nconst chatMessages = await graph.teams.getById('3531fzfb-f9ee-4f43-982a-6c90d8226528').channels.getById('19:65723d632b384xa89c81115c281428a3@thread.skype').messages();\n</code></pre>"},{"location":"graph/teams/#add-chat-message-to-channel","title":"Add chat message to Channel","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/teams\";\nimport { ChatMessage } from \"@microsoft/microsoft-graph-types\";\n\nconst graph = graphfi(...);\n\nconst message = {\n      \"body\": {\n        \"content\": \"Hello World\"\n      }\n    }\nconst chatMessage: ChatMessage = await graph.teams.getById('3531fzfb-f9ee-4f43-982a-6c90d8226528').channels.getById('19:65723d632b384xa89c81115c281428a3@thread.skype').messages.add(message);\n</code></pre>"},{"location":"graph/teams/#get-installed-apps","title":"Get installed Apps","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/teams\";\n\nconst graph = graphfi(...);\n\nconst installedApps = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528').installedApps();\n\n</code></pre>"},{"location":"graph/teams/#add-an-app","title":"Add an App","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/teams\";\n\nconst graph = graphfi(...);\n\nconst addedApp = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528').installedApps.add('https://graph.microsoft.com/v1.0/appCatalogs/teamsApps/12345678-9abc-def0-123456789a');\n\n</code></pre>"},{"location":"graph/teams/#remove-an-app","title":"Remove an App","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/teams\";\n\nconst graph = graphfi(...);\n\nconst removedApp = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528').installedApps.delete();\n\n</code></pre>"},{"location":"graph/teams/#get-tabs-from-a-channel","title":"Get Tabs from a Channel","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/teams\";\n\nconst graph = graphfi(...);\n\nconst tabs = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528').\nchannels.getById('19:65723d632b384ca89c81115c281428a3@thread.skype').tabs();\n\n</code></pre>"},{"location":"graph/teams/#get-tab-by-id","title":"Get Tab by Id","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/teams\";\n\nconst graph = graphfi(...);\n\nconst tab = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528').\nchannels.getById('19:65723d632b384ca89c81115c281428a3@thread.skype').tabs.getById('Id')();\n\n</code></pre>"},{"location":"graph/teams/#add-a-new-tab-to-channel","title":"Add a new Tab to Channel","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/teams\";\n\nconst graph = graphfi(...);\n\nconst newTab = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528').\nchannels.getById('19:65723d632b384ca89c81115c281428a3@thread.skype').tabs.add('Tab','https://graph.microsoft.com/v1.0/appCatalogs/teamsApps/12345678-9abc-def0-123456789a',&lt;TabsConfiguration&gt;{});\n\n</code></pre>"},{"location":"graph/teams/#update-a-tab","title":"Update a Tab","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/teams\";\n\nconst graph = graphfi(...);\n\nconst tab = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528').\nchannels.getById('19:65723d632b384ca89c81115c281428a3@thread.skype').tabs.getById('Id').update({\n    displayName: \"New tab name\"\n});\n\n</code></pre>"},{"location":"graph/teams/#remove-a-tab-from-channel","title":"Remove a Tab from channel","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/teams\";\n\nconst graph = graphfi(...);\n\nconst tab = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528').\nchannels.getById('19:65723d632b384ca89c81115c281428a3@thread.skype').tabs.getById('Id').delete();\n\n</code></pre>"},{"location":"graph/teams/#team-membership","title":"Team Membership","text":"<p>Get the members and/or owners of a group.</p> <p>See Groups</p>"},{"location":"graph/users/","title":"@pnp/graph/users","text":"<p>Users are Azure Active Directory objects representing users in the organizations. They represent the single identity for a person across Microsoft 365 services.  </p> <p>You can learn more about Microsoft Graph users by reading the Official Microsoft Graph Documentation.</p>"},{"location":"graph/users/#iusers-iuser-ipeople","title":"IUsers, IUser, IPeople","text":""},{"location":"graph/users/#current-user","title":"Current User","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\n\nconst graph = graphfi(...);\n\nconst currentUser = await graph.me();\n</code></pre>"},{"location":"graph/users/#get-users-in-the-organization","title":"Get Users in the Organization","text":"<p>If you want to get all users you will need to use paging</p> <pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\n\nconst graph = graphfi(...);\n\nconst allUsers = await graph.users();\n</code></pre>"},{"location":"graph/users/#get-a-user-by-email-address-or-user-id","title":"Get a User by email address (or user id)","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\n\nconst graph = graphfi(...);\n\nconst matchingUser = await graph.users.getById('jane@contoso.com')();\n</code></pre>"},{"location":"graph/users/#user-properties","title":"User Properties","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\n\nconst graph = graphfi(...);\n\nawait graph.me.memberOf();\nawait graph.me.transitiveMemberOf();\n</code></pre>"},{"location":"graph/users/#update-current-user","title":"Update Current User","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\n\nconst graph = graphfi(...);\n\nawait graph.me.update({\n    displayName: 'John Doe'\n});\n</code></pre>"},{"location":"graph/users/#people","title":"People","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\n\nconst graph = graphfi(...);\n\nconst people = await graph.me.people();\n\n// get the top 3 people\nconst people = await graph.me.people.top(3)();\n</code></pre>"},{"location":"graph/users/#manager","title":"Manager","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\n\nconst graph = graphfi(...);\n\nconst manager = await graph.me.manager();\n</code></pre>"},{"location":"graph/users/#direct-reports","title":"Direct Reports","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\n\nconst graph = graphfi(...);\n\nconst reports = await graph.me.directReports();\n</code></pre>"},{"location":"graph/users/#photo","title":"Photo","text":"<pre><code>import { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users\";\nimport \"@pnp/graph/photos\";\n\nconst graph = graphfi(...);\n\nconst currentUser = await graph.me.photo();\nconst specificUser = await graph.users.getById('jane@contoso.com').photo();\n</code></pre>"},{"location":"graph/users/#user-photo-operations","title":"User Photo Operations","text":"<p>See Photos</p>"},{"location":"graph/users/#user-presence-operation","title":"User Presence Operation","text":"<p>See Cloud Communications</p>"},{"location":"graph/users/#user-messages-mail","title":"User Messages (Mail)","text":"<p>See Messages</p>"},{"location":"graph/users/#user-onedrive","title":"User OneDrive","text":"<p>See OneDrive</p>"},{"location":"logging/","title":"@pnp/logging","text":"<p>The logging module provides light weight subscribable and extensible logging framework which is used internally and available for use in your projects. This article outlines how to setup logging and use the various loggers.</p>"},{"location":"logging/#getting-started","title":"Getting Started","text":"<p>Install the logging module, it has no other dependencies</p> <p><code>npm install @pnp/logging --save</code></p>"},{"location":"logging/#understanding-the-logging-framework","title":"Understanding the Logging Framework","text":"<p>The logging framework is centered on the Logger class to which any number of listeners can be subscribed. Each of these listeners will receive each of the messages logged. Each listener must implement the ILogListener interface, shown below. There is only one method to implement and it takes an instance of the LogEntry interface as a parameter.</p> <pre><code>/**\n * Interface that defines a log listener\n *\n */\nexport interface ILogListener {\n    /**\n     * Any associated data that a given logging listener may choose to log or ignore\n     *\n     * @param entry The information to be logged\n     */\n    log(entry: ILogEntry): void;\n}\n\n/**\n * Interface that defines a log entry\n *\n */\nexport interface ILogEntry {\n    /**\n     * The main message to be logged\n     */\n    message: string;\n    /**\n     * The level of information this message represents\n     */\n    level: LogLevel;\n    /**\n     * Any associated data that a given logging listener may choose to log or ignore\n     */\n    data?: any;\n}\n</code></pre>"},{"location":"logging/#log-levels","title":"Log Levels","text":"<pre><code>export const enum LogLevel {\n    Verbose = 0,\n    Info = 1,\n    Warning = 2,\n    Error = 3,\n    Off = 99,\n}\n</code></pre>"},{"location":"logging/#writing-to-the-logger","title":"Writing to the Logger","text":"<p>To write information to a logger you can use either write, writeJSON, or log.</p> <pre><code>import {\n    Logger,\n    LogLevel\n} from \"@pnp/logging\";\n\n// write logs a simple string as the message value of the LogEntry\nLogger.write(\"This is logging a simple string\");\n\n// optionally passing a level, default level is Verbose\nLogger.write(\"This is logging a simple string\", LogLevel.Error);\n\n// this will convert the object to a string using JSON.stringify and set the message with the result\nLogger.writeJSON({ name: \"value\", name2: \"value2\"});\n\n// optionally passing a level, default level is Verbose\nLogger.writeJSON({ name: \"value\", name2: \"value2\"}, LogLevel.Warning);\n\n// specify the entire LogEntry interface using log\nLogger.log({\n    data: { name: \"value\", name2: \"value2\"},\n    level: LogLevel.Warning,\n    message: \"This is my message\"\n});\n</code></pre>"},{"location":"logging/#log-an-error","title":"Log an error","text":"<p>There exists a shortcut method to log an error to the Logger. This will log an entry to the subscribed loggers where the data property will be the Error instance passed in, the level will be 'Error', and the message will be the Error instance's message property.</p> <pre><code>const e = Error(\"An Error\");\n\nLogger.error(e);\n</code></pre>"},{"location":"logging/#subscribing-a-listener","title":"Subscribing a Listener","text":"<p>By default no listeners are subscribed, so if you would like to get logging information you need to subscribe at least one listener. This is done as shown below by importing the Logger and your listener(s) of choice. Here we are using the provided ConsoleListener. We are also setting the active log level, which controls the level of logging that will be output. Be aware that Verbose produces a substantial amount of data about each request.</p> <pre><code>import {\n    Logger,\n    ConsoleListener,\n    LogLevel\n} from \"@pnp/logging\";\n\n// subscribe a listener\nLogger.subscribe(ConsoleListener());\n\n// set the active log level\nLogger.activeLogLevel = LogLevel.Info;\n</code></pre>"},{"location":"logging/#available-listeners","title":"Available Listeners","text":"<p>There are two listeners included in the library, ConsoleListener and FunctionListener.</p>"},{"location":"logging/#consolelistener","title":"ConsoleListener","text":"<p>This listener outputs information to the console and works in Node as well as within browsers. It can be used without settings and writes to the appropriate console method based on message level. For example a LogEntry with level Warning will be written to console.warn. Basic usage is shown in the example above.</p>"},{"location":"logging/#configuration-options","title":"Configuration Options","text":"<p>Although ConsoleListener can be used without configuration, there are some additional options available to you. ConsoleListener supports adding a prefix to every output (helpful for filtering console messages) and specifying text color for messages (including by LogLevel).</p>"},{"location":"logging/#using-a-prefix","title":"Using a Prefix","text":"<p>To add a prefix to all output, supply a string in the constructor:</p> <pre><code>import {\n    Logger,\n    ConsoleListener,\n    LogLevel\n} from \"@pnp/logging\";\n\nconst LOG_SOURCE: string = 'MyAwesomeWebPart';\nLogger.subscribe(ConsoleListener(LOG_SOURCE));\nLogger.activeLogLevel = LogLevel.Info;\n</code></pre> <p>With the above configuration, <code>Logger.write(\"My special message\");</code> will be output to the console as:</p> <pre><code>MyAwesomeWebPart - My special message\n</code></pre>"},{"location":"logging/#customizing-text-color","title":"Customizing Text Color","text":"<p>You can also specify text color for your messages by supplying an <code>IConsoleListenerColors</code> object. You can simply specify <code>color</code> to set the default color for all logging levels or you can set one or more logging level specific text colors (if you only want to set color for a specific logging level(s), leave <code>color</code> out and all other log levels will use the default color).</p> <p>Colors can be specified the same way color values are specified in CSS (named colors, hex values, rgb, rgba, hsl, hsla, etc.):</p> <pre><code>import {\n    Logger,\n    ConsoleListener,\n    LogLevel\n} from \"@pnp/logging\";\n\nconst LOG_SOURCE: string = 'MyAwesomeWebPart';\nLogger.subscribe(ConsoleListener(LOG_SOURCE, {color:'#0b6a0b',warningColor:'magenta'}));\nLogger.activeLogLevel = LogLevel.Info;\n</code></pre> <p>With the above configuration:</p> <pre><code>Logger.write(\"My special message\");\nLogger.write(\"A warning!\", LogLevel.Warning);\n</code></pre> <p>Will result in messages that look like this:</p> <p></p> <p>Color options:</p> <ul> <li><code>color</code>: Default text color for all logging levels unless they're specified</li> <li><code>verboseColor</code>: Text color to use for messages with LogLevel.Verbose</li> <li><code>infoColor</code>: Text color to use for messages with LogLevel.Info</li> <li><code>warningColor</code>: Text color to use for messages with LogLevel.Warning</li> <li><code>errorColor</code>: Text color to use for messages with LogLevel.Error</li> </ul> <p>To set colors without a prefix, specify either <code>undefined</code> or an empty string for the first parameter:</p> <pre><code>Logger.subscribe(ConsoleListener(undefined, {color:'purple'}));\n</code></pre>"},{"location":"logging/#functionlistener","title":"FunctionListener","text":"<p>The FunctionListener allows you to wrap any functionality by creating a function that takes a LogEntry as its single argument. This produces the same result as implementing the LogListener interface, but is useful if you already have a logging method or framework to which you want to pass the messages.</p> <pre><code>import {\n    Logger,\n    FunctionListener,\n    ILogEntry\n} from \"@pnp/logging\";\n\nlet listener = new FunctionListener((entry: ILogEntry) =&gt; {\n\n    // pass all logging data to an existing framework\n    MyExistingCompanyLoggingFramework.log(entry.message);\n});\n\nLogger.subscribe(listener);\n</code></pre>"},{"location":"logging/#create-a-custom-listener","title":"Create a Custom Listener","text":"<p>If desirable for your project you can create a custom listener to perform any logging action you would like. This is done by implementing the ILogListener interface.</p> <pre><code>import {\n    Logger,\n    ILogListener,\n    ILogEntry\n} from \"@pnp/logging\";\n\nclass MyListener implements ILogListener {\n\n    log(entry: ILogEntry): void {\n        // here you would do something with the entry\n    }\n}\n\nLogger.subscribe(new MyListener());\n</code></pre>"},{"location":"logging/#logging-behavior","title":"Logging Behavior","text":"<p>To allow seamless logging with v3 we have introduced the <code>PnPLogging</code> behavior. It takes a single augument representing the log level of that behavior, allowing you to be very selective in what logging you want to get. As well the log level applied here ignores any global level set with <code>activeLogLevel</code> on Logger.</p> <pre><code>import { LogLevel, PnPLogging, Logger, ConsoleListener } from \"@pnp/logging\";\nimport { spfi, SPFx } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\n\n// subscribe a listener\nLogger.subscribe(ConsoleListener());\n\n// at the root we only want to log errors, which will be sent to all subscribed loggers on Logger\nconst sp = spfi().using(SPFx(this.context), PnPLogging(LogLevel.Error));\n\n\nconst list = sp.web.lists.getByTitle(\"My List\");\n// use verbose logging with this particular list because you are trying to debug something\nlist.using(PnPLogging(LogLevel.Verbose));\n\nconst listData = await list();\n</code></pre>"},{"location":"msaljsclient/","title":"@pnp/msaljsclient","text":"<p>This library provides a thin wrapper around the msal library to make it easy to integrate MSAL authentication in the browser.</p> <p>You will first need to install the package:</p> <p><code>npm install @pnp/msaljsclient --save</code></p> <p>The configuration and authParams</p> <pre><code>import { spfi, SPBrowser } from \"@pnp/sp\";\nimport { MSAL } from \"@pnp/msaljsclient\";\nimport \"@pnp/sp/webs\";\n\nconst configuation = {\n    auth: {\n        authority: \"https://login.microsoftonline.com/common\",\n        clientId: \"{client id}\",\n    }\n};\n\nconst authParams = {\n    scopes: [\"https://{tenant}.sharepoint.com/.default\"],\n};\n\nconst sp = spfi(\"https://tenant.sharepoint.com/sites/dev\").using(SPBrowser(), MSAL(configuration, authParams));\n\nconst webData = await sp.web();\n</code></pre> <p>Please see more scenarios in the authentication article.</p>"},{"location":"news/2020-year-in-review/","title":"2020 Year End Report","text":"<p>Welcome to our first year in review report for PnPjs. This year has marked usage milestones, seen more contributors than ever, and expanded the core maintainers team. But none of this would be possible without everyones support and participation - so we start by saying Thank You! We deeply appreciate everyone that has used, helped us grow, and improved the library over the last year.</p> <p>This year we introduced MSAL clients for node and browser, improved our testing/local development plumbing, and updated the libraries to work with the node 15 module resolution rules.</p> <p>We fixed 43 reported bugs, answered 131 questions, and made 55 suggested enhancements to the library - all driven by feedback from users and the community.</p> <p>Planned for release in January 2021 we also undertook the work to enable isolated runtimes, a long requested feature. This allows you to operate on multiple independently configured \"roots\" such as \"sp\" or \"graph\" from the same application. Previously the library was configured globally, so this opens new possibilities for both client and server side scenarios.</p> <p>Finally we made many tooling and project improvements such as moving to GitHub actions, updating the tests to use MSAL, and exploring ways to enhance the developer experience.</p>"},{"location":"news/2020-year-in-review/#usage","title":"Usage","text":"<p>In 2020 we tracked steady month/month growth in raw usage measured by requests as well as in the number of tenants deploying the library. Starting the year we were used in 14605 tenants and by December that number grew to 21,227.</p> <p>These tenants generated 6.1 billion requests to the service in January growing to 9.2 billion by December, peaking at 10.1 billion requests in November.</p> <p></p> <p>1) There was a data glitch in October so the numbers do not fully represent usage. 2) These numbers only include public cloud SPO usage, true usage is higher than we can track due to on-premesis and gov/sovereign clouds</p>"},{"location":"news/2020-year-in-review/#releases","title":"Releases","text":"<p>We continued our monthly release cadence as it represents a good pace for addressing issues while not expecting folks to update too often and keeping each update to a reasonable size. All changes can be tracked in our change log, updated with each release. You can check our scheduled releases through project milestones, understanding there are occasionally delays. Monthly releases allows us to ensure bugs do not linger and we continually improve and expand the capabilities of the libraries.</p>"},{"location":"news/2020-year-in-review/#npm-package-download-statistics-pnpsp","title":"NPM Package download statistics (@pnp/sp):","text":"Month Count * Month Count January 100,686 * July 36,805 February 34,437 * August 38,897 March 34,574 * September 45,968 April 32,436 * October 46,655 May 34,482 * November 45,511 June 34,408 * December 58,977 Grand Total 543,836 <p>With 2020 our total all time downloads of @pnp/sp is now at: 949,638</p> <p>Stats from https://npm-stat.com/</p>"},{"location":"news/2020-year-in-review/#future-plans","title":"Future Plans","text":"<p>Looking to the future we will continue to actively grow and improve v2 of the library, guided by feedback and reported issues. Additionally, we are beginning to discuss v3 and doing initial planning and prototyping. The v3 work will continue through 2021 with no currently set release date, though we will keep everyone up to date.</p> <p>Additionally in 2021 there will be a general focus on improving not just the code but our tooling, build pipeline, and library contributor experience. We will also look at automatic canary releases with each merge, and other improvements.</p>"},{"location":"news/2020-year-in-review/#new-lead-maintainer","title":"New Lead Maintainer","text":"<p>With the close of 2020 we are very excited to announce a new lead maintainer for PnPjs, Julie Turner! Julie brings deep expertise with SharePoint Framework, TypeScript, and SharePoint development to the team, coupled with dedication and care in the work.</p> <p>Over the last year she has gotten more involved with handling releases, responding to issues, and helping to keep the code updated and clean.</p> <p>We are very lucky to have her working on the project and look forward to seeing her lead the growth and direction for years to come.</p>"},{"location":"news/2020-year-in-review/#contributors","title":"Contributors","text":"<p>As always we have abundant thanks and appreciation for your contributors. Taking your time to help improve PnPjs for the community is massive and valuable to ensure our sustainability. Thank you for all your help in 2020! If you are interested in becoming a contributor check out our guide on ways to get started.</p> <p> </p>"},{"location":"news/2020-year-in-review/#sponsors","title":"Sponsors","text":"<p>We want to thank our sponsors for their support in 2020! This year we put the money towards helping offset the cost and shipping of hoodies to contributors and sponsors. Your continued generosity makes a big difference in our ability to recognize and reward the folks building PnPjs.</p> <p>Thank You</p> <p> </p>"},{"location":"news/2020-year-in-review/#closing","title":"Closing","text":"<p>In closing we want say Thank You to everyone who uses, contributes to, and participates in PnPjs and the SharePoint Patterns and Practices program.</p> <p>Wishing you the very best for 2021,</p> <p>The PnPjs Team</p>"},{"location":"news/2021-year-in-review/","title":"2021 Year End Report","text":"<p>Welcome to our second year in review report for PnPjs. 2021 found us planning, building, testing, and documenting a whole new version of PnPjs. The goal is to deliver a much improved and flexible experience and none of that would have been possible without the support and participation of everyone in the PnP community - so we start by saying Thank You! We deeply appreciate everyone that has used, helped us grow, and improved the library over the last year.</p> <p>Because of the huge useage we've seen with the library and issues we found implementing some of the much requested enhancements, we felt we really needed to start from the ground up and rearchitect the library completely. This new design, built on the concept of a \"Timeline\", enabled us to build a significantly lighter weight solution that is more extensible than ever. And bonus, we were able to keep the overall development experience largly unchanged, so that makes transitioning all that much easier. In addition we took extra effort to validate our development efforts by making sure all our tests passed so that we could better ensure quality of the library. Check out our Transition Guide and ChangeLog for all the details.</p> <p>In other news, we fixed 47 reported bugs, answered 89 questions, and made 51 suggested enhancements to version 2 of the library - all driven by feedback from users and the community.</p>"},{"location":"news/2021-year-in-review/#usage","title":"Usage","text":"<p>In 2021 we transitioned from rapid growth to slower growth but maintaining a request/month rate over 11 billion, approaching 13 billion by the end of the year. These requests came from more than 25 thousand tenants including some of the largest M365 customers. Due to some data cleanup we don't have the full year's information, but the below graph shows the final 7 months of the year.</p> <p></p>"},{"location":"news/2021-year-in-review/#releases","title":"Releases","text":"<p>We continued our monthly release cadence as it represents a good pace for addressing issues while not expecting folks to update too often and keeping each update to a reasonable size. All changes can be tracked in our change log, updated with each release. You can check our scheduled releases through project milestones, understanding there are occasionally delays. Monthly releases allows us to ensure bugs do not linger and we continually improve and expand the capabilities of the libraries.</p>"},{"location":"news/2021-year-in-review/#npm-package-download-statistics-pnpsp","title":"NPM Package download statistics (@pnp/sp)","text":"Month Count * Month Count January 49,446 * July 73,491 February 56,054 * August 74,236 March 66,113 * September 69,179 April 58,526 * October 77,645 May 62,747 * November 74,966 June 69,349 * December 61,995 Grand Total 793,747 <p>For comparison our total downloads in 2020 was 543,836.</p> <p>With 2021 our total all time downloads of @pnp/sp is now at: 1,743,385</p> <p>In 2020 the all time total was 949,638.</p> <p>Stats from https://npm-stat.com/</p>"},{"location":"news/2021-year-in-review/#future-plans","title":"Future Plans","text":"<p>Looking to the future we will continue to actively grow and improve v3 of the library, guided by feedback and reported issues. Additionally, we are looking to expand our contributions documentation to make it easier for community members to contibute their ideas and updates to the library.</p>"},{"location":"news/2021-year-in-review/#contributors","title":"Contributors","text":"<p>As always we have abundant thanks and appreciation for your contributors. Taking your time to help improve PnPjs for the community is massive and valuable to ensure our sustainability. Thank you for all your help in 2020! If you are interested in becoming a contributor check out our guide on ways to get started.</p> <p> </p>"},{"location":"news/2021-year-in-review/#sponsors","title":"Sponsors","text":"<p>We want to thank our sponsors for their support in 2020! This year we put the money towards helping offset the cost and shipping of hoodies to contributors and sponsors. Your continued generosity makes a big difference in our ability to recognize and reward the folks building PnPjs.</p> <p>Thank You</p> <p> </p>"},{"location":"news/2021-year-in-review/#closing","title":"Closing","text":"<p>In closing we want say Thank You to everyone who uses, contributes to, and participates in PnPjs and the SharePoint Patterns and Practices program.</p> <p>Wishing you the very best for 2022,</p> <p>The PnPjs Team</p>"},{"location":"news/2022-year-in-review/","title":"2022 Year End Report","text":"<p>Wow, what a year for PnPjs! We released our latest major version 3.0 on Valentine's Day 2022 which included significant performance improvements, a completely rewritten internal architecture, and reduced the bundled library size by two-thirds. As well we continued out monthly releases bringing enhancements and bug fixes to our users on a continual basis.</p> <p>But before we go any further we once again say Thank You!!! to everyone that has used, contributed to, and provided feedback on the library. This journey is not possible without you, and this last year you have driven us to be our best.</p> <p>Version 3 introduces a completely new design for the internals of the library, easily allowing consumers to customize any part of the request process to their needs. Centered around an extensible Timeline and extended for http requests by Queryable this new pattern reduced code duplication, interlock, and complexity significantly. It allows everything in the request flow to be controlled through behaviors, which are plain functions acting at the various stages of the request. Using this model we reimagined batching, caching, authentication, and parsing in simpler, composable ways. If you have not yet updated to version 3, we encourage you to do so. You can review the transition guide to get started.</p> <p>As one last treat, we set up nightly builds so that each day you can get a fresh version with any updates merged the previous day. This is super helpful if you're waiting for a specific fix or feature for your project. It allows for easier testing of new features through the full dev lifecycle, as well.</p> <p>In other news, we fixed 54 reported bugs, answered 123 questions, and made 54 suggested enhancements to version 3 of the library - all driven by feedback from users and the community.</p>"},{"location":"news/2022-year-in-review/#usage","title":"Usage","text":"<p>In 2022 we continued to see steady usage and growth maintaining a requst/month rate over 30 billion for much of the year. These requets came from ~29K tenants a month, including some of our largest M365 customers.</p> <p></p>"},{"location":"news/2022-year-in-review/#releases","title":"Releases","text":"<p>We continued our monthly release cadence as it represents a good pace for addressing issues while not expecting folks to update too often and keeping each update to a reasonable size. All changes can be tracked in our change log, updated with each release. You can check our scheduled releases through project milestones, understanding there are occasionally delays. Monthly releases allows us to ensure bugs do not linger and we continually improve and expand the capabilities of the libraries.</p>"},{"location":"news/2022-year-in-review/#npm-package-download-statistics-pnpsp","title":"NPM Package download statistics (@pnp/sp)","text":"Month Count * Month Count January 70,863 * July 63,844 February 76,649 * August 75,713 March 83,902 * September 71,447 April 70,429 * October 84,744 May 72,406 * November 82,459 June 71,375 * December 65,785 Grand Total 889,616 <p>For comparison our total downloads in 2021 was 793,747.</p> <p>With 2022 our total all time downloads of @pnp/sp is now at: 2,543,639</p> <p>In 2021 the all time total was 1,743,385.</p> <p>Stats from https://npm-stat.com/</p>"},{"location":"news/2022-year-in-review/#future-plans","title":"Future Plans","text":"<p>Looking to the future we will continue to actively grow and improve v3 of the library, guided by feedback and reported issues. Additionally, we are looking to expand our contributions documentation to make it easier for community members to contibute their ideas and updates to the library.</p>"},{"location":"news/2022-year-in-review/#contributors","title":"Contributors","text":"<p>As always we have abundant thanks and appreciation for your contributors. Taking your time to help improve PnPjs for the community is massive and valuable to ensure our sustainability. Thank you for all your help in 2021! If you are interested in becoming a contributor check out our guide on ways to get started.</p> <p> </p>"},{"location":"news/2022-year-in-review/#sponsors","title":"Sponsors","text":"<p>We want to thank our sponsors for their support in 2020! This year we put the money towards helping offset the cost and shipping of hoodies to contributors and sponsors. Your continued generosity makes a big difference in our ability to recognize and reward the folks building PnPjs.</p> <p>Thank You</p> <p> </p>"},{"location":"news/2022-year-in-review/#closing","title":"Closing","text":"<p>In closing we want say Thank You to everyone who uses, contributes to, and participates in PnPjs and the SharePoint Patterns and Practices program.</p> <p>Wishing you the very best for 2023,</p> <p>The PnPjs Team</p>"},{"location":"nodejs/behaviors/","title":"@pnp/nodejs : behaviors","text":"<p>The article describes the behaviors exported by the <code>@pnp/nodejs</code> library. Please also see available behaviors in @pnp/core, @pnp/queryable, @pnp/sp, and @pnp/graph.</p>"},{"location":"nodejs/behaviors/#nodefetch","title":"NodeFetch","text":"<p>This behavior, for use in nodejs, provides basic fetch support through the <code>node-fetch</code> package. It replaces any other registered observers on the send moment by default, but this can be controlled via the props. Remember, when registering observers on the send moment only the first one will be used so not replacing</p> <p>For fetch configuration in browsers please see @pnp/queryable behaviors.</p> <pre><code>import { NodeFetch } from \"@pnp/nodejs\";\n\nimport \"@pnp/sp/webs/index.js\";\n\nconst sp = spfi().using(NodeFetch());\n\nawait sp.webs();\n</code></pre> <pre><code>import { NodeFetch } from \"@pnp/nodejs\";\n\nimport \"@pnp/sp/webs/index.js\";\n\nconst sp = spfi().using(NodeFetch({ replace: false }));\n\nawait sp.webs();\n</code></pre>"},{"location":"nodejs/behaviors/#nodefetchwithretry","title":"NodeFetchWithRetry","text":"<p>This behavior makes fetch requests but will attempt to retry the request on certain failures such as throttling.</p> <pre><code>import { NodeFetchWithRetry } from \"@pnp/nodejs\";\n\nimport \"@pnp/sp/webs/index.js\";\n\nconst sp = spfi().using(NodeFetchWithRetry());\n\nawait sp.webs();\n</code></pre> <p>You can also control how the behavior works through its props. The <code>replace</code> value works as described above for NodeFetch. <code>interval</code> specifies the initial dynamic back off value in milliseconds. This value is ignored if a \"Retry-After\" header exists in the response. <code>retries</code> indicates the number of times to retry before failing the request, the default is 3. A default of 3 will result in up to 4 total requests being the initial request and threee potential retries.</p> <pre><code>import { NodeFetchWithRetry } from \"@pnp/nodejs\";\n\nimport \"@pnp/sp/webs/index.js\";\n\nconst sp = spfi().using(NodeFetchWithRetry({\n    retries: 2,\n    interval: 400,\n    replace: true,\n}));\n\nawait sp.webs();\n</code></pre>"},{"location":"nodejs/behaviors/#graphdefault","title":"GraphDefault","text":"<p>The <code>GraphDefault</code> behavior is a composed behavior including MSAL, NodeFetchWithRetry, DefaultParse, graph's DefaultHeaders, and graph's DefaultInit. It is configured using a props argument:</p> <pre><code>interface IGraphDefaultProps {\n    baseUrl?: string;\n    msal: {\n        config: Configuration;\n        scopes?: string[];\n    };\n}\n</code></pre> <p>You can use the baseUrl property to specify either v1.0 or beta - or one of the special graph urls.</p> <pre><code>import { GraphDefault } from \"@pnp/nodejs\";\nimport { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users/index.js\";\n\nconst graph = graphfi().using(GraphDefault({\n    // use the German national graph endpoint\n    baseUrl: \"https://graph.microsoft.de/v1.0\",\n    msal: {\n        config: { /* my msal config */ },\n    }\n}));\n\nawait graph.me();\n</code></pre>"},{"location":"nodejs/behaviors/#msal","title":"MSAL","text":"<p>This behavior provides a thin wrapper around the <code>@azure/msal-node</code> library. The options you provide are passed directly to msal, and all options are available.</p> <pre><code>import { MSAL } from \"@pnp/nodejs\";\nimport { graphfi } from \"@pnp/graph\";\nimport \"@pnp/graph/users/index.js\";\n\nconst graph = graphfi().using(MSAL(config: { /* my msal config */ }, scopes: [\"https://graph.microsoft.com/.default\"]);\n\nawait graph.me();\n</code></pre>"},{"location":"nodejs/behaviors/#spdefault","title":"SPDefault","text":"<p>The <code>SPDefault</code> behavior is a composed behavior including MSAL, NodeFetchWithRetry, DefaultParse,sp's DefaultHeaders, and sp's DefaultInit. It is configured using a props argument:</p> <pre><code>interface ISPDefaultProps {\n    baseUrl?: string;\n    msal: {\n        config: Configuration;\n        scopes: string[];\n    };\n}\n</code></pre> <p>You can use the baseUrl property to specify the absolute site/web url to which queries should be set. </p> <pre><code>import { SPDefault } from \"@pnp/nodejs\";\n\nimport \"@pnp/sp/webs/index.js\";\n\nconst sp = spfi().using(SPDefault({\n    msal: {\n        config: { /* my msal config */ },\n        scopes: [\"Scope.Value\", \"Scope2.Value\"],\n    }\n}));\n\nawait sp.web();\n</code></pre>"},{"location":"nodejs/behaviors/#streamparse","title":"StreamParse","text":"<p><code>StreamParse</code> is a specialized parser allowing request results to be read as a nodejs stream. The return value when using this parser will be of the shape:</p> <pre><code>{\n    body: /* The .body property of the Response object */,\n    knownLength: /* number value calculated from the Response's content-length header */\n}\n</code></pre> <pre><code>import { StreamParse } from \"@pnp/nodejs\";\n\nimport \"@pnp/sp/webs/index.js\";\n\nconst sp = spfi().using(StreamParse());\n\nconst streamResult = await sp.someQueryThatReturnsALargeFile();\n\n// read the stream as text\nconst txt = await new Promise&lt;string&gt;((resolve) =&gt; {\n    let data = \"\";\n    streamResult.body.on(\"data\", (chunk) =&gt; data += chunk);\n    streamResult.body.on(\"end\", () =&gt; resolve(data));\n});\n</code></pre>"},{"location":"nodejs/sp-extensions/","title":"@pnp/nodejs - sp extensions","text":"<p>By importing anything from the @pnp/nodejs library you automatically get nodejs specific extension methods added into the sp fluent api.</p>"},{"location":"nodejs/sp-extensions/#ifilegetstream","title":"IFile.getStream","text":"<p>Allows you to read a response body as a nodejs PassThrough stream.</p> <pre><code>// by importing the the library the node specific extensions are automatically applied\nimport { SPDefault } from \"@pnp/nodejs\";\nimport { spfi } from \"@pnp/sp\";\n\nconst sp = spfi(\"https://something.com\").using(SPDefault({\n    // config\n}));\n\n// get the stream\nconst streamResult: SPNS.IResponseBodyStream = await sp.web.getFileByServerRelativeUrl(\"/sites/dev/file.txt\").getStream();\n\n// see if we have a known length\nconsole.log(streamResult.knownLength);\n\n// read the stream\n// this is a very basic example - you can do tons more with streams in node\nconst txt = await new Promise&lt;string&gt;((resolve) =&gt; {\n    let data = \"\";\n    stream.body.on(\"data\", (chunk) =&gt; data += chunk);\n    stream.body.on(\"end\", () =&gt; resolve(data));\n});\n</code></pre>"},{"location":"nodejs/sp-extensions/#ifilesaddchunked","title":"IFiles.addChunked","text":"<pre><code>import { SPDefault } from \"@pnp/nodejs\";\nimport { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs/index.js\";\nimport \"@pnp/sp/folders/web.js\";\nimport \"@pnp/sp/folders/list.js\";\nimport \"@pnp/sp/files/web.js\";\nimport \"@pnp/sp/files/folder.js\";\nimport * as fs from \"fs\";\n\nconst sp = spfi(\"https://something.com\").using(SPDefault({\n    // config\n}));\n\n// NOTE: you must supply the highWaterMark to determine the block size for stream uploads\nconst stream = fs.createReadStream(\"{file path}\", { highWaterMark: 10485760 });\nconst files = sp.web.defaultDocumentLibrary.rootFolder.files;\n\n// passing the chunkSize parameter has no affect when using a stream, use the highWaterMark as shown above when creating the stream\nawait files.addChunked(name, stream, null, true);\n</code></pre>"},{"location":"nodejs/sp-extensions/#ifilesetstreamcontentchunked","title":"IFile.setStreamContentChunked","text":"<pre><code>import { SPDefault } from \"@pnp/nodejs\";\nimport { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs/index.js\";\nimport \"@pnp/sp/folders/web.js\";\nimport \"@pnp/sp/folders/list.js\";\nimport \"@pnp/sp/files/web.js\";\nimport \"@pnp/sp/files/folder.js\";\nimport * as fs from \"fs\";\n\nconst sp = spfi(\"https://something.com\").using(SPDefault({\n    // config\n}));\n\n// NOTE: you must supply the highWaterMark to determine the block size for stream uploads\nconst stream = fs.createReadStream(\"{file path}\", { highWaterMark: 10485760 });\nconst file = sp.web.defaultDocumentLibrary.rootFolder.files..getByName(\"file-name.txt\");\n\nawait file.setStreamContentChunked(stream);\n</code></pre>"},{"location":"nodejs/sp-extensions/#explicit-import","title":"Explicit import","text":"<p>If you don't need to import anything from the library, but would like to include the extensions just import the library as shown.</p> <pre><code>import \"@pnp/nodejs\";\n\n// get the stream\nconst streamResult = await sp.web.getFileByServerRelativeUrl(\"/sites/dev/file.txt\").getStream();\n</code></pre>"},{"location":"nodejs/sp-extensions/#accessing-sp-extension-namespace","title":"Accessing SP Extension Namespace","text":"<p>There are classes and interfaces included in extension modules, which you can access through a namespace, \"SPNS\".</p> <pre><code>import { SPNS } from \"@pnp/nodejs-commonjs\";\n\nconst parser = new SPNS.StreamParser();\n</code></pre>"},{"location":"queryable/behaviors/","title":"@pnp/queryable : behaviors","text":"<p>The article describes the behaviors exported by the <code>@pnp/queryable</code> library. Please also see available behaviors in @pnp/core, @pnp/nodejs, @pnp/sp, and @pnp/graph.</p> <p>Generally you won't need to use these behaviors individually when using the defaults supplied by the library, but when appropriate you can create your own composed behaviors using these as building blocks.</p>"},{"location":"queryable/behaviors/#bearer-token","title":"Bearer Token","text":"<p>Allows you to inject an existing bearer token into the request. This behavior will not replace any existing authentication behaviors, so you may want to ensure they are cleared if you are supplying your own tokens, regardless of their source. This behavior does no caching or performs any operation other than including your token in an authentication heading.</p> <pre><code>import { BearerToken } from \"@pnp/queryable\";\n\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi(...).using(BearerToken(\"HereIsMyBearerTokenStringFromSomeSource\"));\n\n// optionally clear any configured authentication as you are supplying a token so additional calls shouldn't be needed\n// but take care as other behaviors may add observers to auth\nsp.on.auth.clear();\n\n// the bearer token supplied above will be applied to all requests made from `sp`\nconst webInfo = await sp.webs();\n</code></pre>"},{"location":"queryable/behaviors/#browserfetch","title":"BrowserFetch","text":"<p>This behavior, for use in web browsers, provides basic fetch support through the browser's fetch global method. It replaces any other registered observers on the send moment by default, but this can be controlled via the props. Remember, when registering observers on the send moment only the first one will be used so not replacing</p> <p>For fetch configuration in nodejs please see @pnp/nodejs behaviors.</p> <pre><code>import { BrowserFetch } from \"@pnp/queryable\";\n\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi(...).using(BrowserFetch());\n\nconst webInfo = await sp.webs();\n</code></pre> <pre><code>import { BrowserFetch } from \"@pnp/queryable\";\n\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi(...).using(BrowserFetch({ replace: false }));\n\nconst webInfo = await sp.webs();\n</code></pre>"},{"location":"queryable/behaviors/#browserfetchwithretry","title":"BrowserFetchWithRetry","text":"<p>This behavior makes fetch requests but will attempt to retry the request on certain failures such as throttling.</p> <pre><code>import { BrowserFetchWithRetry } from \"@pnp/queryable\";\n\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi(...).using(BrowserFetchWithRetry());\n\nconst webInfo = await sp.webs();\n</code></pre> <p>You can also control how the behavior works through its props. The <code>replace</code> value works as described above for BrowserFetch. <code>interval</code> specifies the initial dynamic back off value in milliseconds. This value is ignored if a \"Retry-After\" header exists in the response. <code>retries</code> indicates the number of times to retry before failing the request, the default is 3. A default of 3 will result in up to 4 total requests being the initial request and threee potential retries.</p> <pre><code>import { BrowserFetchWithRetry } from \"@pnp/queryable\";\n\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi(...).using(BrowserFetchWithRetry({\n    retries: 2,\n    interval: 400,\n    replace: true,\n}));\n\nconst webInfo = await sp.webs();\n</code></pre>"},{"location":"queryable/behaviors/#caching","title":"Caching","text":"<p>This behavior allows you to cache the results of get requests in either session or local storage. If neither is available (such as in Nodejs) the library will shim using an in memory map. It is a good idea to include caching in your projects to improve performance. By default items in the cache will expire after 5 minutes.</p> <pre><code>import { Caching } from \"@pnp/queryable\";\n\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi(...).using(Caching());\n\n// caching will save the data into session storage on the first request - the key is based on the full url including query strings\nconst webInfo = await sp.webs();\n\n// caching will retriece this value from the cache saving a network requests the second time it is loaded (either in the same page, a reload of the page, etc.)\nconst webInfo2 = await sp.webs();\n</code></pre>"},{"location":"queryable/behaviors/#custom-key-function","title":"Custom Key Function","text":"<p>You can also supply custom functionality to control how keys are generated and calculate the expirations.</p> <p>The cache key factory has the form <code>(url: string) =&gt; string</code> and you must ensure your keys are unique enough that you won't have collisions.</p> <p>The expire date factory has the form <code>(url: string) =&gt; Date</code> and should return the Date when the cached data should expire. If you know that some particular data won't expire often you can set this date far in the future, or for more frequently updated information you can set it lower. If you set the expiration too short there is no reason to use caching as any stored information will likely always be expired. Additionally, you can set the storage to use local storage which will persist across sessions.</p> <p>Note that for sp.search() requests if you want to specify a key you will need to use the CacheKey behavior below, the keyFactory value will be overwritten</p> <pre><code>import { getHashCode, PnPClientStorage, dateAdd, TimelinePipe } from \"@pnp/core\";\nimport { Caching } from \"@pnp/queryable\";\n\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi(...).using(Caching({\n    store: \"local\",\n    // use a hascode for the key\n    keyFactory: (url) =&gt; getHashCode(url.toLowerCase()).toString(),\n    // cache for one minute\n    expireFunc: (url) =&gt; dateAdd(new Date(), \"minute\", 1),\n}));\n\n// caching will save the data into session storage on the first request - the key is based on the full url including query strings\nconst webInfo = await sp.webs();\n\n// caching will retriece this value from the cache saving a network requests the second time it is loaded (either in the same page, a reload of the page, etc.)\nconst webInfo2 = await sp.webs();\n</code></pre> <p>As with any behavior you have the option to only apply caching to certain requests:</p> <pre><code>import { getHashCode, dateAdd } from \"@pnp/core\";\nimport { Caching } from \"@pnp/queryable\";\n\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/items\";\n\nconst sp = spfi(...);\n\n// caching will only apply to requests using `cachingList` as the base of the fluent chain\nconst cachingList = sp.web.lists.getByTitle(\"{List Title}\").using(Caching());\n\n// caching will save the data into session storage on the first request - the key is based on the full url including query strings\nconst itemsInfo = await cachingList.items();\n\n// caching will retriece this value from the cache saving a network requests the second time it is loaded (either in the same page, a reload of the page, etc.)\nconst itemsInfo2 = await cachingList.items();\n</code></pre>"},{"location":"queryable/behaviors/#bindcachingcore","title":"bindCachingCore","text":"<p>Added in 3.10.0</p> <p>The <code>bindCachingCore</code> method is supplied to allow all caching behaviors to share a common logic around the handling of ICachingProps. Usage of this function is not required to build your own caching method. However, it does provide consistent logic and will incoroporate any future enhancements. It can be used to create your own caching behavior. Here we show how we use the binding function within <code>Caching</code> as a basic example.</p> <p>The <code>bindCachingCore</code> method is designed for use in a <code>pre</code> observer and the first two parameters are the url and init passed to pre. The third parameter is an optional Partial. It returns a tuple with three values. The first is a calculated value indicating if this request should be cached based on the internal default logic of the library, you can use this value in conjunction with your own logic. The second value is a function that will get a cached value, note no key is passed - the key is calculated and held within <code>bindCachingCore</code>. The third value is a function to which you pass a value to cache. The key and expiration are similarly calculated and held within <code>bindCachingCore</code>. <pre><code>import { TimelinePipe } from \"@pnp/core\";\nimport { bindCachingCore, ICachingProps, Queryable } from \"@pnp/queryable\";\n\nexport function Caching(props?: ICachingProps): TimelinePipe&lt;Queryable&gt; {\n\n    return (instance: Queryable) =&gt; {\n\n        instance.on.pre(async function (this: Queryable, url: string, init: RequestInit, result: any): Promise&lt;[string, RequestInit, any]&gt; {\n\n            const [shouldCache, getCachedValue, setCachedValue] = bindCachingCore(url, init, props);\n\n            // only cache get requested data or where the CacheAlways header is present (allows caching of POST requests)\n            if (shouldCache) {\n\n                const cached = getCachedValue();\n\n                 // we need to ensure that result stays \"undefined\" unless we mean to set null as the result\n                 if (cached === null) {\n\n                    // if we don't have a cached result we need to get it after the request is sent. Get the raw value (un-parsed) to store into cache\n                    this.on.post(async function (url: URL, result: any) {\n                        setCachedValue(result);\n                        return [url, result];\n                    });\n\n                } else {\n                    result = cached;\n                }\n            }\n\n            return [url, init, result];\n        });\n\n        return instance;\n    };\n}\n</code></pre>"},{"location":"queryable/behaviors/#cachekey","title":"CacheKey","text":"<p>Added in 3.5.0</p> <p>This behavior allows you to set a pre-determined cache key for a given request. It needs to be used PER request otherwise the value will be continuously overwritten.</p> <pre><code>import { Caching, CacheKey } from \"@pnp/queryable\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\n\nconst sp = spfi(...).using(Caching());\n\n// note the application of the behavior on individual requests, if you share a CacheKey behavior across requests you'll encounter conflicts\nconst webInfo = await sp.web.using(CacheKey(\"MyWebInfoCacheKey\"))();\n\nconst listsInfo = await sp.web.lists.using(CacheKey(\"MyListsInfoCacheKey\"))();\n</code></pre>"},{"location":"queryable/behaviors/#cachealways","title":"CacheAlways","text":"<p>Added in 3.8.0</p> <p>This behavior allows you to force caching for a given request. This should not be used for update/create operations as the request will not execute if a result is found in the cache</p> <pre><code>import { Caching, CacheAlways } from \"@pnp/queryable\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\n\nconst sp = spfi(...).using(Caching());\n\nconst webInfo = await sp.web.using(CacheAlways())();\n</code></pre>"},{"location":"queryable/behaviors/#cachenever","title":"CacheNever","text":"<p>Added in 3.10.0</p> <p>This behavior allows you to force skipping caching for a given request.</p> <pre><code>import { Caching, CacheNever } from \"@pnp/queryable\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\n\nconst sp = spfi(...).using(Caching());\n\nconst webInfo = await sp.web.using(CacheNever())();\n</code></pre>"},{"location":"queryable/behaviors/#caching-pessimistic-refresh","title":"Caching Pessimistic Refresh","text":"<p>This behavior is slightly different than our default Caching behavior in that it will always return the cached value if there is one, but also asyncronously update the cached value in the background. Like the default CAchine behavior it allows you to cache the results of get requests in either session or local storage. If neither is available (such as in Nodejs) the library will shim using an in memory map.</p> <p>If you do not provide an expiration function then the cache will be updated asyncronously on every call, if you do provide an expiration then the cached value will only be updated, although still asyncronously, only when the cache has expired.</p> <pre><code>import { CachingPessimisticRefresh } from \"@pnp/queryable\";\n\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi(...).using(CachingPessimisticRefresh());\n\n// caching will save the data into session storage on the first request - the key is based on the full url including query strings\nconst webInfo = await sp.webs();\n\n// caching will retriece this value from the cache saving a network requests the second time it is loaded (either in the same page, a reload of the page, etc.)\nconst webInfo2 = await sp.webs();\n</code></pre> <p>Again as with the default Caching behavior you can provide custom functions for key generation and expiration. Please see the Custom Key Function documentation above for more details.</p>"},{"location":"queryable/behaviors/#injectheaders","title":"InjectHeaders","text":"<p>Adds any specified headers to a given request. Can be used multiple times with a timeline. The supplied headers are added to all requests, and last applied wins - meaning if two InjectHeaders are included in the pipeline which inlcude a value for the same header, the second one applied will be used.</p> <pre><code>import { InjectHeaders } from \"@pnp/queryable\";\n\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi(...).using(InjectHeaders({\n    \"X-Something\": \"a value\",\n    \"MyCompanySpecialAuth\": \"special company token\",\n}));\n\nconst webInfo = await sp.webs();\n</code></pre>"},{"location":"queryable/behaviors/#parsers","title":"Parsers","text":"<p>Parsers convert the returned fetch Response into something usable. We have included the most common parsers we think you'll need - but you can always write your own parser based on the signature of the parse moment.</p> <p>All of these parsers when applied through using will replace any other observers on the parse moment.</p>"},{"location":"queryable/behaviors/#defaultparse","title":"DefaultParse","text":"<p>Performs error handling and parsing of JSON responses. This is the one you'll use for most of your requests and it is included in all the defaults.</p> <pre><code>import { DefaultParse } from \"@pnp/queryable\";\n\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi(...).using(DefaultParse());\n\nconst webInfo = await sp.webs();\n</code></pre>"},{"location":"queryable/behaviors/#textparse","title":"TextParse","text":"<p>Checks for errors and parses the results as text with no further manipulation.</p> <pre><code>import { TextParse } from \"@pnp/queryable\";\n\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi(...).using(TextParse());\n</code></pre>"},{"location":"queryable/behaviors/#blobparse","title":"BlobParse","text":"<p>Checks for errors and parses the results a Blob with no further manipulation.</p> <pre><code>import { BlobParse } from \"@pnp/queryable\";\n\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi(...).using(BlobParse());\n</code></pre>"},{"location":"queryable/behaviors/#jsonparse","title":"JSONParse","text":"<p>Checks for errors and parses the results as JSON with no further manipulation. Meaning you will get the raw JSON response vs DefaultParse which will remove wrapping JSON.</p> <pre><code>import { JSONParse } from \"@pnp/queryable\";\n\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi(...).using(JSONParse());\n</code></pre>"},{"location":"queryable/behaviors/#bufferparse","title":"BufferParse","text":"<p>Checks for errors and parses the results a Buffer with no further manipulation.</p> <pre><code>import { BufferParse } from \"@pnp/queryable\";\n\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi(...).using(BufferParse());\n</code></pre>"},{"location":"queryable/behaviors/#headerparse","title":"HeaderParse","text":"<p>Checks for errors and parses the headers of the Response as the result. This is a specialised parses which can be used in those infrequent scenarios where you need information from the headers of a response.</p> <pre><code>import { HeaderParse } from \"@pnp/queryable\";\n\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi(...).using(HeaderParse());\n</code></pre>"},{"location":"queryable/behaviors/#jsonheaderparse","title":"JSONHeaderParse","text":"<p>Checks for errors and parses the headers of the Respnose as well as the JSON and returns an object with both values.</p> <pre><code>import { JSONHeaderParse } from \"@pnp/queryable\";\n\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi(...).using(JSONHeaderParse());\n\n...sp.data\n...sp.headers\n</code></pre>"},{"location":"queryable/behaviors/#resolvers","title":"Resolvers","text":"<p>These two behaviors are special and should always be included when composing your own defaults. They implement the expected behavior of resolving or rejecting the promise returned when executing a timeline. They are implemented as behaviors should there be a need to do something different the logic is not locked into the core of the library.</p>"},{"location":"queryable/behaviors/#resolveondata-rejectonerror","title":"ResolveOnData, RejectOnError","text":"<pre><code>import { ResolveOnData, RejectOnError } from \"@pnp/queryable\";\n\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi(...).using(ResolveOnData(), RejectOnError());\n</code></pre>"},{"location":"queryable/behaviors/#timeout","title":"Timeout","text":"<p>The Timeout behavior allows you to include a timeout in requests. You can specify either a number, representing the number of milliseconds until the request should timeout or an AbortSignal.</p> <p>In Nodejs you will need to polyfill <code>AbortController</code> if your version (&lt;15) does not include it when using Timeout and passing a number. If you are supplying your own AbortSignal you do not.</p> <pre><code>import { Timeout } from \"@pnp/queryable\";\n\nimport \"@pnp/sp/webs\";\n\n// requests should timeout in 5 seconds\nconst sp = spfi(...).using(Timeout(5000));\n</code></pre> <pre><code>import { Timeout } from \"@pnp/queryable\";\n\nimport \"@pnp/sp/webs\";\n\nconst controller = new AbortController();\n\nconst sp = spfi(...).using(Timeout(controller.signal));\n\n// abort requests after 6 seconds using our own controller\nconst timer = setTimeout(() =&gt; {\n    controller.abort();\n}, 6000);\n\n// this request will be cancelled if it doesn't complete in 6 seconds\nconst webInfo = await sp.webs();\n\n// be a good citizen and cancel unneeded timers\nclearTimeout(timer);\n</code></pre>"},{"location":"queryable/behaviors/#cancelable","title":"Cancelable","text":"<p>Updated as Beta 2 in 3.5.0</p> <p>This behavior allows you to cancel requests before they are complete. It is similar to timeout however you control when and if the request is canceled. Please consider this behavior as beta while we work to stabalize the functionality.</p>"},{"location":"queryable/behaviors/#known-issues","title":"Known Issues","text":"<ul> <li>Due to how the event loop works you may get unhandled rejections after canceling a request</li> </ul> <pre><code>import { Cancelable, CancelablePromise } from \"@pnp/queryable\";\nimport { IWebInfo } from \"@pnp/sp/webs\";\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi().using(Cancelable());\n\nconst p: CancelablePromise&lt;IWebInfo&gt; = &lt;any&gt;sp.web();\n\nsetTimeout(() =&gt; {\n\n    // you should await the cancel operation to ensure it completes\n    await p.cancel();\n}, 200);\n\n// this is awaiting the results of the request\nconst webInfo: IWebInfo = await p;\n</code></pre>"},{"location":"queryable/behaviors/#cancel-long-running-operations","title":"Cancel long running operations","text":"<p>Some operations such as chunked uploads that take longer to complete are good candidates for canceling based on user input such as a button select.</p> <pre><code>import { Cancelable, CancelablePromise } from \"@pnp/queryable\";\nimport { IFileAddResult } from \"@pnp/sp/files\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/files\";\nimport \"@pnp/sp/folders\";\nimport { getRandomString } from \"@pnp/core\";\nimport { createReadStream } from \"fs\";\n\nconst sp = spfi().using(Cancelable());\n\nconst file = createReadStream(join(\"C:/some/path\", \"test.mp4\"));\n\nconst p: CancelablePromise&lt;IFileAddResult&gt; = &lt;any&gt;sp.web.getFolderByServerRelativePath(\"/sites/dev/Shared Documents\").files.addChunked(`te's't-${getRandomString(4)}.mp4`, &lt;any&gt;file);\n\nsetTimeout(() =&gt; {\n\n    // you should await the cancel operation to ensure it completes\n    await p.cancel();\n}, 10000);\n\n// this is awaiting the results of the request\nawait p;\n</code></pre>"},{"location":"queryable/extensions/","title":"Extensions","text":"<p>Extending is the concept of overriding or adding functionality into an object or environment without altering the underlying class instances. This can be useful for debugging, testing, or injecting custom functionality. Extensions work with any invokable and allow you to control any behavior of the library with extensions.</p>"},{"location":"queryable/extensions/#types-of-extensions","title":"Types of Extensions","text":"<p>There are two types of Extensions available as well as three methods for registration. You can register any type of extension with any of the registration options.</p>"},{"location":"queryable/extensions/#function-extensions","title":"Function Extensions","text":"<p>The first type is a simple function with a signature:</p> <pre><code>(op: \"apply\" | \"get\" | \"has\" | \"set\", target: T, ...rest: any[]): void\n</code></pre> <p>This function is passed the current operation as the first argument, currently one of \"apply\", \"get\", \"has\", or \"set\". The second argument is the target instance upon which the operation is being invoked. The remaining parameters vary by the operation being performed, but will match their respective ProxyHandler method signatures.</p>"},{"location":"queryable/extensions/#named-extensions","title":"Named Extensions","text":"<p>Named extensions are designed to add or replace a single property or method, though you can register multiple using the same object. These extensions are defined by using an object which has the property/methods you want to override described. Registering named extensions globally will override that operation to all invokables.</p> <pre><code>import { extendFactory } from \"@pnp/queryable\";\nimport { sp, List, Lists, IWeb, ILists, List, IList, Web } from \"@pnp/sp/presets/all\";\nimport { escapeQueryStrValue } from \"@pnp/sp/utils/escapeQueryStrValue\";\n\n// create a plain object with the props and methods we want to add/change\nconst myExtensions = {\n    // override the lists property\n    get lists(this: IWeb): ILists {\n        // we will always order our lists by title and select just the Title for ALL calls (just as an example)\n        return Lists(this).orderBy(\"Title\").select(\"Title\");\n    },\n    // override the getByTitle method\n    getByTitle: function (this: ILists, title: string): IList {\n        // in our example our list has moved, so we rewrite the request on the fly\n        if (title === \"List1\") {\n            return List(this, `getByTitle('List2')`);\n        } else {\n            // you can't at this point call the \"base\" method as you will end up in loop within the proxy\n            // so you need to ensure you patch/include any original functionality you need\n            return List(this, `getByTitle('${escapeQueryStrValue(title)}')`);\n        }\n    },\n};\n\n// register all the named Extensions\nextendFactory(Web, myExtensions);\n\n// this will use our extension to ensure the lists are ordered\nconst lists = await sp.web.lists();\n\nconsole.log(JSON.stringify(lists, null, 2));\n\n// we will get the items from List1 but within the extension it is rewritten as List2\nconst items = await sp.web.lists.getByTitle(\"List1\").items();\n\nconsole.log(JSON.stringify(items.length, null, 2));\n</code></pre>"},{"location":"queryable/extensions/#proxyhandler-extensions","title":"ProxyHandler Extensions","text":"<p>You can also register a partial ProxyHandler implementation as an extension. You can implement one or more of the ProxyHandler methods as needed. Here we implement the same override of getByTitle globally. This is the most complicated method of creating an extension and assumes an understanding of how ProxyHandlers work.</p> <pre><code>import { extendFactory } from \"@pnp/queryable\";\nimport { sp, Lists, IWeb, ILists, Web } from \"@pnp/sp/presets/all\";\nimport { escapeQueryStrValue } from \"@pnp/sp/utils/escapeSingleQuote\";\n\nconst myExtensions = {\n    get: (target, p: string | number | symbol, _receiver: any) =&gt; {\n        switch (p) {\n            case \"getByTitle\":\n                return (title: string) =&gt; {\n\n                    // in our example our list has moved, so we rewrite the request on the fly\n                    if (title === \"LookupList\") {\n                        return List(target, `getByTitle('OrderByList')`);\n                    } else {\n                        // you can't at this point call the \"base\" method as you will end up in loop within the proxy\n                        // so you need to ensure you patch/include any original functionality you need\n                        return List(target, `getByTitle('${escapeQueryStrValue(title)}')`);\n                    }\n                };\n        }\n    },\n};\n\nextendFactory(Web, myExtensions);\n\nconst lists = sp.web.lists;\nconst items = await lists.getByTitle(\"LookupList\").items();\n\nconsole.log(JSON.stringify(items.length, null, 2));\n</code></pre>"},{"location":"queryable/extensions/#registering-extensions","title":"Registering Extensions","text":"<p>You can register Extensions on an invocable factory or on a per-object basis, and you can register a single extension or an array of Extensions.</p>"},{"location":"queryable/extensions/#factory-registration","title":"Factory Registration","text":"<p>The pattern you will likely find most useful is the ability to extend an invocable factory. This will apply your extensions to all instances created with that factory, meaning all IWebs or ILists will have the extension methods. The example below shows how to add a property to IWeb as well as a method to IList.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists/web\";\nimport { IWeb, Web } from \"@pnp/sp/webs\";\nimport { ILists, Lists } from \"@pnp/sp/lists\";\nimport { extendFactory } from \"@pnp/queryable\";\nimport { sp } from \"@pnp/sp\";\n\nconst sp = spfi().using(...);\n\n// sets up the types correctly when importing across your application\ndeclare module \"@pnp/sp/webs/types\" {\n\n    // we need to extend the interface\n    interface IWeb {\n        orderedLists: ILists;\n    }\n}\n\n// sets up the types correctly when importing across your application\ndeclare module \"@pnp/sp/lists/types\" {\n\n    // we need to extend the interface\n    interface ILists {\n        getOrderedListsQuery: (this: ILists) =&gt; ILists;\n    }\n}\n\nextendFactory(Web, {\n    // add an ordered lists property\n    get orderedLists(this: IWeb): ILists {\n        return this.lists.getOrderedListsQuery();\n    },\n});\n\nextendFactory(Lists, {\n    // add an ordered lists property\n    getOrderedListsQuery(this: ILists): ILists {\n        return this.top(10).orderBy(\"Title\").select(\"Title\");\n    },\n});\n\n// regardless of how we access the web and lists collections our extensions remain with all new instance based on\nconst web = Web([sp.web, \"https://tenant.sharepoint.com/sites/dev/\"]);\nconst lists1 = await web.orderedLists();\nconsole.log(JSON.stringify(lists1, null, 2));\n\nconst lists2 = await Web([sp.web, \"https://tenant.sharepoint.com/sites/dev/\"]).orderedLists();\nconsole.log(JSON.stringify(lists2, null, 2));\n\nconst lists3 = await sp.web.orderedLists();\nconsole.log(JSON.stringify(lists3, null, 2));\n</code></pre>"},{"location":"queryable/extensions/#instance-registration","title":"Instance Registration","text":"<p>You can also register Extensions on a single object instance, which is often the preferred approach as it will have less of a performance impact across your whole application. This is useful for debugging, overriding methods/properties, or controlling the behavior of specific object instances.</p> <p>Extensions are not transferred to child objects in a fluent chain, be sure you are extending the instance you think you are.</p> <p>Here we show the same override operation of getByTitle on the lists collection, but safely only overriding the single instance.</p> <pre><code>import { extendObj } from \"@pnp/queryable\";\nimport { sp, List, ILists } from \"@pnp/sp/presets/all\";\n\nconst myExtensions = {\n    getByTitle: function (this: ILists, title: string) {\n        // in our example our list has moved, so we rewrite the request on the fly\n        if (title === \"List1\") {\n            return List(this, \"getByTitle('List2')\");\n        } else {\n            // you can't at this point call the \"base\" method as you will end up in loop within the proxy\n            // so you need to ensure you patch/include any original functionality you need\n            return List(this, `getByTitle('${escapeQueryStrValue(title)}')`);\n        }\n    },\n};\n\nconst lists =  extendObj(sp.web.lists, myExtensions);\nconst items = await lists.getByTitle(\"LookupList\").items();\n\nconsole.log(JSON.stringify(items.length, null, 2));\n</code></pre>"},{"location":"queryable/extensions/#enable-disable-extensions-and-clear-global-extensions","title":"Enable &amp; Disable Extensions and Clear Global Extensions","text":"<p>Extensions are automatically enabled when you set an extension through any of the above outlined methods. You can disable and enable extensions on demand if needed.</p> <pre><code>import { enableExtensions, disableExtensions, clearGlobalExtensions } from \"@pnp/queryable\";\n\n// disable Extensions\ndisableExtensions();\n\n// enable Extensions\nenableExtensions();\n</code></pre>"},{"location":"queryable/queryable/","title":"@pnp/queryable/queryable","text":"<p>Queryable is the base class for both the sp and graph fluent interfaces and provides the structure to which observers are registered. As a background to understand more of the mechanics please see the articles on Timeline, moments, and observers. For reuse it is recommended to compose your observer registrations with behaviors.</p>"},{"location":"queryable/queryable/#queryable-constructor","title":"Queryable Constructor","text":"<p>By design the library is meant to allow creating the next part of a url from the current part. In this way each queryable instance is built from a previous instance. As such understanding the Queryable constructor's behavior is important. The constructor takes two parameters, the first required and the second optional.</p> <p>The first parameter can be another queryable, a string, or a tuple of [Queryable, string].</p> Parameter Behavior Queryable The new queryable inherits all of the supplied queryable's observers. Any supplied path (second constructor param) is appended to the supplied queryable's url becoming the url of the newly constructed queryable string The new queryable will have NO registered observers. Any supplied path (second constructor param) is appended to the string becoming the url of the newly constructed queryable [Queryable, string] The observers from the supplied queryable are used by the new queryable. The url is a combination of the second tuple argument (absolute url string) and any supplied path. <p>The tuple constructor call can be used to rebase a queryable to call a different host in an otherwise identical way to another queryable. When using the tuple constructor the url provided must be absolute.</p>"},{"location":"queryable/queryable/#examples","title":"Examples","text":"<pre><code>// represents a fully configured queryable with url and registered observers\n// url: https://something.com\nconst baseQueryable;\n\n// child1 will:\n// - reference the observers of baseQueryable\n// - have a url of \"https://something.com/subpath\"\nconst child1 = Child(baseQueryable, \"subpath\");\n\n// child2 will:\n// - reference the observers of baseQueryable\n// - have a url of \"https://something.com\"\nconst child2 = Child(baseQueryable);\n\n// nonchild1 will:\n// - have NO registered observers or connection to baseQueryable\n// - have a url of \"https://somethingelse.com\"\nconst nonchild1 = Child(\"https://somethingelse.com\");\n\n// nonchild2 will:\n// - have NO registered observers or connection to baseQueryable\n// - have a url of \"https://somethingelse.com/subpath\"\nconst nonchild2 = Child(\"https://somethingelse.com\", \"subpath\");\n\n// rebased1 will:\n// - reference the observers of baseQueryable\n// - have a url of \"https://somethingelse.com\"\nconst rebased1 = Child([baseQueryable, \"https://somethingelse.com\"]);\n\n// rebased2 will:\n// - reference the observers of baseQueryable\n// - have a url of \"https://somethingelse.com/subpath\"\nconst rebased2 = Child([baseQueryable, \"https://somethingelse.com\"], \"subpath\");\n</code></pre>"},{"location":"queryable/queryable/#queryable-lifecycle","title":"Queryable Lifecycle","text":"<p>The Queryable lifecycle is:</p> <ul> <li><code>construct</code> (Added in 3.5.0)</li> <li><code>init</code></li> <li><code>pre</code></li> <li><code>auth</code></li> <li><code>send</code></li> <li><code>parse</code></li> <li><code>post</code></li> <li><code>data</code></li> <li><code>dispose</code></li> </ul> <p>As well <code>log</code> and <code>error</code> can emit at any point during the lifecycle.</p>"},{"location":"queryable/queryable/#no-observers-registered-for-this-request","title":"No observers registered for this request","text":"<p>If you see an error thrown with the message <code>No observers registered for this request.</code> it means at the time of execution the given object has no actions to take. Because all the request logic is defined within observers, an absence of observers is likely an error condition. If the object was created by a method within the library please report an issue as it is likely a bug. If you created the object through direct use of one of the factory functions, please be sure you have registered observers with <code>using</code> or <code>on</code> as appropriate. More information on observers is available in this article.</p> <p>If you for some reason want to execute a queryable with no registred observers, you can simply register a noop observer to any of the moments.</p>"},{"location":"queryable/queryable/#queryable-observers","title":"Queryable Observers","text":"<p>This section outlines how to write observers for the Queryable lifecycle, and the expectations of each moment's observer behaviors.</p> <p>In the below samples consider the variable <code>query</code> to mean any valid Queryable derived object.</p>"},{"location":"queryable/queryable/#log","title":"log","text":"<p>Anything can log to a given timeline's log using the public <code>log</code> method and to intercept those message you can subscribed to the log event.</p> <p>The <code>log</code> observer's signature is: <code>(this: Timeline&lt;T&gt;, message: string, level: number) =&gt; void</code></p> <pre><code>query.on.log((message, level) =&gt; {\n\n    // log only warnings or errors\n    if (level &gt; 1) {\n        console.log(message);\n    }\n});\n</code></pre> <p>The level value is a number indicating the severity of the message. Internally we use the values from the LogLevel enum in @pnp/logging: Verbose = 0, Info = 1, Warning = 2, Error = 3. Be aware that nothing enforces those values other than convention and log can be called with any value for level.</p> <p>As well we provide easy support to use PnP logging within a Timeline derived class:</p> <pre><code>import { LogLevel, PnPLogging } from \"@pnp/logging\";\n\n// any messages of LogLevel Info or higher (1) will be logged to all subscribers of the logging framework\nquery.using(PnPLogging(LogLevel.Info));\n</code></pre> <p>More details on the pnp logging framework</p>"},{"location":"queryable/queryable/#error","title":"error","text":"<p>Errors can happen at anytime and for any reason. If you are using the <code>RejectOnError</code> behavior, and both sp and graph include that in the defaults, the request promise will be rejected as expected and you can handle the error that way.</p> <p>The <code>error</code> observer's signature is: <code>(this: Timeline&lt;T&gt;, err: string | Error) =&gt; void</code></p> <pre><code>import { spfi, DefaultInit, DefaultHeaders } from \"@pnp/sp\";\nimport { BrowserFetchWithRetry, DefaultParse } from \"@pnp/queryable\";\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi().using(DefaultInit(), DefaultHeaders(), BrowserFetchWithRetry(), DefaultParse());\n\ntry {\n\n    const result = await sp.web();\n\n} catch(e) {\n\n    // any errors emitted will result in the promise being rejected\n    // and ending up in the catch block as expected\n}\n</code></pre> <p>In addition to the default behavior you can register your own observers on <code>error</code>, though it is recommended you leave the default behavior in place.</p> <pre><code>query.on.error((err) =&gt; {\n\n    if (err) {\n        console.error(err);\n        // do other stuff with the error (send it to telemetry)\n    }\n});\n</code></pre>"},{"location":"queryable/queryable/#construct","title":"construct","text":"<p>Added in 3.5.0</p> <p>This moment exists to assist behaviors that need to transfer some information from a parent to a child through the fluent chain. We added this to support cancelable scopes for the Cancelable behavior, but it may have other uses. It is invoked AFTER the new instance is fully realized via <code>new</code> and supplied with the parameters used to create the new instance. As with all moments the \"this\" within the observer is the current (NEW) instance.</p> <p>For your observers on the construct method to work correctly they must be registered before the instance is created.</p> <p>The construct moment is NOT async and is designed to support simple operations.</p> <pre><code>query.on.construct(function (this: Queryable, init: QueryableInit, path?: string): void {\n    if (typeof init !== \"string\") {\n\n        // get a ref to the parent Queryable instance used to create this new instance\n        const parent = isArray(init) ? init[0] : init;\n\n        if (Reflect.has(parent, \"SomeSpecialValueKey\")) {\n\n            // copy that specail value to the new child\n            this[\"SomeSpecialValueKey\"] = parent[\"SomeSpecialValueKey\"];\n        }\n    }     \n});\n\nquery.on.pre(async function(url, init, result) {\n\n    // we have access to the copied special value throughout the lifecycle\n    this.log(this[\"SomeSpecialValueKey\"]);\n\n    return [url, init, result];\n});\n\nquery.on.dispose(() =&gt; {\n\n    // be a good citizen and clean up your behavior's values when you're done\n    delete this[\"SomeSpecialValueKey\"];\n});\n</code></pre>"},{"location":"queryable/queryable/#init","title":"init","text":"<p>Along with <code>dispose</code>, <code>init</code> is a special moment that occurs before any of the other lifecycle providing a first chance at doing any tasks before the rest of the lifecycle starts. It is not await aware so only sync operations are supported in init by design.</p> <p>The <code>init</code> observer's signature is: <code>(this: Timeline&lt;T&gt;) =&gt; void</code></p> <p>In the case of init you manipulate the Timeline instance itself</p> <pre><code>query.on.init(function (this: Queryable) {\n\n    // init is a great place to register additioanl observers ahead of the lifecycle\n    this.on.pre(async function (this: Quyerable, url, init, result) {\n        // stuff happens\n        return [url, init, result];\n    });\n});\n</code></pre>"},{"location":"queryable/queryable/#pre","title":"pre","text":"<p>Pre is used by observers to configure the request before sending. Note there is a dedicated auth moment which is prefered by convention to handle auth related tasks.</p> <p>The <code>pre</code> observer's signature is: <code>(this: IQueryable, url: string, init: RequestInit, result: any) =&gt; Promise&lt;[string, RequestInit, any]&gt;</code></p> <p>The <code>pre</code>, <code>auth</code>, <code>parse</code>, and <code>post</code> are asyncReduce moments, meaning you are expected to always asyncronously return a tuple of the arguments supplied to the function. These are then passed to the next observer registered to the moment.</p> <p>Example of when to use pre are updates to the init, caching scenarios, or manipulation of the url (ensuring it is absolute). The init passed to pre (and auth) is the same object that will be eventually passed to fetch, meaning you can add any properties/congifuration you need. The result should always be left undefined unless you intend to end the lifecycle. If pre completes and result has any value other than undefined that value will be emitted to <code>data</code> and the timeline lifecycle will end.</p> <pre><code>query.on.pre(async function(url, init, result) {\n\n    init.cache = \"no-store\";\n\n    return [url, init, result];\n});\n\nquery.on.pre(async function(url, init, result) {\n\n    // setting result causes no moments after pre to be emitted other than data\n    // once data is emitted (resolving the request promise by default) the lifecycle ends\n    result = \"My result\";\n\n    return [url, init, result];\n});\n</code></pre>"},{"location":"queryable/queryable/#auth","title":"auth","text":"<p>Auth functions very much like <code>pre</code> except it does not have the option to set the result, and the url is considered immutable by convention. Url manipulation should be done in pre. Having a seperate moment for auth allows for easily changing auth specific behavior without having to so a lot of complicated parsing of <code>pre</code> observers.</p> <p>The <code>auth</code> observer's signature is: <code>(this: IQueryable, url: URL, init: RequestInit) =&gt; Promise&lt;[URL, RequestInit]&gt;</code>.</p> <p>The <code>pre</code>, <code>auth</code>, <code>parse</code>, and <code>post</code> are asyncReduce moments, meaning you are expected to always asyncronously return a tuple of the arguments supplied to the function. These are then passed to the next observer registered to the moment.</p> <pre><code>query.on.auth(async function(url, init) {\n\n    // some code to get a token\n    const token = getToken();\n\n    init.headers[\"Authorization\"] = `Bearer ${token}`;\n\n    return [url, init];\n});\n</code></pre>"},{"location":"queryable/queryable/#send","title":"send","text":"<p>Send is implemented using the request moment which uses the first registered observer and invokes it expecting an async Response.</p> <p>The <code>send</code> observer's signature is: <code>(this: IQueryable, url: URL, init: RequestInit) =&gt; Promise&lt;Response&gt;</code>.</p> <pre><code>query.on.send(async function(url, init) {\n\n    // this could represent reading a file, querying a database, or making a web call\n    return fetch(url.toString(), init);\n});\n</code></pre>"},{"location":"queryable/queryable/#parse","title":"parse","text":"<p>Parse is responsible for turning the raw Response into something usable. By default we handle errors and parse JSON responses, but any logic could be injected here. Perhaps your company encrypts things and you need to decrypt them before parsing further.</p> <p>The <code>parse</code> observer's signature is: <code>(this: IQueryable, url: URL, response: Response, result: any | undefined) =&gt; Promise&lt;[URL, Response, any]&gt;</code>.</p> <p>The <code>pre</code>, <code>auth</code>, <code>parse</code>, and <code>post</code> are asyncReduce moments, meaning you are expected to always asyncronously return a tuple of the arguments supplied to the function. These are then passed to the next observer registered to the moment.</p> <pre><code>// you should be careful running multiple parse observers so we replace with our functionality\n// remember every registered observer is run, so if you set result and a later observer sets a\n// different value last in wins.\nquery.on.parse.replace(async function(url, response, result) {\n\n    if (response.ok) {\n\n        result = await response.json();\n\n    } else {\n\n        // just an example\n        throw Error(response.statusText);\n    }\n\n    return [url, response, result];\n});\n</code></pre>"},{"location":"queryable/queryable/#post","title":"post","text":"<p>Post is run after parse, meaning you should have a valid fully parsed result, and provides a final opportunity to do caching, some final checks, or whatever you might need immediately prior to the request promise resolving with the value. It is recommened to NOT manipulate the result within post though nothing prevents you from doing so.</p> <p>The <code>post</code> observer's signature is: <code>(this: IQueryable, url: URL, result: any | undefined) =&gt; Promise&lt;[URL, any]&gt;</code>.</p> <p>The <code>pre</code>, <code>auth</code>, <code>parse</code>, and <code>post</code> are asyncReduce moments, meaning you are expected to always asyncronously return a tuple of the arguments supplied to the function. These are then passed to the next observer registered to the moment.</p> <pre><code>query.on.post(async function(url, result) {\n\n    // here we do some caching of a result\n    const key = hash(url);\n    cache(key, result);   \n\n    return [url, result];\n});\n</code></pre>"},{"location":"queryable/queryable/#data","title":"data","text":"<p>Data is called with the result of the Queryable lifecycle produced by <code>send</code>, understood by <code>parse</code>, and passed through <code>post</code>. By default the request promise will resolve with the value, but you can add any additional observers you need.</p> <p>The <code>data</code> observer's signature is: <code>(this: IQueryable, result: T) =&gt; void</code>.</p> <p>Clearing the data moment (ie. .on.data.clear()) after the lifecycle has started will result in the request promise never resolving</p> <pre><code>query.on.data(function(result) {\n\n    console.log(`Our result! ${JSON.stringify(result)}`);\n});\n</code></pre>"},{"location":"queryable/queryable/#dispose","title":"dispose","text":"<p>Along with <code>init</code>, <code>dispose</code> is a special moment that occurs after all other lifecycle moments have completed. It is not await aware so only sync operations are supported in dispose by design.</p> <p>The <code>dispose</code> observer's signature is: <code>(this: Timeline&lt;T&gt;) =&gt; void</code></p> <p>In the case of dispose you manipulate the Timeline instance itself</p> <pre><code>query.on.dispose(function (this: Queryable) {\n\n    // maybe your queryable calls a database?\n    db.connection.close();\n});\n</code></pre>"},{"location":"queryable/queryable/#other-methods","title":"Other Methods","text":"<p>Queryable exposes some additional methods beyond the observer registration.</p>"},{"location":"queryable/queryable/#concat","title":"concat","text":"<p>Appends the supplied string to the url without mormalizing slashes.</p> <pre><code>// url: something.com/items\nquery.concat(\"(ID)\");\n// url: something.com/items(ID)\n</code></pre>"},{"location":"queryable/queryable/#torequesturl","title":"toRequestUrl","text":"<p>Converts the queryable's internal url parameters (url and query) into a relative or absolute url.</p> <pre><code>const s = query.toRequestUrl();\n</code></pre>"},{"location":"queryable/queryable/#query","title":"query","text":"<p>Map used to manage any query string parameters that will be included. Anything added here will be represented in <code>toRequestUrl</code>'s output.</p> <pre><code>query.query.add(\"$select\", \"Title\");\n</code></pre>"},{"location":"queryable/queryable/#tourl","title":"toUrl","text":"<p>Returns the url currently represented by the Queryable, without the querystring part</p> <pre><code>const s = query.toUrl();\n</code></pre>"},{"location":"sp/alias-parameters/","title":"@pnp/sp - Aliased Parameters","text":"<p>Within the @pnp/sp api you can alias any of the parameters so they will be written into the querystring. This is most helpful if you are hitting up against the url length limits when working with files and folders.</p> <p>To alias a parameter you include the label name, a separator (\"::\") and the value in the string. You also need to prepend a \"!\" to the string to trigger the replacement. You can see this below, as well as the string that will be generated. Labels must start with a \"@\" followed by a letter. It is also your responsibility to ensure that the aliases you supply do not conflict, for example if you use \"@p1\" you should use \"@p2\" for a second parameter alias in the same query.</p>"},{"location":"sp/alias-parameters/#construct-a-parameter-alias","title":"Construct a parameter alias","text":"<p>Pattern: !@{label name}::{value}</p> <p>Example: \"!@p1::\\sites\\dev\" or \"!@p2::\\text.txt\"</p>"},{"location":"sp/alias-parameters/#example-without-aliasing","title":"Example without aliasing","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/files\";\nimport \"@pnp/sp/folders\";\nconst sp = spfi(...);\n\n// still works as expected, no aliasing\nconst query = sp.web.getFolderByServerRelativeUrl(\"/sites/dev/Shared Documents/\").files.select(\"Title\").top(3);\n\nconsole.log(query.toUrl()); // _api/web/getFolderByServerRelativeUrl('/sites/dev/Shared Documents/')/files\nconsole.log(query.toRequestUrl()); // _api/web/getFolderByServerRelativeUrl('/sites/dev/Shared Documents/')/files?$select=Title&amp;$top=3\n\nconst r = await query();\nconsole.log(r);\n</code></pre>"},{"location":"sp/alias-parameters/#example-with-aliasing","title":"Example with aliasing","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/files\";\nimport \"@pnp/sp/folders\";\n\nconst sp = spfi(...);\n\n// same query with aliasing\nconst query = sp.web.getFolderByServerRelativeUrl(\"!@p1::/sites/dev/Shared Documents/\").files.select(\"Title\").top(3);\n\nconsole.log(query.toUrl()); // _api/web/getFolderByServerRelativeUrl('!@p1::/sites/dev/Shared Documents/')/files\nconsole.log(query.toRequestUrl()); // _api/web/getFolderByServerRelativeUrl(@p1)/files?@p1='/sites/dev/Shared Documents/'&amp;$select=Title&amp;$top=3\n\nconst r = await query();\nconsole.log(r);\n</code></pre>"},{"location":"sp/alias-parameters/#example-with-aliasing-and-batching","title":"Example with aliasing and batching","text":"<p>Aliasing is supported with batching as well:</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi(...);\n\n// same query with aliasing and batching\nconst [batchedWeb, execute] = await sp.web.batched();\n\nconst query = batchedWeb.web.getFolderByServerRelativePath(\"!@p1::/sites/dev/Shared Documents/\").files.select(\"Title\").top(3);\n\nconsole.log(query.toUrl()); // _api/web/getFolderByServerRelativeUrl('!@p1::/sites/dev/Shared Documents/')/files\nconsole.log(query.toRequestUrl()); // _api/web/getFolderByServerRelativeUrl(@p1)/files?@p1='/sites/dev/Shared Documents/'&amp;$select=Title&amp;$top=3\n\nquery().then(r =&gt; {\n\n    console.log(r);\n});\n\nexecute();\n</code></pre>"},{"location":"sp/alm/","title":"@pnp/sp/appcatalog","text":"<p>The ALM api allows you to manage app installations both in the tenant app catalog and individual site app catalogs. Some of the methods are still in beta and as such may change in the future. This article outlines how to call this api using @pnp/sp. Remember all these actions are bound by permissions so it is likely most users will not have the rights to perform these ALM actions.</p>"},{"location":"sp/alm/#understanding-the-app-catalog-hierarchy","title":"Understanding the App Catalog Hierarchy","text":"<p>Before you begin provisioning applications it is important to understand the relationship between a local web catalog and the tenant app catalog. Some of the methods described below only work within the context of the tenant app catalog web, such as adding an app to the catalog and the app actions retract, remove, and deploy. You can install, uninstall, and upgrade an app in any web. Read more in the official documentation.</p>"},{"location":"sp/alm/#referencing-an-app-catalog","title":"Referencing an App Catalog","text":"<p>There are several ways using @pnp/sp to get a reference to an app catalog. These methods are to provide you the greatest amount of flexibility in gaining access to the app catalog. Ultimately each method produces an AppCatalog instance differentiated only by the web to which it points.</p>"},{"location":"sp/alm/#get-tenant-app-catalog","title":"Get tenant app catalog","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/appcatalog\";\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi(...);\n\n// get the current context web's app catalog\n// this will be the site collection app catalog\nconst availableApps = await sp.tenantAppcatalog();\n</code></pre>"},{"location":"sp/alm/#get-site-collection-appcatalog","title":"Get site collection AppCatalog","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/appcatalog\";\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi(...);\n\n// get the current context web's app catalog\nconst availableApps = await sp.web.appcatalog();\n</code></pre>"},{"location":"sp/alm/#get-site-collection-appcatalog-by-url","title":"Get site collection AppCatalog by URL","text":"<p>If you know the url of the site collection whose app catalog you want you can use the following code. First you need to use one of the methods to access a web. Once you have the web instance you can call the <code>.appcatalog</code> property on that web instance.</p> <p>If a given site collection does not have an app catalog trying to access it will throw an error.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { Web } from '@pnp/sp/webs';\n\nconst sp = spfi(...);\nconst web = Web([sp.web, \"https://mytenant.sharepoint.com/sites/mysite\"]);\nconst catalog = await web.appcatalog();\n</code></pre> <p>The following examples make use of a variable \"catalog\" which is assumed to represent an AppCatalog instance obtained using one of the above methods, supporting code is omitted for brevity.</p>"},{"location":"sp/alm/#list-available-apps","title":"List Available Apps","text":"<p>The AppCatalog is itself a queryable collection so you can query this object directly to get a list of available apps. Also, the odata operators work on the catalog to sort, filter, and select.</p> <pre><code>// get available apps\nawait catalog();\n\n// get available apps selecting two fields\nawait catalog.select(\"Title\", \"Deployed\")();\n</code></pre>"},{"location":"sp/alm/#add-an-app","title":"Add an App","text":"<p>This action must be performed in the context of the tenant app catalog</p> <p></p> <pre><code>// this represents the file bytes of the app package file\nconst blob = new Blob();\n\n// there is an optional third argument to control overwriting existing files\nconst r = await catalog.add(\"myapp.app\", blob);\n\n// this is at its core a file add operation so you have access to the response data as well\n// as a File instance representing the created file\nconsole.log(JSON.stringify(r.data, null, 4));\n\n// all file operations are available\nconst nameData = await r.file.select(\"Name\")();\n</code></pre>"},{"location":"sp/alm/#get-an-app","title":"Get an App","text":"<p>You can get the details of a single app by GUID id. This is also the branch point to perform specific app actions</p> <pre><code>const app = await catalog.getAppById(\"5137dff1-0b79-4ebc-8af4-ca01f7bd393c\")();\n</code></pre>"},{"location":"sp/alm/#perform-app-actions","title":"Perform app actions","text":"<p>Remember: retract, deploy, and remove only work in the context of the tenant app catalog web. All of these methods return void and you can monitor success by wrapping the call in a try/catch block.</p> <pre><code>const myAppId = \"5137dff1-0b79-4ebc-8af4-ca01f7bd393c\";\n\n// deploy\nawait catalog.getAppById(myAppId).deploy();\n\n// retract\nawait catalog.getAppById(myAppId).retract();\n\n// install\nawait catalog.getAppById(myAppId).install();\n\n// uninstall\nawait catalog.getAppById(myAppId).uninstall();\n\n// upgrade\nawait catalog.getAppById(myAppId).upgrade();\n\n// remove\nawait catalog.getAppById(myAppId).remove();\n\n</code></pre>"},{"location":"sp/alm/#synchronize-a-solutionapp-to-the-microsoft-teams-app-catalog","title":"Synchronize a solution/app to the Microsoft Teams App Catalog","text":"<p>By default this REST call requires the SharePoint item id of the app, not the app id. PnPjs will try to fetch the SharePoint item id by default. You can still use this the second parameter useSharePointItemId to pass your own item id in the first parameter id.</p> <pre><code>// Using the app id\nawait catalog.syncSolutionToTeams(\"5137dff1-0b79-4ebc-8af4-ca01f7bd393c\");\n\n// Using the SharePoint apps item id\nawait catalog.syncSolutionToTeams(\"123\", true);\n</code></pre>"},{"location":"sp/alm/#notes","title":"Notes","text":"<ul> <li>The app catalog is just a document library under the hood, so you can also perform non-ALM actions on the library if needed. But you should be aware of possible side-effects to the ALM life-cycle when doing so.</li> </ul>"},{"location":"sp/attachments/","title":"@pnp/sp/attachments","text":"<p>The ability to attach file to list items allows users to track documents outside of a document library. You can use the PnP JS Core library to work with attachments as outlined below.</p>"},{"location":"sp/attachments/#get-attachments","title":"Get attachments","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport { IAttachmentInfo } from \"@pnp/sp/attachments\";\nimport { IItem } from \"@pnp/sp/items/types\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists/web\";\nimport \"@pnp/sp/items\";\nimport \"@pnp/sp/attachments\";\n\nconst sp = spfi(...);\n\nconst item: IItem = sp.web.lists.getByTitle(\"MyList\").items.getById(1);\n\n// get all the attachments\nconst info: IAttachmentInfo[] = await item.attachmentFiles();\n\n// get a single file by file name\nconst info2: IAttachmentInfo = await item.attachmentFiles.getByName(\"file.txt\")();\n\n// select specific properties using odata operators and use Pick to type the result\nconst info3: Pick&lt;IAttachmentInfo, \"ServerRelativeUrl\"&gt;[] = await item.attachmentFiles.select(\"ServerRelativeUrl\")();\n</code></pre>"},{"location":"sp/attachments/#add-an-attachment","title":"Add an Attachment","text":"<p>You can add an attachment to a list item using the add method. This method takes either a string, Blob, or ArrayBuffer.</p> <p></p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { IItem } from \"@pnp/sp/items\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists/web\";\nimport \"@pnp/sp/items\";\nimport \"@pnp/sp/attachments\";\n\nconst sp = spfi(...);\n\nconst item: IItem = sp.web.lists.getByTitle(\"MyList\").items.getById(1);\n\nawait item.attachmentFiles.add(\"file2.txt\", \"Here is my content\");\n</code></pre>"},{"location":"sp/attachments/#read-attachment-content","title":"Read Attachment Content","text":"<p>You can read the content of an attachment as a string, Blob, ArrayBuffer, or json using the methods supplied.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { IItem } from \"@pnp/sp/items/types\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists/web\";\nimport \"@pnp/sp/items\";\nimport \"@pnp/sp/attachments\";\n\nconst sp = spfi(...);\n\nconst item: IItem = sp.web.lists.getByTitle(\"MyList\").items.getById(1);\n\nconst text = await item.attachmentFiles.getByName(\"file.txt\").getText();\n\n// use this in the browser, does not work in nodejs\nconst blob = await item.attachmentFiles.getByName(\"file.mp4\").getBlob();\n\n// use this in nodejs\nconst buffer = await item.attachmentFiles.getByName(\"file.mp4\").getBuffer();\n\n// file must be valid json\nconst json = await item.attachmentFiles.getByName(\"file.json\").getJSON();\n</code></pre>"},{"location":"sp/attachments/#update-attachment-content","title":"Update Attachment Content","text":"<p>You can also update the content of an attachment. This API is limited compared to the full file API - so if you need to upload large files consider using a document library. </p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { IItem } from \"@pnp/sp/items/types\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists/web\";\nimport \"@pnp/sp/items\";\nimport \"@pnp/sp/attachments\";\n\nconst sp = spfi(...);\n\nconst item: IItem = sp.web.lists.getByTitle(\"MyList\").items.getById(1);\n\nawait item.attachmentFiles.getByName(\"file2.txt\").setContent(\"My new content!!!\");\n</code></pre>"},{"location":"sp/attachments/#delete-attachment","title":"Delete Attachment","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport { IItem } from \"@pnp/sp/items/types\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists/web\";\nimport \"@pnp/sp/items\";\nimport \"@pnp/sp/attachments\";\n\nconst sp = spfi(...);\n\nconst item: IItem = sp.web.lists.getByTitle(\"MyList\").items.getById(1);\n\nawait item.attachmentFiles.getByName(\"file2.txt\").delete();\n</code></pre>"},{"location":"sp/attachments/#recycle-attachment","title":"Recycle Attachment","text":"<p>Delete the attachment and send it to recycle bin</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { IItem } from \"@pnp/sp/items/types\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists/web\";\nimport \"@pnp/sp/items\";\nimport \"@pnp/sp/attachments\";\n\nconst sp = spfi(...);\n\nconst item: IItem = sp.web.lists.getByTitle(\"MyList\").items.getById(1);\n\nawait item.attachmentFiles.getByName(\"file2.txt\").recycle();\n</code></pre>"},{"location":"sp/attachments/#recycle-multiple-attachments","title":"Recycle Multiple Attachments","text":"<p>Delete multiple attachments and send them to recycle bin</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { IList } from \"@pnp/sp/lists/types\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists/web\";\nimport \"@pnp/sp/items\";\nimport \"@pnp/sp/attachments\";\n\nconst sp = spfi(...);\n\nconst [batchedSP, execute] = sp.batched();\n\nconst item = await batchedSP.web.lists.getByTitle(\"MyList\").items.getById(2);\n\nitem.attachmentFiles.getByName(\"1.txt\").recycle();\nitem.attachmentFiles.getByName(\"2.txt\").recycle();\n\nawait execute();\n</code></pre>"},{"location":"sp/behaviors/","title":"@pnp/sp : behaviors","text":"<p>The article describes the behaviors exported by the <code>@pnp/sp</code> library. Please also see available behaviors in @pnp/core, @pnp/queryable, @pnp/graph, and @pnp/nodejs.</p>"},{"location":"sp/behaviors/#defaultinit","title":"DefaultInit","text":"<p>The <code>DefaultInit</code> behavior, is a composed behavior which includes Telemetry, RejectOnError, and ResolveOnData. Additionally, it sets the cache and credentials properties of the RequestInit.</p> <pre><code>import { spfi, DefaultInit } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi().using(DefaultInit());\n\nawait sp.web();\n</code></pre>"},{"location":"sp/behaviors/#defaultheaders","title":"DefaultHeaders","text":"<p>The <code>DefaultHeaders</code> behavior uses InjectHeaders to set the Accept, Content-Type, and User-Agent headers.</p> <pre><code>import { spfi, DefaultHeaders } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi().using(DefaultHeaders());\n\nawait sp.web();\n</code></pre> <p>DefaultInit and DefaultHeaders are separated to make it easier to create your own default headers or init behavior. You should include both if composing your own default behavior.</p>"},{"location":"sp/behaviors/#requestdigest","title":"RequestDigest","text":"<p>The <code>RequestDigest</code> behavior ensures that the \"X-RequestDigest\" header is included for requests where it is needed. If you are using MSAL, supplying your own tokens, or doing a GET request it is not required. As well it cache's the digests to reduce the number of requests.</p> <p>Optionally you can provide a function to supply your own digests. The logic followed by the behavior is to check the cache, run a hook if provided, and finally make a request to \"/_api/contextinfo\" for the value.</p> <pre><code>import { spfi, RequestDigest } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi().using(RequestDigest());\n\nawait sp.web();\n</code></pre> <p>With a hook:</p> <pre><code>import { dateAdd } from \"@pnp/core\";\nimport { spfi, RequestDigest } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi().using(RequestDigest((url, init) =&gt; {\n\n    // the url will be a URL instance representing the request url\n    // init will be the RequestInit\n\n    return {\n        expiration: dateAdd(new Date(), \"minute\", 20);\n        value: \"MY VALID REQUEST DIGEST VALUE\";\n    }\n}));\n\nawait sp.web();\n</code></pre>"},{"location":"sp/behaviors/#spbrowser","title":"SPBrowser","text":"<p>A composed behavior suitable for use within a SPA or other scenario outside of SPFx. It includes DefaultHeaders, DefaultInit, BrowserFetchWithRetry, DefaultParse, and RequestDigest. As well it adds a pre observer to try and ensure the request url is absolute if one is supplied in props.</p> <p>The baseUrl prop can be used to configure a fallback when making urls absolute.</p> <p>If you are building a SPA you likely need to handle authentication. For this we support the msal library which you can use directly or as a pattern to roll your own MSAL implementation behavior.</p> <p>You should set a baseUrl as shown below.</p> <pre><code>import { spfi, SPBrowser } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\n\n// you should use the baseUrl value when working in a SPA to ensure it is always properly set for all requests\nconst sp = spfi().using(SPBrowser({ baseUrl: \"https://tenant.sharepoint.com/sites/dev\" }));\n\nawait sp.web();\n</code></pre>"},{"location":"sp/behaviors/#spfx","title":"SPFx","text":"<p>This behavior is designed to work closely with SPFx. The only parameter is the current SPFx Context. <code>SPFx</code> is a composed behavior including DefaultHeaders, DefaultInit, BrowserFetchWithRetry, DefaultParse, and RequestDigest. A hook is supplied to RequestDigest that will attempt to use any existing legacyPageContext formDigestValue it can find, otherwise defaults to the base RequestDigest behavior. It also sets a pre handler to ensure the url is absolute, using the SPFx context's pageContext.web.absoluteUrl as the base.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\n\n// this.context represents the context object within an SPFx webpart, application customizer, or ACE.\nconst sp = spfi(...).using(SPFx(this.context));\n\nawait sp.web();\n</code></pre> <p>Note that both the sp and graph libraries export an SPFx behavior. They are unique to their respective libraries and cannot be shared, i.e. you can't use the graph SPFx to setup sp and vice-versa.</p> <pre><code>import { GraphFI, graphfi, SPFx as graphSPFx } from '@pnp/graph'\nimport { SPFI, spfi, SPFx as spSPFx } from '@pnp/sp'\n\nconst sp = spfi().using(spSPFx(this.context));\nconst graph = graphfi().using(graphSPFx(this.context));\n</code></pre>"},{"location":"sp/behaviors/#spfxtoken","title":"SPFxToken","text":"<p>Added in 3.12</p> <p>Allows you to include the SharePoint Framework application token in requests. This behavior is include within the SPFx behavior, but is available separately should you wish to compose it into your own behaviors.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\n\n// this.context represents the context object within an SPFx webpart, application customizer, or ACE.\nconst sp = spfi(...).using(SPFxToken(this.context));\n\nawait sp.web();\n</code></pre>"},{"location":"sp/behaviors/#telemetry","title":"Telemetry","text":"<p>This behavior helps provide usage statistics to us about the number of requests made to the service using this library, as well as the methods being called. We do not, and cannot, access any PII information or tie requests to specific users. The data aggregates at the tenant level. We use this information to better understand how the library is being used and look for opportunities to improve high-use code paths.</p> <p>You can always opt out of the telemetry by creating your own default behaviors and leaving it out. However, we encourgage you to include it as it helps us understand usage and impact of the work.</p> <pre><code>import { spfi, Telemetry } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi().using(Telemetry());\n\nawait sp.web();\n</code></pre>"},{"location":"sp/clientside-pages/","title":"@pnp/sp/clientside-pages","text":"<p>The 'clientside-pages' module allows you to create, edit, and delete modern SharePoint pages. There are methods to update the page settings and add/remove client-side web parts.</p> <p></p>"},{"location":"sp/clientside-pages/#create-a-new-page","title":"Create a new Page","text":"<p>You can create a new client-side page in several ways, all are equivalent.</p>"},{"location":"sp/clientside-pages/#create-using-iwebaddclientsidepage","title":"Create using IWeb.addClientsidePage","text":"<pre><code>import { spfi, SPFI } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/clientside-pages/web\";\nimport { PromotedState } from \"@pnp/sp/clientside-pages\";\n\nconst sp = spfi(...);\n\n// Create a page providing a file name\nconst page = await sp.web.addClientsidePage(\"mypage1\");\n\n// ... other operations on the page as outlined below\n\n// the page is initially not published, you must publish it so it appears for others users\nawait page.save();\n\n// include title and page layout\nconst page2 = await sp.web.addClientsidePage(\"mypage\", \"My Page Title\", \"Article\");\n\n// you must publish the new page\nawait page2.save();\n\n// include title, page layout, and specifying the publishing status (Added in 2.0.4)\nconst page3 = await sp.web.addClientsidePage(\"mypage\", \"My Page Title\", \"Article\", PromotedState.PromoteOnPublish);\n\n// you must publish the new page, after which the page will immediately be promoted to a news article\nawait page3.save();\n</code></pre>"},{"location":"sp/clientside-pages/#create-using-createclientsidepage-method","title":"Create using CreateClientsidePage method","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport { Web } from \"@pnp/sp/webs\";\nimport { CreateClientsidePage, PromotedState } from \"@pnp/sp/clientside-pages\";\n\nconst sp = spfi(...);\n\nconst page1 = await CreateClientsidePage(sp.web, \"mypage2\", \"My Page Title\");\n\n// you must publish the new page\nawait page1.save(true);\n\n// specify the page layout type parameter\nconst page2 = await CreateClientsidePage(sp.web, \"mypage3\", \"My Page Title\", \"Article\");\n\n// you must publish the new page\nawait page2.save();\n\n// specify the page layout type parameter while also specifying the publishing status (Added in 2.0.4)\nconst page2half = await CreateClientsidePage(sp.web, \"mypage3\", \"My Page Title\", \"Article\", PromotedState.PromoteOnPublish);\n\n// you must publish the new page, after which the page will immediately be promoted to a news article\nawait page2half.save();\n\n// use the web factory to create a page in a specific web\nconst page3 = await CreateClientsidePage(Web([sp, \"https://{absolute web url}\"]), \"mypage4\", \"My Page Title\");\n\n// you must publish the new page\nawait page3.save();\n</code></pre>"},{"location":"sp/clientside-pages/#create-using-iwebaddfullpageapp","title":"Create using IWeb.addFullPageApp","text":"<p>Using this method you can easily create a full page app page given the component id. Don't forget the page will not be published and you will need to call save.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/clientside-pages\";\n\nconst sp = spfi(...);\n\nconst page = await sp.web.addFullPageApp(\"name333\", \"My Title\", \"2CE4E250-B997-11EB-A9D2-C9D2FF95D000\");\n// ... other page actions\n// you must save the page to publish it\nawait page.save();\n</code></pre>"},{"location":"sp/clientside-pages/#load-pages","title":"Load Pages","text":"<p>There are a few ways to load pages, each of which results in an IClientsidePage instance being returned.</p>"},{"location":"sp/clientside-pages/#load-using-iwebloadclientsidepage","title":"Load using IWeb.loadClientsidePage","text":"<p>This method takes a server relative path to the page to load.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport { Web } from \"@pnp/sp/webs\";\nimport \"@pnp/sp/clientside-pages/web\";\n\nconst sp = spfi(...);\n\n// use from the sp.web fluent chain\nconst page = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/mypage3.aspx\");\n\n// use the web factory to target a specific web\nconst page2 = await Web([sp.web, \"https://{absolute web url}\"]).loadClientsidePage(\"/sites/dev/sitepages/mypage3.aspx\");\n</code></pre>"},{"location":"sp/clientside-pages/#load-using-clientsidepagefromfile","title":"Load using ClientsidePageFromFile","text":"<p>This method takes an IFile instance and loads an IClientsidePage instance.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { ClientsidePageFromFile } from \"@pnp/sp/clientside-pages\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/files/web\";\n\nconst sp = spfi(...);\n\nconst page = await ClientsidePageFromFile(sp.web.getFileByServerRelativePath(\"/sites/dev/sitepages/mypage3.aspx\"));\n</code></pre>"},{"location":"sp/clientside-pages/#edit-sections-and-columns","title":"Edit Sections and Columns","text":"<p>Client-side pages are made up of sections, columns, and controls. Sections contain columns which contain controls. There are methods to operate on these within the page, in addition to the standard array methods available in JavaScript. These samples use a variable <code>page</code> that is understood to be an IClientsidePage instance which is either created or loaded as outlined in previous sections.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { IClientsidePage } from \"@pnp/sp/clientside-pages\";\n\nconst sp = spfi(...);\n\n// our page instance\nconst page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\");\n\n// add two columns with factor 6 - this is a two column layout as the total factor in a section should add up to 12\nconst section1 = page.addSection();\nsection1.addColumn(6);\nsection1.addColumn(6);\n\n// create a three column layout in a new section\nconst section2 = page.addSection();\nsection2.addColumn(4);\nsection2.addColumn(4);\nsection2.addColumn(4);\n\n// publish our changes\nawait page.save();\n</code></pre>"},{"location":"sp/clientside-pages/#manipulate-sections-and-columns","title":"Manipulate Sections and Columns","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport { IClientsidePage } from \"@pnp/sp/clientside-pages\";\n\nconst sp = spfi(...);\n\n// our page instance\nconst page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\");\n\n// drop all the columns in this section\n// this will also DELETE all controls contained in the columns\npage.sections[1].columns.length = 0;\n\n// create a new column layout\npage.sections[1].addColumn(4);\npage.sections[1].addColumn(8);\n\n// publish our changes\nawait page.save();\n</code></pre>"},{"location":"sp/clientside-pages/#vertical-section","title":"Vertical Section","text":"<p>The vertical section, if on the page, is stored within the sections array. However, you access it slightly differently to make things easier.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { IClientsidePage } from \"@pnp/sp/clientside-pages\";\n\nconst sp = spfi(...);\n\n// our page instance\nconst page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\");\n\n// add or get a vertical section (handles case where section already exists)\nconst vertSection = page.addVerticalSection();\n\n// ****************************************************************\n\n// if you know or want to test if a vertical section is present:\nif (page.hasVerticalSection) {\n\n    // access the vertical section (this method will NOT create the section if it does not exist)\n    page.verticalSection.addControl(new ClientsideText(\"hello\"));\n} else {\n\n    const vertSection = page.addVerticalSection();\n    vertSection.addControl(new ClientsideText(\"hello\"));\n}\n</code></pre>"},{"location":"sp/clientside-pages/#reorder-sections","title":"Reorder Sections","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport { IClientsidePage } from \"@pnp/sp/clientside-pages\";\n\nconst sp = spfi(...);\n\n// our page instance\nconst page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\");\n\n// swap the order of two sections\n// this will preserve the controls within the columns\npage.sections = [page.sections[1], page.sections[0]];\n\n// publish our changes\nawait page.save();\n</code></pre>"},{"location":"sp/clientside-pages/#reorder-columns","title":"Reorder Columns","text":"<p>The sections and columns are arrays, so normal array operations work as expected</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { IClientsidePage } from \"@pnp/sp/clientside-pages\";\n\nconst sp = spfi(...);\n\n// our page instance\nconst page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\");\n\n// swap the order of two columns\n// this will preserve the controls within the columns\npage.sections[1].columns = [page.sections[1].columns[1], page.sections[1].columns[0]];\n\n// publish our changes\nawait page.save();\n</code></pre>"},{"location":"sp/clientside-pages/#clientside-controls","title":"Clientside Controls","text":"<p>Once you have your sections and columns defined you will want to add/edit controls within those columns.</p>"},{"location":"sp/clientside-pages/#add-text-content","title":"Add Text Content","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport { ClientsideText, IClientsidePage } from \"@pnp/sp/clientside-pages\";\n\nconst sp = spfi(...);\n\n// our page instance\nconst page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\");\n\npage.addSection().addControl(new ClientsideText(\"@pnp/sp is a great library!\"));\n\nawait page.save();\n</code></pre>"},{"location":"sp/clientside-pages/#add-controls","title":"Add Controls","text":"<p>Adding controls involves loading the available client-side part definitions from the server or creating a text part.</p> <pre><code>import \"@pnp/sp/webs\";\nimport \"@pnp/sp/clientside-pages/web\";\nimport { spfi } from \"@pnp/sp\";\nimport { ClientsideWebpart } from \"@pnp/sp/clientside-pages\";\n\nconst sp = spfi(...);\n\n// this will be a ClientsidePageComponent array\n// this can be cached on the client in production scenarios\nconst partDefs = await sp.web.getClientsideWebParts();\n\n// find the definition we want, here by id\nconst partDef = partDefs.filter(c =&gt; c.Id === \"490d7c76-1824-45b2-9de3-676421c997fa\");\n\n// optionally ensure you found the def\nif (partDef.length &lt; 1) {\n    // we didn't find it so we throw an error\n    throw new Error(\"Could not find the web part\");\n}\n\n// create a ClientWebPart instance from the definition\nconst part = ClientsideWebpart.fromComponentDef(partDef[0]);\n\n// set the properties on the web part. Here for the embed web part we only have to supply an embedCode - in this case a YouTube video.\n// the structure of the properties varies for each web part and each version of a web part, so you will need to ensure you are setting\n// the properties correctly\npart.setProperties&lt;{ embedCode: string }&gt;({\n    embedCode: \"https://www.youtube.com/watch?v=IWQFZ7Lx-rg\",\n});\n\n// we add that part to a new section\npage.addSection().addControl(part);\n\nawait page.save();\n</code></pre>"},{"location":"sp/clientside-pages/#handle-different-webparts-settings","title":"Handle Different Webpart's Settings","text":"<p>There are many ways that client side web parts are implemented and we can't provide handling within the library for all possibilities. This example shows how to handle a property set within the serverProcessedContent, in this case a List part's display title.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { ClientsideWebpart } from \"@pnp/sp/clientside-pages\";\nimport \"@pnp/sp/webs\";\n\n// we create a class to wrap our functionality in a reusable way\nclass ListWebpart extends ClientsideWebpart {\n\n  constructor(control: ClientsideWebpart) {\n    super((&lt;any&gt;control).json);\n  }\n\n  // add property getter/setter for what we need, in this case \"listTitle\" within searchablePlainTexts\n  public get DisplayTitle(): string {\n    return this.json.webPartData?.serverProcessedContent?.searchablePlainTexts?.listTitle || \"\";\n  }\n\n  public set DisplayTitle(value: string) {\n    this.json.webPartData.serverProcessedContent.searchablePlainTexts.listTitle = value;\n  }\n}\n\nconst sp = spfi(...);\n\n// now we load our page\nconst page = await sp.web.loadClientsidePage(\"/sites/dev/SitePages/List-Web-Part.aspx\");\n\n// get our part and pass it to the constructor of our wrapper class\nconst part = new ListWebpart(page.sections[0].columns[0].getControl(0));\n\npart.DisplayTitle = \"My New Title!\";\n\nawait page.save();\n</code></pre> <p>Unfortunately each webpart can be authored differently, so there isn't a way to know how the setting for a given webpart are stored without loading it and examining the properties.</p>"},{"location":"sp/clientside-pages/#page-operations","title":"Page Operations","text":"<p>There are other operation you can perform on a page in addition to manipulating the content.</p>"},{"location":"sp/clientside-pages/#pagelayout","title":"pageLayout","text":"<p>You can get and set the page layout. Changing the layout after creating the page may have side effects and should be done cautiously.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { IClientsidePage } from \"@pnp/sp/clientside-pages\";\n\nconst sp = spfi(...);\n\n// our page instance\nconst page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\");\n\n// get the current value\nconst value = page.pageLayout;\n\n// set the value\npage.pageLayout = \"Article\";\nawait page.save();\n</code></pre>"},{"location":"sp/clientside-pages/#bannerimageurl","title":"bannerImageUrl","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport { IClientsidePage } from \"@pnp/sp/clientside-pages\";\n\nconst sp = spfi(...);\n\n// our page instance\nconst page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\");\n\n// get the current value\nconst value = page.bannerImageUrl;\n\n// set the value\npage.bannerImageUrl = \"/server/relative/path/to/image.png\";\nawait page.save();\n</code></pre> <p>Banner images need to exist within the same site collection as the page where you want to use them.</p>"},{"location":"sp/clientside-pages/#thumbnailurl","title":"thumbnailUrl","text":"<p>Allows you to set the thumbnail used for the page independently of the banner.</p> <p>If you set the bannerImageUrl property and not thumbnailUrl the thumbnail will be reset to match the banner, mimicking the UI functionality.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { IClientsidePage } from \"@pnp/sp/clientside-pages\";\n\nconst sp = spfi(...);\n\n// our page instance\nconst page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\");\n\n// get the current value\nconst value = page.thumbnailUrl;\n\n// set the value\npage.thumbnailUrl = \"/server/relative/path/to/image.png\";\nawait page.save();\n</code></pre>"},{"location":"sp/clientside-pages/#topicheader","title":"topicHeader","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport { IClientsidePage } from \"@pnp/sp/clientside-pages\";\n\nconst sp = spfi(...);\n\n// our page instance\nconst page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\");\n\n// get the current value\nconst value = page.topicHeader;\n\n// set the value\npage.topicHeader = \"My cool header!\";\nawait page.save();\n\n// clear the topic header and hide it\npage.topicHeader = \"\";\nawait page.save();\n</code></pre>"},{"location":"sp/clientside-pages/#title","title":"title","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport { IClientsidePage } from \"@pnp/sp/clientside-pages\";\n\nconst sp = spfi(...);\n\n// our page instance\nconst page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\");\n\n// get the current value\nconst value = page.title;\n\n// set the value\npage.title = \"My page title\";\nawait page.save();\n</code></pre>"},{"location":"sp/clientside-pages/#description","title":"description","text":"<p>Descriptions are limited to 255 chars</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { IClientsidePage } from \"@pnp/sp/clientside-pages\";\n\nconst sp = spfi(...);\n\n// our page instance\nconst page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\");\n\n// get the current value\nconst value = page.description;\n\n// set the value\npage.description = \"A description\";\nawait page.save();\n</code></pre>"},{"location":"sp/clientside-pages/#layouttype","title":"layoutType","text":"<p>Sets the layout type of the page. The valid values are: \"FullWidthImage\", \"NoImage\", \"ColorBlock\", \"CutInShape\"</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { IClientsidePage } from \"@pnp/sp/clientside-pages\";\n\nconst sp = spfi(...);\n\n// our page instance\nconst page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\");\n\n// get the current value\nconst value = page.layoutType;\n\n// set the value\npage.layoutType = \"ColorBlock\";\nawait page.save();\n</code></pre>"},{"location":"sp/clientside-pages/#headertextalignment","title":"headerTextAlignment","text":"<p>Sets the header text alignment to one of \"Left\" or \"Center\"</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { IClientsidePage } from \"@pnp/sp/clientside-pages\";\n\nconst sp = spfi(...);\n\n// our page instance\nconst page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\");\n\n// get the current value\nconst value = page.headerTextAlignment;\n\n// set the value\npage.headerTextAlignment = \"Center\";\nawait page.save();\n</code></pre>"},{"location":"sp/clientside-pages/#showtopicheader","title":"showTopicHeader","text":"<p>Sets if the topic header is displayed on a page.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { IClientsidePage } from \"@pnp/sp/clientside-pages\";\n\nconst sp = spfi(...);\n\n// our page instance\nconst page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\");\n\n// get the current value\nconst value = page.showTopicHeader;\n\n// show the header\npage.showTopicHeader = true;\nawait page.save();\n\n// hide the header\npage.showTopicHeader = false;\nawait page.save();\n</code></pre>"},{"location":"sp/clientside-pages/#showpublishdate","title":"showPublishDate","text":"<p>Sets if the publish date is displayed on a page.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { IClientsidePage } from \"@pnp/sp/clientside-pages\";\nconst sp = spfi(...);\n\n// our page instance\nconst page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\");\n\n// get the current value\nconst value = page.showPublishDate;\n\n// show the date\npage.showPublishDate = true;\nawait page.save();\n\n// hide the date\npage.showPublishDate = false;\nawait page.save();\n</code></pre>"},{"location":"sp/clientside-pages/#get-set-author-details","title":"Get / Set author details","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport { IClientsidePage } from \"@pnp/sp/clientside-pages\";\nimport \"@pnp/sp/clientside-pages\";\nimport \"@pnp/sp/site-users\";\n\nconst sp = spfi(...);\n\n// our page instance\nconst page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\");\n\n// get the author details (string | null)\nconst value = page.authorByLine;\n\n// set the author by user id\nconst user = await sp.web.currentUser.select(\"Id\", \"LoginName\")();\nconst userId = user.Id;\nconst userLogin = user.LoginName;\n\nawait page.setAuthorById(userId);\nawait page.save();\n\nawait page.setAuthorByLoginName(userLogin);\nawait page.save();\n</code></pre> <p>you must still save the page after setting the author to persist your changes as shown in the example.</p>"},{"location":"sp/clientside-pages/#load","title":"load","text":"<p>Loads the page from the server. This will overwrite any local unsaved changes.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { IClientsidePage } from \"@pnp/sp/clientside-pages\";\n\nconst sp = spfi(...);\n\n// our page instance\nconst page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\");\n\nawait page.load();\n</code></pre>"},{"location":"sp/clientside-pages/#save","title":"save","text":"<p> Uncustomized home pages (i.e the home page that is generated with a site out of the box) cannot be updated by this library without becoming corrupted.</p> <p>Saves any changes to the page, optionally keeping them in draft state.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { IClientsidePage } from \"@pnp/sp/clientside-pages\";\n\nconst sp = spfi(...);\n\n// our page instance\nconst page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\");\n\n// changes are published\nawait page.save();\n\n// changes remain in draft\nawait page.save(false);\n</code></pre>"},{"location":"sp/clientside-pages/#discardpagecheckout","title":"discardPageCheckout","text":"<p>Discards any current checkout of the page by the current user.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { IClientsidePage } from \"@pnp/sp/clientside-pages\";\n\nconst sp = spfi(...);\n\n// our page instance\nconst page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\");\n\nawait page.discardPageCheckout();\n</code></pre>"},{"location":"sp/clientside-pages/#schedulepublish","title":"schedulePublish","text":"<p>Schedules the page for publishing.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { IClientsidePage } from \"@pnp/sp/clientside-pages\";\n\nconst sp = spfi(...);\n\n// our page instance\nconst page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\");\n\n// date and time to publish the page in UTC.\nconst publishDate = new Date(\"1/1/1901\");\n\nconst scheduleVersion: string = await page.schedulePublish(publishDate);\n</code></pre>"},{"location":"sp/clientside-pages/#promotetonews","title":"promoteToNews","text":"<p>Promotes the page as a news article.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { IClientsidePage } from \"@pnp/sp/clientside-pages\";\n\nconst sp = spfi(...);\n\n// our page instance\nconst page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\");\n\nawait page.promoteToNews();\n</code></pre>"},{"location":"sp/clientside-pages/#enablecomments-disablecomments","title":"enableComments &amp; disableComments","text":"<p>Used to control the availability of comments on a page.</p> <p></p> <pre><code>import { spfi } from \"@pnp/sp\";\n// you need to import the comments sub-module or use the all preset\nimport \"@pnp/sp/comments/clientside-page\";\nimport { IClientsidePage } from \"@pnp/sp/clientside-pages\";\n\nconst sp = spfi(...);\n\n// our page instance\nconst page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\");\n\n// turn on comments\nawait page.enableComments();\n\n// turn off comments\nawait page.disableComments();\n</code></pre>"},{"location":"sp/clientside-pages/#findcontrolbyid","title":"findControlById","text":"<p>Finds a control within the page by id.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { IClientsidePage, ClientsideText } from \"@pnp/sp/clientside-pages\";\n\nconst sp = spfi(...);\n\n// our page instance\nconst page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\");\n\nconst control = page.findControlById(\"06d4cdf6-bce6-4200-8b93-667a1b0a6c9d\");\n\n// you can also type the control\nconst control = page.findControlById&lt;ClientsideText&gt;(\"06d4cdf6-bce6-4200-8b93-667a1b0a6c9d\");\n</code></pre>"},{"location":"sp/clientside-pages/#findcontrol","title":"findControl","text":"<p>Finds a control within the page using the supplied delegate. Can also be used to iterate through all controls in the page.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { IClientsidePage } from \"@pnp/sp/clientside-pages\";\n\nconst sp = spfi(...);\n\n// our page instance\nconst page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\");\n\n// find the first control whose order is 9\nconst control = page.findControl((c) =&gt; c.order === 9);\n\n// iterate all the controls and output the id to the console\npage.findControl((c) =&gt; {\n    console.log(c.id);\n    return false;\n});\n</code></pre>"},{"location":"sp/clientside-pages/#like-unlike","title":"like &amp; unlike","text":"<p>Updates the page's like value for the current user.</p> <pre><code>// our page instance\nconst page: IClientsidePage;\n\n// like this page\nawait page.like();\n\n// unlike this page\nawait page.unlike();\n</code></pre>"},{"location":"sp/clientside-pages/#getlikedbyinformation","title":"getLikedByInformation","text":"<p>Gets the likes information for this page.</p> <pre><code>// our page instance\nconst page: IClientsidePage;\n\nconst info = await page.getLikedByInformation();\n</code></pre>"},{"location":"sp/clientside-pages/#copy","title":"copy","text":"<p>Creates a copy of the page, including all controls.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { IClientsidePage } from \"@pnp/sp/clientside-pages\";\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi(...);\n\n// our page instance\nconst page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\");\n\n// creates a published copy of the page\nconst pageCopy = await page.copy(sp.web, \"newpagename\", \"New Page Title\");\n\n// creates a draft (unpublished) copy of the page\nconst pageCopy2 = await page.copy(sp.web, \"newpagename\", \"New Page Title\", false);\n\n// edits to pageCopy2 ...\n\n// publish the page\npageCopy2.save();\n</code></pre>"},{"location":"sp/clientside-pages/#copyto","title":"copyTo","text":"<p>Copies the contents of a page to another existing page instance.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { IClientsidePage } from \"@pnp/sp/clientside-pages\";\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi(...);\n\n// our page instances, loaded in any of the ways shown above\nconst source: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\");\nconst target: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/target.aspx\");\nconst target2: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/target2.aspx\");\n\n// creates a published copy of the page\nawait source.copyTo(target);\n\n// creates a draft (unpublished) copy of the page\nawait source.copyTo(target2, false);\n\n// edits to target2...\n\n// publish the page\ntarget2.save();\n</code></pre>"},{"location":"sp/clientside-pages/#setbannerimage","title":"setBannerImage","text":"<p>Sets the banner image url and optionally additional properties. Allows you to set additional properties if needed, if you do not need to set the additional properties they are equivalent.</p> <p>Banner images need to exist within the same site collection as the page where you want to use them.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { IClientsidePage } from \"@pnp/sp/clientside-pages\";\n\nconst sp = spfi(...);\n\nconst page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\");\n\npage.setBannerImage(\"/server/relative/path/to/image.png\");\n\n// save the changes\nawait page.save();\n\n// set additional props\npage.setBannerImage(\"/server/relative/path/to/image.png\", {\n  altText: \"Image description\",\n  imageSourceType: 2,\n  translateX: 30,\n  translateY: 1234,\n});\n\n// save the changes\nawait page.save();\n</code></pre> <p>This sample shows the full process of adding a page, image file, and setting the banner image in nodejs. The same code would work in a browser with an update on how you get the <code>file</code> - likely from a file input or similar.</p> <pre><code>import { join } from \"path\";\nimport { createReadStream } from \"fs\";\nimport { spfi, SPFI, SPFx } from \"@pnp/sp\";\nimport { SPDefault } from \"@pnp/nodejs\";\nimport { LogLevel  } from \"@pnp/logging\";\n\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/files\";\nimport \"@pnp/sp/folders\";\nimport \"@pnp/sp/clientside-pages\";\n\nconst buffer = readFileSync(\"c:/temp/key.pem\");\n\nconst config:any = {\n  auth: {\n    authority: \"https://login.microsoftonline.com/{my tenant}/\",\n    clientId: \"{application (client) id}\",\n    clientCertificate: {\n      thumbprint: \"{certificate thumbprint, displayed in AAD}\",\n      privateKey: buffer.toString(),\n    },\n  },\n  system: {\n    loggerOptions: {\n      loggerCallback(loglevel: any, message: any, containsPii: any) {\n          console.log(message);\n      },\n      piiLoggingEnabled: false,\n      logLevel: LogLevel.Verbose\n    }\n  }\n};\n\n// configure your node options\nconst sp = spfi('{site url}').using(SPDefault({\n  baseUrl: '{site url}',\n  msal: {\n    config: config,\n    scopes: [ 'https://{my tenant}.sharepoint.com/.default' ]\n  }\n}));\n\n\n// add the banner image\nconst dirname = join(\"C:/path/to/file\", \"img-file.jpg\");\n\nconst chunkedFile = createReadStream(dirname);\n\nconst far = await sp.web.getFolderByServerRelativePath(\"/sites/dev/Shared Documents\").files.addChunked( \"banner.jpg\", chunkedFile );\n\n// add the page\nconst page = await sp.web.addClientsidePage(\"MyPage\", \"Page Title\");\n\n// set the banner image\npage.setBannerImage(far.data.ServerRelativeUrl);\n\n// publish the page\nawait page.save();\n</code></pre>"},{"location":"sp/clientside-pages/#setbannerimagefromexternalurl","title":"setBannerImageFromExternalUrl","text":"<p>Allows you to set the banner image from a source outside the current site collection. The image file will be copied to the SiteAssets library and referenced from there.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { IClientsidePage } from \"@pnp/sp/clientside-pages\";\n\nconst sp = spfi(...);\n\nconst page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\");\n\n// you must await this method\nawait page.setBannerImageFromExternalUrl(\"https://absolute.url/to/my/image.jpg\");\n\n// save the changes\nawait page.save();\n</code></pre> <p>You can optionally supply additional props for the banner image, these match the properties when calling setBannerImage</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { IClientsidePage } from \"@pnp/sp/clientside-pages\";\n\nconst sp = spfi(...);\n\nconst page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\");\n\n// you must await this method\nawait page.setBannerImageFromExternalUrl(\"https://absolute.url/to/my/image.jpg\", {\n  altText: \"Image description\",\n  imageSourceType: 2,\n  translateX: 30,\n  translateY: 1234,\n});\n\n// save the changes\nawait page.save();\n</code></pre>"},{"location":"sp/clientside-pages/#recycle","title":"recycle","text":"<p>Allows you to recycle a page without first needing to use getItem</p> <pre><code>// our page instance\nconst page: IClientsidePage;\n// you must await this method\nawait page.recycle();\n</code></pre>"},{"location":"sp/clientside-pages/#delete","title":"delete","text":"<p>Allows you to delete a page without first needing to use getItem</p> <pre><code>// our page instance\nconst page: IClientsidePage;\n// you must await this method\nawait page.delete();\n</code></pre>"},{"location":"sp/clientside-pages/#saveastemplate","title":"saveAsTemplate","text":"<p>Save page as a template from which other pages can be created. If it doesn't exist a special folder \"Templates\" will be added to the doc lib</p> <pre><code>// our page instance\nconst page: IClientsidePage;\n// you must await this method\nawait page.saveAsTemplate();\n// save a template, but don't publish it allowing you to make changes before it is available to users\n// you \nawait page.saveAsTemplate(false);\n// ... changes to the page\n// you must publish the template so it is available\nawait page.save();\n</code></pre>"},{"location":"sp/clientside-pages/#share","title":"share","text":"<p>Allows sharing a page with one or more email addresses, optionall including a message in the email</p> <pre><code>// our page instance\nconst page: IClientsidePage;\n// you must await this method\nawait page.share([\"email@place.com\", \"email2@otherplace.com\"]);\n// optionally include a message\nawait page.share([\"email@place.com\", \"email2@otherplace.com\"], \"Please check out this cool page!\");\n</code></pre>"},{"location":"sp/clientside-pages/#add-repost-page","title":"Add Repost Page","text":"<p>You can use the <code>addRepostPage</code> method to add a report page. The method returns the absolute url of the created page. All properties are optional but it is recommended to include as much as possible to improve the quality of the repost card's display.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/clientside-pages\";\n\nconst sp = spfi(...);\nconst page = await sp.web.addRepostPage({\n    BannerImageUrl: \"https://some.absolute/path/to/an/image.jpg\",\n    IsBannerImageUrlExternal: true,\n    Description: \"My Description\",\n    Title: \"This is my title!\",\n    OriginalSourceUrl: \"https://absolute/path/to/article\",\n});\n</code></pre> <p>To specify an existing item in another list all of the four properties OriginalSourceSiteId, OriginalSourceWebId, OriginalSourceListId, and OriginalSourceItemId are required.</p>"},{"location":"sp/column-defaults/","title":"@pnp/sp/column-defaults","text":"<p>The column defaults sub-module allows you to manage the default column values on a library or library folder.</p> <p></p>"},{"location":"sp/column-defaults/#get-folder-defaults","title":"Get Folder Defaults","text":"<p>You can get the default values for a specific folder as shown below:</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/folders/web\";\nimport \"@pnp/sp/column-defaults\";\n\nconst sp = spfi(...);\n\nconst defaults = await sp.web.getFolderByServerRelativePath(\"/sites/dev/DefaultColumnValues/fld_GHk5\").getDefaultColumnValues();\n\n/*\nThe resulting structure will have the form:\n\n[\n  {\n    \"name\": \"{field internal name}\",\n    \"path\": \"/sites/dev/DefaultColumnValues/fld_GHk5\",\n    \"value\": \"{the default value}\"\n  },\n  {\n    \"name\": \"{field internal name}\",\n    \"path\": \"/sites/dev/DefaultColumnValues/fld_GHk5\",\n    \"value\": \"{the default value}\"\n  }\n]\n*/\n</code></pre>"},{"location":"sp/column-defaults/#set-folder-defaults","title":"Set Folder Defaults","text":"<p>When setting the defaults for a folder you need to include the field's internal name and the value.</p> <p>For more examples of other field types see the section Pattern for setting defaults on various column types</p> <p>Note: Be very careful when setting the path as the site collection url is case sensitive</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/folders/web\";\nimport \"@pnp/sp/column-defaults\";\n\nconst sp = spfi(...);\n\nawait sp.web.getFolderByServerRelativePath(\"/sites/dev/DefaultColumnValues/fld_GHk5\").setDefaultColumnValues([{\n  name: \"TextField\",\n  value: \"Something\",\n},\n{\n  name: \"NumberField\",\n  value: 14,\n}]);\n</code></pre>"},{"location":"sp/column-defaults/#get-library-defaults","title":"Get Library Defaults","text":"<p>You can also get all of the defaults for the entire library.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists/web\";\nimport \"@pnp/sp/column-defaults\";\n\nconst sp = spfi(...);\n\nconst defaults = await sp.web.lists.getByTitle(\"DefaultColumnValues\").getDefaultColumnValues();\n\n/*\nThe resulting structure will have the form:\n\n[\n  {\n    \"name\": \"{field internal name}\",\n    \"path\": \"/sites/dev/DefaultColumnValues\",\n    \"value\": \"{the default value}\"\n  },\n  {\n    \"name\": \"{field internal name}\",\n    \"path\": \"/sites/dev/DefaultColumnValues/fld_GHk5\",\n    \"value\": \"{a different default value}\"\n  }\n]\n*/\n</code></pre>"},{"location":"sp/column-defaults/#set-library-defaults","title":"Set Library Defaults","text":"<p>You can also set the defaults for an entire library at once (root and all sub-folders). This may be helpful in provisioning a library or other scenarios. When setting the defaults for the entire library you must also include the path value with is the server relative path to the folder. When setting the defaults for a folder you need to include the field's internal name and the value.</p> <p>For more examples of other field types see the section Pattern for setting defaults on various column types</p> <p>Note: Be very careful when setting the path as the site collection url is case sensitive</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists/web\";\nimport \"@pnp/sp/column-defaults\";\n\nconst sp = spfi(...);\n\nawait sp.web.lists.getByTitle(\"DefaultColumnValues\").setDefaultColumnValues([{\n  name: \"TextField\",\n  path: \"/sites/dev/DefaultColumnValues\",\n  value: \"#PnPjs Rocks!\",\n}]);\n</code></pre>"},{"location":"sp/column-defaults/#clear-folder-defaults","title":"Clear Folder Defaults","text":"<p>If you want to clear all of the folder defaults you can use the clear method:</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/folders/web\";\nimport \"@pnp/sp/column-defaults\";\n\nconst sp = spfi(...);\n\nawait sp.web.getFolderByServerRelativePath(\"/sites/dev/DefaultColumnValues/fld_GHk5\").clearDefaultColumnValues();\n</code></pre>"},{"location":"sp/column-defaults/#clear-library-defaults","title":"Clear Library Defaults","text":"<p>If you need to clear all of the default column values in a library you can pass an empty array to the list's setDefaultColumnValues method.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists/web\";\nimport \"@pnp/sp/column-defaults\";\n\nconst sp = spfi(...);\n\nawait sp.web.lists.getByTitle(\"DefaultColumnValues\").setDefaultColumnValues([]);\n</code></pre>"},{"location":"sp/column-defaults/#pattern-for-setting-defaults-on-various-column-types","title":"Pattern for setting defaults on various column types","text":"<p>The following is an example of the structure for setting the default column value when using the setDefaultColumnValues that covers the various field types.</p> <pre><code>[{\n    // Text/Boolean/CurrencyDateTime/Choice/User\n    name: \"TextField\":\n    path: \"/sites/dev/DefaultColumnValues\",\n    value: \"#PnPjs Rocks!\",\n}, {\n    //Number\n    name: \"NumberField\",\n    path: \"/sites/dev/DefaultColumnValues\",\n    value: 42,\n}, {\n    //Date\n    name: \"NumberField\",\n    path: \"/sites/dev/DefaultColumnValues\",\n    value: \"1900-01-01T00:00:00Z\",\n}, {\n    //Date - Today\n    name: \"NumberField\",\n    path: \"/sites/dev/DefaultColumnValues\",\n    value: \"[today]\",\n}, {\n    //MultiChoice\n    name: \"MultiChoiceField\",\n    path: \"/sites/dev/DefaultColumnValues\",\n    value: [\"Item 1\", \"Item 2\"],\n}, {\n    //MultiChoice - single value\n    name: \"MultiChoiceField\",\n    path: \"/sites/dev/DefaultColumnValues/folder2\",\n    value: [\"Item 1\"],\n}, {\n    //Taxonomy - single value\n    name: \"TaxonomyField\",\n    path: \"/sites/dev/DefaultColumnValues\",\n    value: {\n        wssId:\"-1\",\n        termName: \"TaxValueName\",\n        termId: \"924d2077-d5e3-4507-9f36-4a3655e74274\"\n        }\n}, {\n    //Taxonomy - multiple value\n    name: \"TaxonomyMultiField\",\n    path: \"/sites/dev/DefaultColumnValues\",\n    value: [{\n        wssId:\"-1\",\n        termName: \"TaxValueName\",\n        termId: \"924d2077-d5e3-4507-9f36-4a3655e74274\"\n        },{\n        wssId:\"-1\",\n        termName: \"TaxValueName2\",\n        termId: \"95d4c307-dde5-49d8-b861-392e145d94d3\"\n        },]\n}]);\n</code></pre>"},{"location":"sp/column-defaults/#taxonomy-full-example","title":"Taxonomy Full Example","text":"<p>This example shows fully how to get the taxonomy values and set them as a default column value using PnPjs.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/folders\";\nimport \"@pnp/sp/column-defaults\";\nimport \"@pnp/sp/taxonomy\";\n\nconst sp = spfi(...);\n\n// get the term's info we want to use as the default\nconst term = await sp.termStore.sets.getById(\"ea6fc521-d293-4f3d-9e84-f3a5bc0936ce\").getTermById(\"775c9cf6-c3cd-4db9-8cfa-fc0aeefad93a\")();\n\n// get the default term label\nconst defLabel = term.labels.find(v =&gt; v.isDefault);\n\n// set the default value using -1, the term id, and the term's default label name\nawait sp.web.lists.getByTitle(\"MetaDataDocLib\").rootFolder.setDefaultColumnValues([{\n  name: \"MetaDataColumnInternalName\",\n  value: {\n      wssId: \"-1\",\n      termId: term.id,\n      termName: defLabel.name,\n  }\n}])\n\n// check that the defaults have updated\nconst newDefaults = await sp.web.lists.getByTitle(\"MetaDataDocLib\").getDefaultColumnValues();\n</code></pre>"},{"location":"sp/comments-likes/","title":"@pnp/sp/comments and likes","text":"<p>Comments can be accessed through either IItem or IClientsidePage instances, though in slightly different ways. For information on loading clientside pages or items please refer to those articles.</p> <p>These APIs are currently in BETA and are subject to change or may not work on all tenants.</p> <p> </p>"},{"location":"sp/comments-likes/#clientsidepage-comments","title":"ClientsidePage Comments","text":"<p>The IClientsidePage interface has three methods to provide easier access to the comments for a page, without requiring that you load the item separately.</p>"},{"location":"sp/comments-likes/#add-comments","title":"Add Comments","text":"<p>You can add a comment using the addComment method as shown</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { CreateClientsidePage } from \"@pnp/sp/clientside-pages\";\nimport \"@pnp/sp/comments/clientside-page\";\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi(...);\n\nconst page = await CreateClientsidePage(sp.web, \"mypage\", \"My Page Title\", \"Article\");\n// optionally publish the page first\nawait page.save();\n\n//add a comment as text\nconst comment = await page.addComment(\"A test comment\");\n\n//or you can include the @mentions. html anchor required to include mention in text body.\nconst mentionHtml = `&lt;a data-sp-mention-user-id=\"test@contoso.com\" href=\"mailto&amp;#58;test@contoso.com.com\" tabindex=\"-1\"&gt;Test User&lt;/a&gt;`;\n\nconst commentInfo: Partial&lt;ICommentInfo&gt; = { text: `${mentionHtml} This is the test comment with at mentions`, \n    mentions: [{ loginName: 'test@contoso.com', email: 'test@contoso.com', name: 'Test User' }], };\nconst comment = await page.addComment(commentInfo);\n</code></pre>"},{"location":"sp/comments-likes/#get-page-comments","title":"Get Page Comments","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport { CreateClientsidePage } from \"@pnp/sp/clientside-pages\";\nimport \"@pnp/sp/comments/clientside-page\";\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi(...);\n\nconst page = await CreateClientsidePage(sp.web, \"mypage\", \"My Page Title\", \"Article\");\n// optionally publish the page first\nawait page.save();\n\nawait page.addComment(\"A test comment\");\nawait page.addComment(\"A test comment\");\nawait page.addComment(\"A test comment\");\nawait page.addComment(\"A test comment\");\nawait page.addComment(\"A test comment\");\nawait page.addComment(\"A test comment\");\n\nconst comments = await page.getComments();\n</code></pre>"},{"location":"sp/comments-likes/#enablecomments-disablecomments","title":"enableComments &amp; disableComments","text":"<p>Used to control the availability of comments on a page</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { IClientsidePage } from \"@pnp/sp/clientside-pages\";\n// you need to import the comments sub-module or use the all preset\nimport \"@pnp/sp/comments/clientside-page\";\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi(...);\n\n// our page instance\nconst page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\");\n\n// turn on comments\nawait page.enableComments();\n\n// turn off comments\nawait page.disableComments();\n</code></pre>"},{"location":"sp/comments-likes/#getbyid","title":"GetById","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport { CreateClientsidePage } from \"@pnp/sp/clientside-pages\";\nimport \"@pnp/sp/comments/clientside-page\";\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi(...);\n\nconst page = await CreateClientsidePage(sp.web, \"mypage\", \"My Page Title\", \"Article\");\n// optionally publish the page first\nawait page.save();\n\nconst comment = await page.addComment(\"A test comment\");\n\nconst commentData = await page.getCommentById(parseInt(comment.id, 10));\n</code></pre>"},{"location":"sp/comments-likes/#clear-comments","title":"Clear Comments","text":""},{"location":"sp/comments-likes/#item-comments","title":"Item Comments","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/files/web\";\nimport \"@pnp/sp/items\";\nimport \"@pnp/sp/comments/item\";\n\nconst sp = spfi(...);\n\nconst item = await sp.web.getFileByServerRelativePath(\"/sites/dev/SitePages/Test_8q5L.aspx\").getItem();\n\n// as an example, or any of the below options\nawait item.like();\n</code></pre> <p>The below examples use a variable named \"item\" which is taken to represent an IItem instance.</p>"},{"location":"sp/comments-likes/#comments","title":"Comments","text":""},{"location":"sp/comments-likes/#get-item-comments","title":"Get Item Comments","text":"<pre><code>const comments = await item.comments();\n</code></pre> <p>You can also get the comments merged with instances of the Comment class to immediately start accessing the properties and methods:</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { IComments } from \"@pnp/sp/comments\";\n\nconst sp = spfi(...);\n\nconst comments: IComments = await item.comments();\n\n// these will be Comment instances in the array\ncomments[0].replies.add({ text: \"#PnPjs is pretty ok!\" });\n\n//load the top 20 replies and comments for an item including likedBy information\nconst comments = await item.comments.expand(\"replies\", \"likedBy\", \"replies/likedBy\").top(20)();\n</code></pre>"},{"location":"sp/comments-likes/#add-comment","title":"Add Comment","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport { ICommentInfo } from \"@pnp/sp/comments\";\n\nconst sp = spfi(...);\n\n// you can add a comment as a string\nconst comment = await item.comments.add(\"string comment\");\n\n\n</code></pre>"},{"location":"sp/comments-likes/#delete-a-comment","title":"Delete a Comment","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport { IComments } from \"@pnp/sp/comments\";\n\nconst sp = spfi(...);\n\nconst comments: IComments = await item.comments();\n\n// these will be Comment instances in the array\ncomments[0].delete()\n</code></pre>"},{"location":"sp/comments-likes/#like-comment","title":"Like Comment","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport { IComments } from \"@pnp/sp/comments\";\n\nconst sp = spfi(...);\n\nconst comments: IComments = await item.comments();\n\n// these will be Comment instances in the array\ncomments[0].like();\n</code></pre>"},{"location":"sp/comments-likes/#unlike-comment","title":"Unlike Comment","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport { IComments } from \"@pnp/sp/comments\";\n\nconst sp = spfi(...);\n\nconst comments: IComments = await item.comments();\n\ncomments[0].unlike()\n</code></pre>"},{"location":"sp/comments-likes/#reply-to-a-comment","title":"Reply to a Comment","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport { IComments } from \"@pnp/sp/comments\";\n\nconst sp = spfi(...);\n\nconst comments: IComments = await item.comments();\n\nconst comment = await comments[0].comments.add({ text: \"#PnPjs is pretty ok!\" });\n</code></pre>"},{"location":"sp/comments-likes/#load-replies-to-a-comment","title":"Load Replies to a Comment","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport { IComments } from \"@pnp/sp/comments\";\n\nconst sp = spfi(...);\n\nconst comments: IComments = await item.comments();\n\nconst replies = await comments[0].replies();\n</code></pre>"},{"location":"sp/comments-likes/#likeunlike","title":"Like/Unlike","text":"<p>You can like/unlike client-side pages, items, and comments on items. See above for how to like or unlike a comment. Below you can see how to like and unlike an items, as well as get the liked by data.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/items\";\nimport \"@pnp/sp/comments\";\nimport { ILikeData, ILikedByInformation } from \"@pnp/sp/comments\";\n\nconst sp = spfi(...);\n\nconst item = sp.web.lists.getByTitle(\"PnP List\").items.getById(1);\n\n// like an item\nawait item.like();\n\n// unlike an item\nawait item.unlike();\n\n// get the liked by information\nconst likedByInfo: ILikedByInformation = await item.getLikedByInformation();\n</code></pre> <p>To like/unlike a client-side page and get liked by information.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { ILikedByInformation } from \"@pnp/sp/comments\";\nimport { IClientsidePage } from \"@pnp/sp/clientside-pages\";\n\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/clientside-pages\";\nimport \"@pnp/sp/comments/clientside-page\";\n\nconst sp = spfi(...);\n\nconst page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\");\n\n// like a page\nawait page.like();\n\n// unlike a page\nawait page.unlike();\n\n// get the liked by information\nconst likedByInfo: ILikedByInformation = await page.getLikedByInformation();\n</code></pre>"},{"location":"sp/comments-likes/#rate","title":"Rate","text":"<p>You can rate list items with a numeric values between 1 and 5.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/items\";\nimport \"@pnp/sp/comments\";\nimport { ILikeData, ILikedByInformation } from \"@pnp/sp/comments\";\n\nconst sp = spfi(...);\n\nconst item = sp.web.lists.getByTitle(\"PnP List\").items.getById(1);\n\n// rate an item\nawait item.rate(2);\n</code></pre>"},{"location":"sp/content-types/","title":"@pnp/sp/content-types","text":"<p>Content Types are used to define sets of columns in SharePoint.</p>"},{"location":"sp/content-types/#icontenttypes","title":"IContentTypes","text":""},{"location":"sp/content-types/#add-an-existing-content-type-to-a-collection","title":"Add an existing Content Type to a collection","text":"<p>The following example shows how to add the built in Picture Content Type to the Documents library.</p> <pre><code>const sp = spfi(...);\n\nsp.web.lists.getByTitle(\"Documents\").contentTypes.addAvailableContentType(\"0x010102\");\n</code></pre>"},{"location":"sp/content-types/#get-a-content-type-by-id","title":"Get a Content Type by Id","text":"<pre><code>import { IContentType } from \"@pnp/sp/content-types\";\n\nconst sp = spfi(...);\n\nconst d: IContentType = await sp.web.contentTypes.getById(\"0x01\")();\n\n// log content type name to console\nconsole.log(d.name);\n</code></pre>"},{"location":"sp/content-types/#update-a-content-type","title":"Update a Content Type","text":"<pre><code>import { IContentType } from \"@pnp/sp/content-types\";\n\nconst sp = spfi(...);\n\nawait sp.web.contentTypes.getById(\"0x01\").update({EditFormClientSideComponentId: \"9dfdb916-7380-4b69-8d92-bc711f5fa339\"});\n</code></pre>"},{"location":"sp/content-types/#add-a-new-content-type","title":"Add a new Content Type","text":"<p>To add a new Content Type to a collection, parameters id and name are required. For more information on creating content type IDs reference the Microsoft Documentation. While this documentation references SharePoint 2010 the structure of the IDs has not changed.</p> <pre><code>const sp = spfi(...);\n\nsp.web.contentTypes.add(\"0x01008D19F38845B0884EBEBE239FDF359184\", \"My Content Type\");\n</code></pre> <p>It is also possible to provide a description and group parameter. For other settings, we can use the parameter named 'additionalSettings' which is a TypedHash, meaning you can send whatever properties you'd like in the body (provided that the property is supported by the SharePoint API).</p> <pre><code>const sp = spfi(...);\n\n//Adding a content type with id, name, description, group and setting it to read only mode (using additionalsettings)\nsp.web.contentTypes.add(\"0x01008D19F38845B0884EBEBE239FDF359184\", \"My Content Type\", \"This is my content type.\", \"_PnP Content Types\", { ReadOnly: true });\n</code></pre>"},{"location":"sp/content-types/#icontenttype","title":"IContentType","text":""},{"location":"sp/content-types/#get-the-field-links","title":"Get the field links","text":"<p>Use this method to get a collection containing all the field links (SP.FieldLink) for a Content Type.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport { ContentType, IContentType } from \"@pnp/sp/content-types\";\n\nconst sp = spfi(...);\n\n// get field links from built in Content Type Document (Id: \"0x0101\")\nconst d = await sp.web.contentTypes.getById(\"0x0101\").fieldLinks();\n\n// log collection of fieldlinks to console\nconsole.log(d);\n</code></pre>"},{"location":"sp/content-types/#get-content-type-fields","title":"Get Content Type fields","text":"<p>To get a collection with all fields on the Content Type, simply use this method.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport { ContentType, IContentType } from \"@pnp/sp/content-types\";\n\nconst sp = spfi(...);\n\n// get fields from built in Content Type Document (Id: \"0x0101\")\nconst d = await sp.web.contentTypes.getById(\"0x0101\").fields();\n\n// log collection of fields to console\nconsole.log(d);\n</code></pre>"},{"location":"sp/content-types/#get-parent-content-type","title":"Get parent Content Type","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport { ContentType, IContentType } from \"@pnp/sp/content-types\";\n\nconst sp = spfi(...);\n\n// get parent Content Type from built in Content Type Document (Id: \"0x0101\")\nconst d = await sp.web.contentTypes.getById(\"0x0101\").parent();\n\n// log name of parent Content Type to console\nconsole.log(d.Name)\n</code></pre>"},{"location":"sp/content-types/#get-content-type-workflow-associations","title":"Get Content Type Workflow associations","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport { ContentType, IContentType } from \"@pnp/sp/content-types\";\n\nconst sp = spfi(...);\n\n// get workflow associations from built in Content Type Document (Id: \"0x0101\")\nconst d = await sp.web.contentTypes.getById(\"0x0101\").workflowAssociations();\n\n// log collection of workflow associations to console\nconsole.log(d);\n</code></pre>"},{"location":"sp/context-info/","title":"@pnp/sp/ - context-info","text":"<p>Starting with 3.8.0 we've moved context information to its own sub-module. You can now import <code>context-info</code> and use it on any SPQueryable derived object to understand the context. Some examples are below.</p>"},{"location":"sp/context-info/#icontextinfo","title":"IContextInfo","text":"<p>The information returned by the method is defined by the IContextInfo interface.</p> <pre><code>export interface IContextInfo {\n    FormDigestTimeoutSeconds: number;\n    FormDigestValue: number;\n    LibraryVersion: string;\n    SiteFullUrl: string;\n    SupportedSchemaVersions: string[];\n    WebFullUrl: string;\n}\n</code></pre>"},{"location":"sp/context-info/#get-context-for-a-web","title":"Get Context for a web","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/context-info\";\n\nconst sp = spfi(...);\n\nconst info = await sp.web.getContextInfo();\n</code></pre>"},{"location":"sp/context-info/#get-context-from-lists","title":"Get Context from lists","text":"<p>This pattern works as well for any SPQueryable derived object, allowing you to gain context no matter with which fluent objects you are working.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/context-info\";\n\nconst sp = spfi(...);\n\nconst info = await sp.web.lists.getContextInfo();\n</code></pre>"},{"location":"sp/context-info/#get-context-from-url","title":"Get Context from URL","text":"<p>Often you will have an absolute URL to a file or path and would like to create an IWeb or IFile. You can use the fileFromPath or folderFromPath to get an IFile/IFolder, or you can use <code>getContextInfo</code> to create a new web within the context of the file path.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { Web } from \"@pnp/sp/webs\";\nimport \"@pnp/sp/context-info\";\n\nconst sp = spfi(...);\n\n// supply an absolute path to get associated context info, this works across site collections\nconst { WebFullUrl } = await sp.web.getContextInfo(\"https://tenant.sharepoint.com/sites/dev/shared documents/file.docx\");\n\n// create a new web pointing to the web where the file is stored\nconst web = Web([sp.web, decodeURI(WebFullUrl)]);\n\nconst webInfo = await web();\n</code></pre>"},{"location":"sp/favorites/","title":"@pnp/sp/ - favorites","text":"<p>The favorites API allows you to fetch and manipulate followed sites and list items (also called saved for later). Note, all of these methods only work with the context of a logged in user, and not with app-only permissions.</p>"},{"location":"sp/favorites/#get-current-users-followed-sites","title":"Get current user's followed sites","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/favorites\";\n\nconst sp = spfi(...);\n\nconst favSites = await sp.favorites.getFollowedSites();\n</code></pre>"},{"location":"sp/favorites/#add-a-site-to-current-users-followed-sites","title":"Add a site to current user's followed sites","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/favorites\";\n\nconst sp = spfi(...);\n\nconst tenantUrl = \"contoso.sharepoint.com\";\nconst siteId = \"e3913de9-bfee-4089-b1bc-fb147d302f11\";\nconst webId = \"11a53c2b-0a67-46c8-8599-db50b8bc4dd1\"\nconst webUrl = \"https://contoso.sharepoint.com/sites/favsite\"\n\nconst favSiteInfo = await sp.favorites.getFollowedSites.add(tenantUrl, siteId, webId, webUrl);\n</code></pre>"},{"location":"sp/favorites/#remove-a-site-from-current-users-followed-sites","title":"Remove a site from current user's followed sites","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/favorites\";\n\nconst sp = spfi(...);\n\nconst tenantUrl = \"contoso.sharepoint.com\";\nconst siteId = \"e3913de9-bfee-4089-b1bc-fb147d302f11\";\nconst webId = \"11a53c2b-0a67-46c8-8599-db50b8bc4dd1\"\nconst webUrl = \"https://contoso.sharepoint.com/sites/favsite\"\n\nawait sp.favorites.getFollowedSites.remove(tenantUrl, siteId, webId, webUrl);\n</code></pre>"},{"location":"sp/favorites/#get-current-users-followed-list-items","title":"Get current user's followed list items","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/favorites\";\n\nconst sp = spfi(...);\n\nconst favListItems = await sp.favorites.getFollowedListItems();\n</code></pre>"},{"location":"sp/favorites/#add-an-item-to-current-users-followed-list-items","title":"Add an item to current user's followed list items","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/favorites\";\n\nconst sp = spfi(...);\n\nconst siteId = \"e3913de9-bfee-4089-b1bc-fb147d302f11\";\nconst webId = \"11a53c2b-0a67-46c8-8599-db50b8bc4dd1\";\nconst listId = \"f09fe67e-0160-4fcc-9144-905bd4889f31\";\nconst listItemUniqueId = \"1425C841-626A-44C9-8731-DA8BDC0882D1\";\n\nconst favListItemInfo = await sp.favorites.getFollowedListItems.add(siteId, webId, listId, listItemUniqueId);\n</code></pre>"},{"location":"sp/favorites/#remove-an-item-from-current-users-followed-list-items","title":"Remove an item from current user's followed list items","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/favorites\";\n\nconst sp = spfi(...);\n\nconst siteId = \"e3913de9-bfee-4089-b1bc-fb147d302f11\";\nconst webId = \"11a53c2b-0a67-46c8-8599-db50b8bc4dd1\";\nconst listId = \"f09fe67e-0160-4fcc-9144-905bd4889f31\";\nconst listItemUniqueId = \"1425C841-626A-44C9-8731-DA8BDC0882D1\";\n\nconst favListItemInfo = await sp.favorites.getFollowedListItems.remove(siteId, webId, listId, listItemUniqueId);\n</code></pre>"},{"location":"sp/features/","title":"@pnp/sp/features","text":"<p>Features module provides method to get the details of activated features. And to activate/deactivate features scoped at Site Collection and Web.</p>"},{"location":"sp/features/#ifeatures","title":"IFeatures","text":"<p>Represents a collection of features. SharePoint Sites and Webs will have a collection of features</p>"},{"location":"sp/features/#getbyid","title":"getById","text":"<p>Gets the information about a feature for the given GUID</p> <pre><code>import { spfi } from \"@pnp/sp\";\n\nconst sp = spfi(...);\n\n//Example of GUID format a7a2793e-67cd-4dc1-9fd0-43f61581207a\nconst webFeatureId = \"guid-of-web-feature\";\nconst webFeature = await sp.web.features.getById(webFeatureId)();\n\nconst siteFeatureId = \"guid-of-site-scope-feature\";\nconst siteFeature = await sp.site.features.getById(siteFeatureId)();\n</code></pre>"},{"location":"sp/features/#add","title":"add","text":"<p>Adds (activates) a feature at the Site or Web level</p> <pre><code>import { spfi } from \"@pnp/sp\";\n\nconst sp = spfi(...);\n\n//Example of GUID format a7a2793e-67cd-4dc1-9fd0-43f61581207a\nconst webFeatureId = \"guid-of-web-feature\";\nlet res = await sp.web.features.add(webFeatureId);\n// Activate with force\nres = await sp.web.features.add(webFeatureId, true);\n</code></pre>"},{"location":"sp/features/#remove","title":"remove","text":"<p>Removes and deactivates the specified feature from the SharePoint Site or Web</p> <pre><code>import { spfi } from \"@pnp/sp\";\n\nconst sp = spfi(...);\n\n//Example of GUID format a7a2793e-67cd-4dc1-9fd0-43f61581207a\nconst webFeatureId = \"guid-of-web-feature\";\nlet res = await sp.web.features.remove(webFeatureId);\n// Deactivate with force\nres = await sp.web.features.remove(webFeatureId, true);\n</code></pre>"},{"location":"sp/features/#ifeature","title":"IFeature","text":"<p>Represents an instance of a SharePoint feature.</p> <p> </p>"},{"location":"sp/features/#deactivate","title":"deactivate","text":"<p>Deactivates the specified feature from the SharePoint Site or Web</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/features\";\n\nconst sp = spfi(...);\n\n//Example of GUID format a7a2793e-67cd-4dc1-9fd0-43f61581207a\nconst webFeatureId = \"guid-of-web-feature\";\nsp.web.features.remove(webFeatureId);\n\n// Deactivate with force\nsp.web.features.remove(webFeatureId, true);\n</code></pre>"},{"location":"sp/fields/","title":"@pnp/sp/fields","text":"<p>Fields in SharePoint can be applied to both webs and lists. When referencing a webs' fields you are effectively looking at site columns which are common fields that can be utilized in any list/library in the site. When referencing a lists' fields you are looking at the fields only associated to that particular list.</p>"},{"location":"sp/fields/#ifields","title":"IFields","text":""},{"location":"sp/fields/#get-field-by-id","title":"Get Field by Id","text":"<p>Gets a field from the collection by id (guid). Note that the library will handle a guid formatted with curly braces (i.e. '{03b05ff4-d95d-45ed-841d-3855f77a2483}') as well as without curly braces (i.e. '03b05ff4-d95d-45ed-841d-3855f77a2483'). The Id parameter is also case insensitive.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { IField, IFieldInfo } from \"@pnp/sp/fields/types\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists/web\";\nimport \"@pnp/sp/fields\";\n\n// set up sp root object\nconst sp = spfi(...);\n// get the field by Id for web\nconst field: IField = sp.web.fields.getById(\"03b05ff4-d95d-45ed-841d-3855f77a2483\");\n// get the field by Id for list 'My List'\nconst field2: IFieldInfo = await sp.web.lists.getByTitle(\"My List\").fields.getById(\"03b05ff4-d95d-45ed-841d-3855f77a2483\")();\n\n// we can use this 'field' variable to execute more queries on the field:\nconst r = await field.select(\"Title\")();\n\n// show the response from the server\nconsole.log(r.Title);\n</code></pre>"},{"location":"sp/fields/#get-field-by-title","title":"Get Field by Title","text":"<p>You can also get a field from the collection by title.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { IField, IFieldInfo } from \"@pnp/sp/fields/types\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\"\nimport \"@pnp/sp/fields\";\n\nconst sp = spfi(...);\n// get the field with the title 'Author' for web\nconst field: IField = sp.web.fields.getByTitle(\"Author\");\n// get the field with the title 'Title' for list 'My List'\nconst field2: IFieldInfo = await sp.web.lists.getByTitle(\"My List\").fields.getByTitle(\"Title\")();\n\n// we can use this 'field' variable to run more queries on the field:\nconst r = await field.select(\"Id\")();\n\n// log the field Id to console\nconsole.log(r.Id);\n</code></pre>"},{"location":"sp/fields/#get-field-by-internal-name-or-title","title":"Get Field by Internal Name or Title","text":"<p>You can also get a field from the collection regardless of if the string is the fields internal name or title which can be different.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { IField, IFieldInfo } from \"@pnp/sp/fields/types\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\"\nimport \"@pnp/sp/fields\";\n\nconst sp = spfi(...);\n// get the field with the internal name 'ModifiedBy' for web\nconst field: IField = sp.web.fields.getByInternalNameOrTitle(\"ModifiedBy\");\n// get the field with the internal name 'ModifiedBy' for list 'My List'\nconst field2: IFieldInfo = await sp.web.lists.getByTitle(\"My List\").fields.getByInternalNameOrTitle(\"ModifiedBy\")();\n\n// we can use this 'field' variable to run more queries on the field:\nconst r = await field.select(\"Id\")();\n\n// log the field Id to console\nconsole.log(r.Id);\n</code></pre>"},{"location":"sp/fields/#create-a-field-using-an-xml-schema","title":"Create a Field using an XML schema","text":"<p>Create a new field by defining an XML schema that assigns all the properties for the field.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { IField, IFieldAddResult } from \"@pnp/sp/fields/types\";\n\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/fields\";\n\nconst sp = spfi(...);\n\n// define the schema for your new field, in this case a date field with a default date of today.\nconst fieldSchema = `&lt;Field ID=\"{03b09ff4-d99d-45ed-841d-3855f77a2483}\" StaticName=\"MyField\" Name=\"MyField\" DisplayName=\"My New Field\" FriendlyDisplayFormat=\"Disabled\" Format=\"DateOnly\" Type=\"DateTime\" Group=\"My Group\"&gt;&lt;Default&gt;[today]&lt;/Default&gt;&lt;/Field&gt;`;\n\n// create the new field in the web\nconst field: IFieldAddResult = await sp.web.fields.createFieldAsXml(fieldSchema);\n// create the new field in the list 'My List'\nconst field2: IFieldAddResult = await sp.web.lists.getByTitle(\"My List\").fields.createFieldAsXml(fieldSchema);\n\n// we can use this 'field' variable to run more queries on the list:\nconst r = await field.field.select(\"Id\")();\n\n// log the field Id to console\nconsole.log(r.Id);\n</code></pre>"},{"location":"sp/fields/#add-a-new-field","title":"Add a New Field","text":"<p>Use the add method to create a new field where you define the field type</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { IField, IFieldAddResult, FieldTypes } from \"@pnp/sp/fields/types\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/fields\";\n\nconst sp = spfi(...);\n\n// create a new field called 'My Field' in web.\nconst field: IFieldAddResult = await sp.web.fields.add(\"My Field\", FieldTypes.Text, { FieldTypeKind: 3, Group: \"My Group\" });\n// create a new field called 'My Field' in the list 'My List'\nconst field2: IFieldAddResult = await sp.web.lists.getByTitle(\"My List\").fields.add(\"My Field\", FieldTypes.Text, { FieldTypeKind: 3, Group: \"My Group\" });\n\n// we can use this 'field' variable to run more queries on the field:\nconst r = await field.field.select(\"Id\")();\n\n// log the field Id to console\nconsole.log(r.Id);\n</code></pre>"},{"location":"sp/fields/#add-a-site-field-to-a-list","title":"Add a Site Field to a List","text":"<p>Use the createFieldAsXml method to add a site field to a list.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { IFieldAddResult, FieldTypes } from \"@pnp/sp/fields/types\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/fields\";\n\nconst sp = spfi(...);\n\n// create a new field called 'My Field' in web.\nconst field: IFieldAddResult = await sp.web.fields.add(\"My Field\", FieldTypes.Text, { FieldTypeKind: 3, Group: \"My Group\" });\n// add the site field 'My Field' to the list 'My List'\nconst r = await sp.web.lists.getByTitle(\"My List\").fields.createFieldAsXml(field.data.SchemaXml as string);\n\n// log the field Id to console\nconsole.log(r.data.Id);\n</code></pre>"},{"location":"sp/fields/#add-a-text-field","title":"Add a Text Field","text":"<p>Use the addText method to create a new text field.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { IFieldAddResult, FieldTypes } from \"@pnp/sp/fields/types\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/fields\";\n\nconst sp = spfi(...);\n\n// create a new text field called 'My Field' in web.\nconst field: IFieldAddResult = await sp.web.fields.addText(\"My Field\", { MaxLength: 255, Group: \"My Group\" });\n// create a new text field called 'My Field' in the list 'My List'.\nconst field2: IFieldAddResult = await sp.web.lists.getByTitle(\"My List\").fields.addText(\"My Field\", { MaxLength: 255, Group: \"My Group\" });\n\n// we can use this 'field' variable to run more queries on the field:\nconst r = await field.field.select(\"Id\")();\n\n// log the field Id to console\nconsole.log(r.Id);\n</code></pre>"},{"location":"sp/fields/#add-a-calculated-field","title":"Add a Calculated Field","text":"<p>Use the addCalculated method to create a new calculated field.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { DateTimeFieldFormatType, FieldTypes } from \"@pnp/sp/fields/types\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/fields\";\n\nconst sp = spfi(...);\n\n// create a new calculated field called 'My Field' in web\nconst field = await sp.web.fields.addCalculated(\"My Field\", { Formula: \"=Modified+1\", DateFormat: DateTimeFieldFormatType.DateOnly, FieldTypeKind: FieldTypes.Calculated, Group: \"MyGroup\" });\n// create a new calculated field called 'My Field' in the list 'My List'\nconst field2 = await sp.web.lists.getByTitle(\"My List\").fields.addCalculated(\"My Field\", { Formula: \"=Modified+1\", DateFormat:  DateTimeFieldFormatType.DateOnly, FieldTypeKind: FieldTypes.Calculated, Group: \"MyGroup\" });\n\n// we can use this 'field' variable to run more queries on the field:\nconst r = await field.field.select(\"Id\")();\n\n// log the field Id to console\nconsole.log(r.Id);\n</code></pre>"},{"location":"sp/fields/#add-a-datetime-field","title":"Add a Date/Time Field","text":"<p>Use the addDateTime method to create a new date/time field.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { DateTimeFieldFormatType, CalendarType, DateTimeFieldFriendlyFormatType } from \"@pnp/sp/fields/types\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/fields\";\n\nconst sp = spfi(...);\n\n// create a new date/time field called 'My Field' in web\nconst field = await sp.web.fields.addDateTime(\"My Field\", { DisplayFormat: DateTimeFieldFormatType.DateOnly, DateTimeCalendarType: CalendarType.Gregorian, FriendlyDisplayFormat: DateTimeFieldFriendlyFormatType.Disabled,  Group: \"My Group\" });\n// create a new date/time field called 'My Field' in the list 'My List'\nconst field2 = await sp.web.lists.getByTitle(\"My List\").fields.addDateTime(\"My Field\", { DisplayFormat: DateTimeFieldFormatType.DateOnly, DateTimeCalendarType: CalendarType.Gregorian, FriendlyDisplayFormat: DateTimeFieldFriendlyFormatType.Disabled, Group: \"My Group\" });\n\n// we can use this 'field' variable to run more queries on the field:\nconst r = await field.field.select(\"Id\")();\n\n// log the field Id to console\nconsole.log(r.Id);\n</code></pre>"},{"location":"sp/fields/#add-a-currency-field","title":"Add a Currency Field","text":"<p>Use the addCurrency method to create a new currency field.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/fields\";\n\nconst sp = spfi(...);\n\n// create a new currency field called 'My Field' in web\nconst field = await sp.web.fields.addCurrency(\"My Field\", { MinimumValue: 0, MaximumValue: 100, CurrencyLocaleId: 1033, Group: \"My Group\" });\n// create a new currency field called 'My Field' in list 'My List'\nconst field2 = await sp.web.lists.getByTitle(\"My List\").fields.addCurrency(\"My Field\", { MinimumValue: 0, MaximumValue: 100, CurrencyLocaleId: 1033, Group: \"My Group\" });\n\n// we can use this 'field' variable to run more queries on the field:\nconst r = await field.field.select(\"Id\")();\n\n// log the field Id to console\nconsole.log(r.Id);\n</code></pre>"},{"location":"sp/fields/#add-an-image-field","title":"Add an Image Field","text":"<p>Use the addImageField method to create a new image field.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { IFieldAddResult, FieldTypes } from \"@pnp/sp/fields/types\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/fields\";\n\nconst sp = spfi(...);\n\n// create a new image field called 'My Field' in web.\nconst field: IFieldAddResult = await sp.web.fields.addImageField(\"My Field\");\n// create a new image field called 'My Field' in the list 'My List'.\nconst field2: IFieldAddResult = await sp.web.lists.getByTitle(\"My List\").fields.addImageField(\"My Field\");\n\n// we can use this 'field' variable to run more queries on the field:\nconst r = await field.field.select(\"Id\")();\n\n// log the field Id to console\nconsole.log(r.Id);\n</code></pre>"},{"location":"sp/fields/#add-a-multi-line-text-field","title":"Add a Multi-line Text Field","text":"<p>Use the addMultilineText method to create a new multi-line text field.</p> <p>For Enhanced Rich Text mode, see the next section.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/fields\";\n\nconst sp = spfi(...);\n\n// create a new multi-line text field called 'My Field' in web\nconst field = await sp.web.fields.addMultilineText(\"My Field\", { NumberOfLines: 6, RichText: true, RestrictedMode: false, AppendOnly: false, AllowHyperlink: true, Group: \"My Group\" });\n// create a new multi-line text field called 'My Field' in list 'My List'\nconst field2 = await sp.web.lists.getByTitle(\"My List\").fields.addMultilineText(\"My Field\", { NumberOfLines: 6, RichText: true, RestrictedMode: false, AppendOnly: false, AllowHyperlink: true, Group: \"My Group\" });\n\n// we can use this 'field' variable to run more queries on the field:\nconst r = await field.field.select(\"Id\")();\n\n// log the field Id to console\nconsole.log(r.Id);\n</code></pre>"},{"location":"sp/fields/#add-a-multi-line-text-field-with-enhanced-rich-text","title":"Add a Multi-line Text Field with Enhanced Rich Text","text":"<p>The REST endpoint doesn't support setting the <code>RichTextMode</code> field therefore you will need to revert to Xml to create the field. The following is an example that will create a multi-line text field in Enhanced Rich Text mode.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/fields\";\n\nconst sp = spfi(...);\n\n//Create a new multi-line text field called 'My Field' in web\nconst field = await sp.web.lists.getByTitle(\"My List\").fields.createFieldAsXml(\n    `&lt;Field Type=\"Note\" Name=\"MyField\" DisplayName=\"My Field\" Required=\"FALSE\" RichText=\"TRUE\" RichTextMode=\"FullHtml\" /&gt;`\n);\n\n// we can use this 'field' variable to run more queries on the field:\nconst r = await field.field.select(\"Id\")();\n\n// log the field Id to console\nconsole.log(r.Id);\n</code></pre>"},{"location":"sp/fields/#add-a-number-field","title":"Add a Number Field","text":"<p>Use the addNumber method to create a new number field.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/fields\";\n\nconst sp = spfi(...);\n\n// create a new number field called 'My Field' in web\nconst field = await sp.web.fields.addNumber(\"My Field\", { MinimumValue: 1, MaximumValue: 100, Group: \"My Group\" });\n// create a new number field called 'My Field' in list 'My List'\nconst field2 = await sp.web.lists.getByTitle(\"My List\").fields.addNumber(\"My Field\", { MinimumValue: 1, MaximumValue: 100, Group: \"My Group\" });\n\n// we can use this 'field' variable to run more queries on the field:\nconst r = await field.field.select(\"Id\")();\n\n// log the field Id to console\nconsole.log(r.Id);\n</code></pre>"},{"location":"sp/fields/#add-a-url-field","title":"Add a URL Field","text":"<p>Use the addUrl method to create a new url field.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { UrlFieldFormatType } from \"@pnp/sp/fields/types\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/fields\";\n\nconst sp = spfi(...);\n\n// create a new url field called 'My Field' in web\nconst field = await sp.web.fields.addUrl(\"My Field\", { DisplayFormat: UrlFieldFormatType.Hyperlink, Group: \"My Group\" });\n// create a new url field called 'My Field' in list 'My List'\nconst field2 = await sp.web.lists.getByTitle(\"My List\").fields.addUrl(\"My Field\", { DisplayFormat: UrlFieldFormatType.Hyperlink, Group: \"My Group\" });\n\n// we can use this 'field' variable to run more queries on the field:\nconst r = await field.field.select(\"Id\")();\n\n// log the field Id to console\nconsole.log(r.Id);\n</code></pre>"},{"location":"sp/fields/#add-a-user-field","title":"Add a User Field","text":"<p>Use the addUser method to create a new user field.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { FieldUserSelectionMode } from \"@pnp/sp/fields/types\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/fields\";\n\nconst sp = spfi(...);\n\n// create a new user field called 'My Field' in web\nconst field = await sp.web.fields.addUser(\"My Field\", { SelectionMode: FieldUserSelectionMode.PeopleOnly, Group: \"My Group\" });\n// create a new user field called 'My Field' in list 'My List'\nconst field2 = await sp.web.lists.getByTitle(\"My List\").fields.addUser(\"My Field\", { SelectionMode: FieldUserSelectionMode.PeopleOnly, Group: \"My Group\" });\n\n// we can use this 'field' variable to run more queries on the field:\nconst r = await field.field.select(\"Id\")();\n\n// log the field Id to console\nconsole.log(r.Id);\n\n// **\n// Adding a lookup that supports multiple values takes two calls:\nconst fieldAddResult = await sp.web.fields.addUser(\"Multi User Field\", { SelectionMode: FieldUserSelectionMode.PeopleOnly });\nawait fieldAddResult.field.update({ AllowMultipleValues: true }, \"SP.FieldUser\");\n</code></pre>"},{"location":"sp/fields/#add-a-lookup-field","title":"Add a Lookup Field","text":"<p>Use the addLookup method to create a new lookup field.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { FieldTypes } from \"@pnp/sp/fields/types\";\n\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/fields\";\n\nconst sp = spfi(...);\n\nconst list = await sp.web.lists.getByTitle(\"My Lookup List\")();\n// create a new lookup field called 'My Field' based on an existing list 'My Lookup List' showing 'Title' field in web.\nconst field = await sp.web.fields.addLookup(\"My Field\", { LookupListId: list.data.Id, LookupFieldName: \"Title\" });\n// create a new lookup field called 'My Field' based on an existing list 'My Lookup List' showing 'Title' field in list 'My List'\nconst field2 = await sp.web.lists.getByTitle(\"My List\").fields.addLookup(\"My Field\", {LookupListId: list.data.Id, LookupFieldName: \"Title\"});\n\n// we can use this 'field' variable to run more queries on the field:\nconst r = await field.field.select(\"Id\")();\n\n// log the field Id to console\nconsole.log(r.Id);\n\n// **\n// Adding a lookup that supports multiple values takes two calls:\nconst fieldAddResult = await sp.web.fields.addLookup(\"Multi Lookup Field\", { LookupListId: list.data.Id, LookupFieldName: \"Title\" });\nawait fieldAddResult.field.update({ AllowMultipleValues: true }, \"SP.FieldLookup\");\n</code></pre>"},{"location":"sp/fields/#add-a-choice-field","title":"Add a Choice Field","text":"<p>Use the addChoice method to create a new choice field.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { ChoiceFieldFormatType } from \"@pnp/sp/fields/types\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/fields\";\n\nconst sp = spfi(...);\n\nconst choices = [`ChoiceA`, `ChoiceB`, `ChoiceC`];\n// create a new choice field called 'My Field' in web\nconst field = await sp.web.fields.addChoice(\"My Field\", { Choices: choices, EditFormat: ChoiceFieldFormatType.Dropdown, FillInChoice: false, Group: \"My Group\" });\n// create a new choice field called 'My Field' in list 'My List'\nconst field2 = await sp.web.lists.getByTitle(\"My List\").fields.addChoice(\"My Field\", { Choices: choices, EditFormat: ChoiceFieldFormatType.Dropdown, FillInChoice: false, Group: \"My Group\" });\n\n// we can use this 'field' variable to run more queries on the field:\nconst r = await field.field.select(\"Id\")();\n\n// log the field Id to console\nconsole.log(r.Id);\n</code></pre>"},{"location":"sp/fields/#add-a-multi-choice-field","title":"Add a Multi-Choice Field","text":"<p>Use the addMultiChoice method to create a new multi-choice field.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { ChoiceFieldFormatType } from \"@pnp/sp/fields/types\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/fields\";\n\nconst sp = spfi(...);\n\nconst choices = [`ChoiceA`, `ChoiceB`, `ChoiceC`];\n// create a new multi-choice field called 'My Field' in web\nconst field = await sp.web.fields.addMultiChoice(\"My Field\", { Choices: choices, FillInChoice: false, Group: \"My Group\" });\n// create a new multi-choice field called 'My Field' in list 'My List'\nconst field2 = await sp.web.lists.getByTitle(\"My List\").fields.addMultiChoice(\"My Field\", { Choices: choices, FillInChoice: false, Group: \"My Group\" });\n\n// we can use this 'field' variable to run more queries on the field:\nconst r = await field.field.select(\"Id\")();\n\n// log the field Id to console\nconsole.log(r.Id);\n</code></pre>"},{"location":"sp/fields/#add-a-boolean-field","title":"Add a Boolean Field","text":"<p>Use the addBoolean method to create a new boolean field.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/fields\";\n\nconst sp = spfi(...);\n\n// create a new boolean field called 'My Field' in web\nconst field = await sp.web.fields.addBoolean(\"My Field\", { Group: \"My Group\" });\n// create a new boolean field called 'My Field' in list 'My List'\nconst field2 = await sp.web.lists.getByTitle(\"My List\").fields.addBoolean(\"My Field\", { Group: \"My Group\" });\n\n// we can use this 'field' variable to run more queries on the field:\nconst r = await field.field.select(\"Id\")();\n\n// log the field Id to console\nconsole.log(r.Id);\n</code></pre>"},{"location":"sp/fields/#add-a-dependent-lookup-field","title":"Add a Dependent Lookup Field","text":"<p>Use the addDependentLookupField method to create a new dependent lookup field.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/fields\";\n\nconst sp = spfi(...);\n\nconst field = await sp.web.fields.addLookup(\"My Field\", { LookupListId: list.Id, LookupFieldName: \"Title\" });\n// create a new dependent lookup field called 'My Dep Field' showing 'Description' based on an existing 'My Field' lookup field in web.\nconst fieldDep = await sp.web.fields.addDependentLookupField(\"My Dep Field\", field.data.Id as string, \"Description\");\n// create a new dependent lookup field called 'My Dep Field' showing 'Description' based on an existing 'My Field' lookup field in list 'My List'\nconst field2 = await sp.web.lists.getByTitle(\"My List\").fields.addLookup(\"My Field\", { LookupListId: list.Id, LookupFieldName: \"Title\" });\nconst fieldDep2 = await sp.web.lists.getByTitle(\"My List\").fields.addDependentLookupField(\"My Dep Field\", field2.data.Id as string, \"Description\");\n\n// we can use this 'fieldDep' variable to run more queries on the field:\nconst r = await fieldDep.field.select(\"Id\")();\n\n// log the field Id to console\nconsole.log(r.Id);\n</code></pre>"},{"location":"sp/fields/#add-a-location-field","title":"Add a Location Field","text":"<p>Use the addLocation method to create a new location field.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/fields\";\n\nconst sp = spfi(...);\n\n// create a new location field called 'My Field' in web\nconst field = await sp.web.fields.addLocation(\"My Field\", { Group: \"My Group\" });\n// create a new location field called 'My Field' in list 'My List'\nconst field2 = await sp.web.lists.getByTitle(\"My List\").fields.addLocation(\"My Field\", { Group: \"My Group\" });\n\n// we can use this 'field' variable to run more queries on the field:\nconst r = await field.field.select(\"Id\")();\n\n// log the field Id to console\nconsole.log(r.Id);\n</code></pre>"},{"location":"sp/fields/#delete-a-field","title":"Delete a Field","text":"<p>Use the delete method to delete a field.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/fields\";\n\nconst sp = spfi(...);\n\nawait sp.web.fields.addBoolean(\"Temp Field\", { Group: \"My Group\" });\nawait sp.web.fields.addBoolean(\"Temp Field 2\", { Group: \"My Group\" });\nawait sp.web.lists.getByTitle(\"My List\").fields.addBoolean(\"Temp Field\", { Group: \"My Group\" });\nawait sp.web.lists.getByTitle(\"My List\").fields.addBoolean(\"Temp Field 2\", { Group: \"My Group\" });\n\n// delete one or more fields from web, returns boolean\nconst result = await sp.web.fields.getByTitle(\"Temp Field\").delete();\nconst result2 = await sp.web.fields.getByTitle(\"Temp Field 2\").delete();\n\n\n// delete one or more fields from list 'My List', returns boolean\nconst result = await sp.web.lists.getByTitle(\"My List\").fields.getByTitle(\"Temp Field\").delete();\nconst result2 = await sp.web.lists.getByTitle(\"My List\").fields.getByTitle(\"Temp Field 2\").delete();\n</code></pre>"},{"location":"sp/fields/#update-a-field","title":"Update a Field","text":"<p>Use the update method to update a field.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/fields\";\n\nconst sp = spfi(...);\n\n// update the field called 'My Field' with a description in web, returns FieldUpdateResult\nconst fieldUpdate = await sp.web.fields.getByTitle(\"My Field\").update({ Description: \"My Description\" });\n// update the field called 'My Field' with a description in list 'My List', returns FieldUpdateResult\nconst fieldUpdate2 = await sp.web.lists.getByTitle(\"My List\").fields.getByTitle(\"My Field\").update({ Description: \"My Description\" });\n\n// if you need to update a field with properties for a specific field type you can optionally include the field type as a second param\n// if you do not include it we will look up the type, but that adds a call to the server\nconst fieldUpdate2 = await sp.web.lists.getByTitle(\"My List\").fields.getByTitle(\"My Look up Field\").update({ RelationshipDeleteBehavior: 1 }, \"SP.FieldLookup\");\n</code></pre>"},{"location":"sp/fields/#show-a-field-in-the-display-form","title":"Show a Field in the Display Form","text":"<p>Use the setShowInDisplayForm method to add a field to the display form.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/fields\";\n\nconst sp = spfi(...);\n\n// show field called 'My Field' in display form throughout web\nawait sp.web.fields.getByTitle(\"My Field\").setShowInDisplayForm(true);\n// show field called 'My Field' in display form for list 'My List'\nawait sp.web.lists.getByTitle(\"My List\").fields.getByTitle(\"My Field\").setShowInDisplayForm(true);\n</code></pre>"},{"location":"sp/fields/#show-a-field-in-the-edit-form","title":"Show a Field in the Edit Form","text":"<p>Use the setShowInEditForm method to add a field to the edit form.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/fields\";\n\nconst sp = spfi(...);\n\n// show field called 'My Field' in edit form throughout web\nawait sp.web.fields.getByTitle(\"My Field\").setShowInEditForm(true);\n// show field called 'My Field' in edit form for list 'My List'\nawait sp.web.lists.getByTitle(\"My List\").fields.getByTitle(\"My Field\").setShowInEditForm(true);\n</code></pre>"},{"location":"sp/fields/#show-a-field-in-the-new-form","title":"Show a Field in the New Form","text":"<p>Use the setShowInNewForm method to add a field to the display form.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/fields\";\n\nconst sp = spfi(...);\n\n// show field called 'My Field' in new form throughout web\nawait sp.web.fields.getByTitle(\"My Field\").setShowInNewForm(true);\n// show field called 'My Field' in new form for list 'My List'\nawait sp.web.lists.getByTitle(\"My List\").fields.getByTitle(\"My Field\").setShowInNewForm(true);\n</code></pre>"},{"location":"sp/files/","title":"@pnp/sp/files","text":"<p>One of the more challenging tasks on the client side is working with SharePoint files, especially if they are large files. We have added some methods to the library to help and their use is outlined below.</p>"},{"location":"sp/files/#reading-files","title":"Reading Files","text":"<p>Reading files from the client using REST is covered in the below examples. The important thing to remember is choosing which format you want the file in so you can appropriately process it. You can retrieve a file as Blob, Buffer, JSON, or Text. If you have a special requirement you could also write your own parser.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/files\";\nimport \"@pnp/sp/folders\";\n\nconst sp = spfi(...);\n\nconst blob: Blob = await sp.web.getFileByServerRelativePath(\"/sites/dev/documents/file.avi\").getBlob();\n\nconst buffer: ArrayBuffer = await sp.web.getFileByServerRelativePath(\"/sites/dev/documents/file.avi\").getBuffer();\n\nconst json: any = await sp.web.getFileByServerRelativePath(\"/sites/dev/documents/file.json\").getJSON();\n\nconst text: string = await sp.web.getFileByServerRelativePath(\"/sites/dev/documents/file.txt\").getText();\n\n// all of these also work from a file object no matter how you access it\nconst text2: string = await sp.web.getFolderByServerRelativePath(\"/sites/dev/documents\").files.getByUrl(\"file.txt\").getText();\n</code></pre>"},{"location":"sp/files/#getfilebyurl","title":"getFileByUrl","text":"<p>This method supports opening files from sharing links or absolute urls. The file must reside in the site from which you are trying to open the file.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/files/web\";\n\nconst sp = spfi(...);\n\nconst url = \"{absolute file url OR sharing url}\";\n\n// file is an IFile and supports all the file operations\nconst file = sp.web.getFileByUrl(url);\n\n// for example\nconst fileContent = await file.getText();\n</code></pre>"},{"location":"sp/files/#filefromserverrelativepath","title":"fileFromServerRelativePath","text":"<p>Added in 3.3.0</p> <p>Utility method allowing you to get an IFile reference using any SPQueryable as a base and the server relative path to the file. Helpful when you do not have convenient access to an IWeb to use <code>getFileByServerRelativePath</code>.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport { fileFromServerRelativePath } from \"@pnp/sp/files\";\n\nconst sp = spfi(...);\n\nconst url = \"/sites/dev/documents/file.txt\";\n\n// file is an IFile and supports all the file operations\nconst file = fileFromServerRelativePath(sp.web, url);\n\n// for example\nconst fileContent = await file.getText();\n</code></pre>"},{"location":"sp/files/#filefromabsolutepath","title":"fileFromAbsolutePath","text":"<p>Added in 3.8.0</p> <p></p> <p>Utility method allowing you to get an IFile reference using any SPQueryable as a base and an absolute path to the file.</p> <p>Works across site collections within the same tenant</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport { fileFromAbsolutePath } from \"@pnp/sp/files\";\n\nconst sp = spfi(...);\n\nconst url = \"https://tenant.sharepoint.com/sites/dev/documents/file.txt\";\n\n// file is an IFile and supports all the file operations\nconst file = fileFromAbsolutePath(sp.web, url);\n\n// for example\nconst fileContent = await file.getText();\n</code></pre>"},{"location":"sp/files/#filefrompath","title":"fileFromPath","text":"<p>Added in 3.8.0</p> <p></p> <p>Utility method allowing you to get an IFile reference using any SPQueryable as a base and an absolute OR server relative path to the file.</p> <p>Works across site collections within the same tenant</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport { fileFromPath } from \"@pnp/sp/files\";\n\nconst sp = spfi(...);\n\nconst url = \"https://tenant.sharepoint.com/sites/dev/documents/file.txt\";\n\n// file is an IFile and supports all the file operations\nconst file = fileFromPath(sp.web, url);\n\n// for example\nconst fileContent = await file.getText();\n\nconst url2 = \"/sites/dev/documents/file.txt\";\n\n// file is an IFile and supports all the file operations\nconst file2 = fileFromPath(sp.web, url2);\n\n// for example\nconst fileContent2 = await file2.getText();\n</code></pre>"},{"location":"sp/files/#adding-files","title":"Adding Files","text":"<p>Likewise you can add files using one of two methods, addUsingPath or addChunked. AddChunked is appropriate for larger files, generally larger than 10 MB but this may differ based on your bandwidth/latency so you can adjust the code to use the chunked method. The below example shows getting the file object from an input and uploading it to SharePoint, choosing the upload method based on file size.</p> <p>The addUsingPath method, supports the percent or pound characters in file names.</p> <p>When using EnsureUniqueFileName property, you must omit the Overwrite parameter.</p> <p></p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/files\";\nimport \"@pnp/sp/folders\";\n\nconst sp = spfi(...);\n\n//Sample uses pure JavaScript to access the input tag of type=\"file\" -&gt;https://www.w3schools.com/tags/att_input_type_file.asp \nlet file = &lt;HTMLInputElement&gt;document.getElementById(\"thefileinput\");\nconst fileNamePath = encodeURI(file.name);\nlet result: IFileAddResult;\n// you can adjust this number to control what size files are uploaded in chunks\nif (file.size &lt;= 10485760) {\n    // small upload\n    result = await sp.web.getFolderByServerRelativePath(\"Shared Documents\").files.addUsingPath(fileNamePath, file, { Overwrite: true });\n} else {\n    // large upload\n    result = await sp.web.getFolderByServerRelativePath(\"Shared Documents\").files.addChunked(fileNamePath, file, data =&gt; {\n    console.log(`progress`);\n    }, true);\n}\n\nconsole.log(`Result of file upload: ${JSON.stringify(result)}`);\n</code></pre>"},{"location":"sp/files/#adding-a-file-using-nodejs-streams","title":"Adding a file using Nodejs Streams","text":"<p>If you are working in nodejs you can also add a file using a stream. This example makes a copy of a file using streams.</p> <p></p> <pre><code>// triggers auto-application of extensions, in this case to add getStream\nimport { spfi } from \"@pnp/sp\";\nimport \"@pnp/nodejs\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/folders/list\";\nimport \"@pnp/sp/files/folder\";\nimport { createReadStream } from 'fs';\n\n// get a stream of an existing file\nconst stream = createReadStream(\"c:/temp/file.txt\");\n\n// now add the stream as a new file\nconst sp = spfi(...);\n\nconst fr = await sp.web.lists.getByTitle(\"Documents\").rootFolder.files.addChunked( \"new.txt\", stream, undefined, true );\n</code></pre>"},{"location":"sp/files/#setting-associated-item-values","title":"Setting Associated Item Values","text":"<p>You can also update the file properties of a newly uploaded file using code similar to the below snippet:</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/files\";\nimport \"@pnp/sp/folders\";\n\nconst sp = spfi(...);\nconst file = await sp.web.getFolderByServerRelativePath(\"/sites/dev/Shared%20Documents/test/\").files.addUsingPath(\"file.name\", \"content\", {Overwrite: true});\nconst item = await file.file.getItem();\nawait item.update({\n  Title: \"A Title\",\n  OtherField: \"My Other Value\"\n});\n</code></pre>"},{"location":"sp/files/#update-file-content","title":"Update File Content","text":"<p>You can of course use similar methods to update existing files as shown below. This overwrites the existing content in the file.</p> <p></p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/files\";\nimport \"@pnp/sp/folders\";\n\nconst sp = spfi(...);\nawait sp.web.getFileByServerRelativePath(\"/sites/dev/documents/test.txt\").setContent(\"New string content for the file.\");\n\nawait sp.web.getFileByServerRelativePath(\"/sites/dev/documents/test.mp4\").setContentChunked(file);\n</code></pre>"},{"location":"sp/files/#check-in-check-out-and-approve-deny","title":"Check in, Check out, and Approve &amp; Deny","text":"<p>The library provides helper methods for checking in, checking out, and approving files. Examples of these methods are shown below.</p>"},{"location":"sp/files/#check-in","title":"Check In","text":"<p>Check in takes two optional arguments, comment and check in type.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { CheckinType } from \"@pnp/sp/files\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/files\";\n\nconst sp = spfi(...);\n\n// default options with empty comment and CheckinType.Major\nawait sp.web.getFileByServerRelativePath(\"/sites/dev/shared documents/file.txt\").checkin();\nconsole.log(\"File checked in!\");\n\n// supply a comment (&lt; 1024 chars) and using default check in type CheckinType.Major\nawait sp.web.getFileByServerRelativePath(\"/sites/dev/shared documents/file.txt\").checkin(\"A comment\");\nconsole.log(\"File checked in!\");\n\n// Supply both comment and check in type\nawait sp.web.getFileByServerRelativePath(\"/sites/dev/shared documents/file.txt\").checkin(\"A comment\", CheckinType.Overwrite);\nconsole.log(\"File checked in!\");\n</code></pre>"},{"location":"sp/files/#check-out","title":"Check Out","text":"<p>Check out takes no arguments.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/files\";\n\nconst sp = spfi(...);\n\nsp.web.getFileByServerRelativePath(\"/sites/dev/shared documents/file.txt\").checkout();\nconsole.log(\"File checked out!\");\n</code></pre>"},{"location":"sp/files/#approve-and-deny","title":"Approve and Deny","text":"<p>You can also approve or deny files in libraries that use approval. Approve takes a single required argument of comment, the comment is optional for deny.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/files\";\n\nconst sp = spfi(...);\n\nawait sp.web.getFileByServerRelativePath(\"/sites/dev/shared documents/file.txt\").approve(\"Approval Comment\");\nconsole.log(\"File approved!\");\n\n// deny with no comment\nawait sp.web.getFileByServerRelativePath(\"/sites/dev/shared documents/file.txt\").deny();\nconsole.log(\"File denied!\");\n\n// deny with a supplied comment.\nawait sp.web.getFileByServerRelativePath(\"/sites/dev/shared documents/file.txt\").deny(\"Deny comment\");\nconsole.log(\"File denied!\");\n</code></pre>"},{"location":"sp/files/#publish-and-unpublish","title":"Publish and Unpublish","text":"<p>You can both publish and unpublish a file using the library. Both methods take an optional comment argument.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/files\";\n\nconst sp = spfi(...);\n\n// publish with no comment\nawait sp.web.getFileByServerRelativePath(\"/sites/dev/shared documents/file.txt\").publish();\nconsole.log(\"File published!\");\n\n// publish with a supplied comment.\nawait sp.web.getFileByServerRelativePath(\"/sites/dev/shared documents/file.txt\").publish(\"Publish comment\");\nconsole.log(\"File published!\");\n\n// unpublish with no comment\nawait sp.web.getFileByServerRelativePath(\"/sites/dev/shared documents/file.txt\").unpublish();\nconsole.log(\"File unpublished!\");\n\n// unpublish with a supplied comment.\nawait sp.web.getFileByServerRelativePath(\"/sites/dev/shared documents/file.txt\").unpublish(\"Unpublish comment\");\nconsole.log(\"File unpublished!\");\n</code></pre>"},{"location":"sp/files/#advanced-upload-options","title":"Advanced Upload Options","text":"<p>Both the addChunked and setContentChunked methods support options beyond just supplying the file content.</p> <p></p>"},{"location":"sp/files/#progress-function","title":"progress function","text":"<p>A method that is called each time a chunk is uploaded and provides enough information to report progress or update a progress bar easily. The method has the signature:</p> <p><code>(data: ChunkedFileUploadProgressData) =&gt; void</code></p> <p>The data interface is:</p> <pre><code>export interface ChunkedFileUploadProgressData {\n    stage: \"starting\" | \"continue\" | \"finishing\";\n    blockNumber: number;\n    totalBlocks: number;\n    chunkSize: number;\n    currentPointer: number;\n    fileSize: number;\n}\n</code></pre>"},{"location":"sp/files/#chunksize","title":"chunkSize","text":"<p>This property controls the size of the individual chunks and is defaulted to 10485760 bytes (10 MB). You can adjust this based on your bandwidth needs - especially if writing code for mobile uploads or you are seeing frequent timeouts.</p>"},{"location":"sp/files/#getitem","title":"getItem","text":"<p>This method allows you to get the item associated with this file. You can optionally specify one or more select fields. The result will be merged with a new Item instance so you will have both the returned property values and chaining ability in a single object.</p> <pre><code>import { spFI, SPFx } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/files\";\nimport \"@pnp/sp/folders\";\nimport \"@pnp/sp/security\";\n\nconst sp = spfi(...);\n\nconst item = await sp.web.getFileByServerRelativePath(\"/sites/dev/Shared Documents/test.txt\").getItem();\nconsole.log(item);\n\nconst item2 = await sp.web.getFileByServerRelativePath(\"/sites/dev/Shared Documents/test.txt\").getItem(\"Title\", \"Modified\");\nconsole.log(item2);\n\n// you can also chain directly off this item instance\nconst perms = await item.getCurrentUserEffectivePermissions();\nconsole.log(perms);\n</code></pre> <p>You can also supply a generic typing parameter and the resulting type will be a union type of Item and the generic type parameter. This allows you to have proper intellisense and type checking.</p> <pre><code>import { spFI, SPFx } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/files\";\nimport \"@pnp/sp/folders\";\nimport \"@pnp/sp/items\";\nimport \"@pnp/sp/security\";\n\nconst sp = spfi(...);\n\n// also supports typing the objects so your type will be a union type\nconst item = await sp.web.getFileByServerRelativePath(\"/sites/dev/Shared Documents/test.txt\").getItem&lt;{ Id: number, Title: string }&gt;(\"Id\", \"Title\");\n\n// You get intellisense and proper typing of the returned object\nconsole.log(`Id: ${item.Id} -- ${item.Title}`);\n\n// You can also chain directly off this item instance\nconst perms = await item.getCurrentUserEffectivePermissions();\nconsole.log(perms);\n</code></pre>"},{"location":"sp/files/#move-by-path","title":"move by path","text":"<p>It's possible to move a file to a new destination within a site collection  </p> <p>If you change the filename during the move operation this is considered an \"edit\" and the file's modified information will be updated regardless of the \"RetainEditorAndModifiedOnMove\" setting.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/files\";\n\nconst sp = spfi(...);\n\n// destination is a server-relative url of a new file\nconst destinationUrl = `/sites/dev/SiteAssets/new-file.docx`;\n\nawait sp.web.getFileByServerRelativePath(\"/sites/dev/Shared Documents/test.docx\").moveByPath(destinationUrl, false, true);\n</code></pre> <p>Added in 3.7.0</p> <p>You can also supply a set of detailed options to better control the move process:</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/files\";\n\nconst sp = spfi(...);\n\n// destination is a server-relative url of a new file\nconst destinationUrl = `/sites/dev2/SiteAssets/new-file.docx`;\n\nawait sp.web.getFileByServerRelativePath(\"/sites/dev/Shared Documents/new-file.docx\").moveByPath(destinationUrl, false, {\n    KeepBoth: false,\n    RetainEditorAndModifiedOnMove: true,\n    ShouldBypassSharedLocks: false,\n});\n</code></pre>"},{"location":"sp/files/#copy","title":"copy","text":"<p>It's possible to copy a file to a new destination within a site collection  </p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/files\";\n\nconst sp = spfi(...);\n\n// destination is a server-relative url of a new file\nconst destinationUrl = `/sites/dev/SiteAssets/new-file.docx`;\n\nawait sp.web.getFileByServerRelativePath(\"/sites/dev/Shared Documents/test.docx\").copyTo(destinationUrl, false);\n</code></pre>"},{"location":"sp/files/#copy-by-path","title":"copy by path","text":"<p>It's possible to copy a file to a new destination within the same or a different site collection.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/files\";\n\nconst sp = spfi(...);\n\n// destination is a server-relative url of a new file\nconst destinationUrl = `/sites/dev2/SiteAssets/new-file.docx`;\n\nawait sp.web.getFileByServerRelativePath(\"/sites/dev/Shared Documents/test.docx\").copyByPath(destinationUrl, false, true);\n</code></pre> <p>Added in 3.7.0</p> <p>You can also supply a set of detailed options to better control the copy process:</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/files\";\n\nconst sp = spfi(...);\n\n// destination is a server-relative url of a new file\nconst destinationUrl = `/sites/dev2/SiteAssets/new-file.docx`;\n\nawait sp.web.getFileByServerRelativePath(\"/sites/dev/Shared Documents/test.docx\").copyByPath(destinationUrl, false, {\n    KeepBoth: false,\n    ResetAuthorAndCreatedOnCopy: true,\n    ShouldBypassSharedLocks: false,\n});\n</code></pre>"},{"location":"sp/files/#getfilebyid","title":"getFileById","text":"<p>You can get a file by Id from a web.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/files\";\nimport { IFile } from \"@pnp/sp/files\";\n\nconst sp = spfi(...);\n\nconst file: IFile = sp.web.getFileById(\"2b281c7b-ece9-4b76-82f9-f5cf5e152ba0\");\n</code></pre>"},{"location":"sp/files/#delete","title":"delete","text":"<p>Deletes a file</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/files\";\n\nconst sp = spfi(...);\nawait sp.web.getFolderByServerRelativePath(\"{folder relative path}\").files.getByUrl(\"filename.txt\").delete();\n</code></pre>"},{"location":"sp/files/#delete-with-params","title":"delete with params","text":"<p>Deletes a file with options</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/files\";\n\nconst sp = spfi(...);\nawait sp.web.getFolderByServerRelativePath(\"{folder relative path}\").files.getByUrl(\"filename.txt\").deleteWithParams({\n    BypassSharedLock: true,\n});\n</code></pre>"},{"location":"sp/files/#exists","title":"exists","text":"<p>Checks to see if a file exists</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/files\";\n\nconst sp = spfi(...);\nconst exists = await sp.web.getFolderByServerRelativePath(\"{folder relative path}\").files.getByUrl(\"name.txt\").exists();\n</code></pre>"},{"location":"sp/files/#lockedbyuser","title":"lockedByUser","text":"<p>Gets the user who currently has this file locked for shared use</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/files\";\n\nconst sp = spfi(...);\nconst user = await sp.web.getFolderByServerRelativePath(\"{folder relative path}\").files.getByUrl(\"name.txt\").getLockedByUser();\n</code></pre>"},{"location":"sp/folders/","title":"@pnp/sp/folders","text":"<p>Folders serve as a container for your files and list items.</p>"},{"location":"sp/folders/#ifolders","title":"IFolders","text":"<p>Represents a collection of folders. SharePoint webs, lists, and list items have a collection of folders under their properties.</p>"},{"location":"sp/folders/#get-folders-collection-for-various-sharepoint-objects","title":"Get folders collection for various SharePoint objects","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/items\";\nimport \"@pnp/sp/folders\";\nimport \"@pnp/sp/lists\";\n\nconst sp = spfi(...);\n\n// gets web's folders\nconst webFolders = await sp.web.folders();\n\n// gets list's folders\nconst listFolders = await sp.web.lists.getByTitle(\"My List\").rootFolder.folders();\n\n// gets item's folders\nconst itemFolders = await sp.web.lists.getByTitle(\"My List\").items.getById(1).folder.folders();\n</code></pre>"},{"location":"sp/folders/#folderfromserverrelativepath","title":"folderFromServerRelativePath","text":"<p>Added in 3.3.0</p> <p>Utility method allowing you to get an IFolder reference using any SPQueryable as a base and the server relative path to the folder. Helpful when you do not have convenient access to an IWeb to use <code>getFolderByServerRelativePath</code>.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport { folderFromServerRelativePath } from \"@pnp/sp/folders\";\n\nconst sp = spfi(...);\n\nconst url = \"/sites/dev/documents/folder4\";\n\n// file is an IFile and supports all the file operations\nconst folder = folderFromServerRelativePath(sp.web, url);\n</code></pre>"},{"location":"sp/folders/#folderfromabsolutepath","title":"folderFromAbsolutePath","text":"<p>Added in 3.8.0</p> <p>Utility method allowing you to get an IFile reference using any SPQueryable as a base and an absolute path to the file.</p> <p>Works across site collections within the same tenant</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport { folderFromAbsolutePath } from \"@pnp/sp/folders\";\n\nconst sp = spfi(...);\n\nconst url = \"https://tenant.sharepoint.com/sites/dev/documents/folder\";\n\n// file is an IFile and supports all the file operations\nconst folder = folderFromAbsolutePath(sp.web, url);\n\n// for example\nconst folderInfo = await folder();\n</code></pre>"},{"location":"sp/folders/#folderfrompath","title":"folderFromPath","text":"<p>Added in 3.8.0</p> <p>Utility method allowing you to get an IFolder reference using any SPQueryable as a base and an absolute OR server relative path to the file.</p> <p>Works across site collections within the same tenant</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport { folderFromPath } from \"@pnp/sp/folders\";\n\nconst sp = spfi(...);\n\nconst url = \"https://tenant.sharepoint.com/sites/dev/documents/folder\";\n\n// file is an IFile and supports all the file operations\nconst folder = folderFromPath(sp.web, url);\n\n// for example\nconst folderInfo = await folder();\n\nconst url2 = \"/sites/dev/documents/folder\";\n\n// file is an IFile and supports all the file operations\nconst folder2 = folderFromPath(sp.web, url2);\n\n// for example\nconst folderInfo2 = await folder2();\n</code></pre>"},{"location":"sp/folders/#add","title":"add","text":"<p>Adds a new folder to collection of folders</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/folders\";\n\nconst sp = spfi(...);\n\n// creates a new folder for web with specified url\nconst folderAddResult = await sp.web.folders.addUsingPath(\"folder url\");\n</code></pre>"},{"location":"sp/folders/#getbyurl","title":"getByUrl","text":"<p>Gets a folder instance from a collection by folder's name</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/folders\";\n\nconst sp = spfi(...);\n\nconst folder = await sp.web.folders.getByUrl(\"folder name\")();\n</code></pre>"},{"location":"sp/folders/#ifolder","title":"IFolder","text":"<p>Represents an instance of a SharePoint folder.</p> <p> </p>"},{"location":"sp/folders/#get-a-folder-object-associated-with-different-sharepoint-artifacts-web-list-list-item","title":"Get a folder object associated with different SharePoint artifacts (web, list, list item)","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/folders\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/items\";\n\nconst sp = spfi(...);\n\n// web's folder\nconst rootFolder = await sp.web.rootFolder();\n\n// list's folder\nconst listRootFolder = await sp.web.lists.getByTitle(\"234\").rootFolder();\n\n// item's folder\nconst itemFolder = await sp.web.lists.getByTitle(\"234\").items.getById(1).folder();\n</code></pre>"},{"location":"sp/folders/#getitem","title":"getItem","text":"<p>Gets list item associated with a folder</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/folders\";\n\nconst sp = spfi(...);\n\nconst folderItem = await sp.web.rootFolder.folders.getByUrl(\"SiteAssets\").folders.getByUrl(\"My Folder\").getItem();\n</code></pre>"},{"location":"sp/folders/#storagemetrics","title":"storageMetrics","text":"<p>Added in 3.8.0</p> <p>Gets a set of metrics describing the total file size contained in the folder.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/folders\";\n\nconst sp = spfi(...);\n\nconst metrics = await sp.web.getFolderByServerRelativePath(\"/sites/dev/shared documents/target\").storageMetrics();\n\n// you can also select specific metrics if desired:\nconst metrics2 = await sp.web.getFolderByServerRelativePath(\"/sites/dev/shared documents/target\").storageMetrics.select(\"TotalSize\")();\n</code></pre>"},{"location":"sp/folders/#move-by-path","title":"move by path","text":"<p>It's possible to move a folder to a new destination within the same or a different site collection  </p> <p>If you change the filename during the move operation this is considered an \"edit\" and the file's modified information will be updated regardless of the \"RetainEditorAndModifiedOnMove\" setting.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/folders\";\n\nconst sp = spfi(...);\n\n// destination is a server-relative url of a new folder\nconst destinationUrl = `/sites/my-site/SiteAssets/new-folder`;\n\nawait sp.web.rootFolder.folders.getByUrl(\"SiteAssets\").folders.getByUrl(\"My Folder\").moveByPath(destinationUrl, true);\n</code></pre> <p>Added in 3.8.0</p> <p>You can also supply a set of detailed options to better control the move process:</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/folders\";\n\nconst sp = spfi(...);\n\n// destination is a server-relative url of a new file\nconst destinationUrl = `/sites/dev2/SiteAssets/folder`;\n\nawait sp.web.getFolderByServerRelativePath(\"/sites/dev/Shared Documents/folder\").moveByPath(destinationUrl, {\n    KeepBoth: false,\n    RetainEditorAndModifiedOnMove: true,\n    ShouldBypassSharedLocks: false,\n});\n</code></pre>"},{"location":"sp/folders/#copy-by-path","title":"copy by path","text":"<p>It's possible to copy a folder to a new destination within the same or a different site collection  </p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/folders\";\n\nconst sp = spfi(...);\n\n// destination is a server-relative url of a new folder\nconst destinationUrl = `/sites/my-site/SiteAssets/new-folder`;\n\nawait sp.web.rootFolder.folders.getByUrl(\"SiteAssets\").folders.getByUrl(\"My Folder\").copyByPath(destinationUrl, true);\n</code></pre> <p>Added in 3.8.0</p> <p>You can also supply a set of detailed options to better control the copy process:</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/folders\";\n\nconst sp = spfi(...);\n\n// destination is a server-relative url of a new file\nconst destinationUrl = `/sites/dev2/SiteAssets/folder`;\n\nawait sp.web.getFolderByServerRelativePath(\"/sites/dev/Shared Documents/folder\").copyByPath(destinationUrl, false, {\n    KeepBoth: false,\n    ResetAuthorAndCreatedOnCopy: true,\n    ShouldBypassSharedLocks: false,\n});\n</code></pre>"},{"location":"sp/folders/#delete","title":"delete","text":"<p>Deletes a folder</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/folders\";\n\nconst sp = spfi(...);\n\nawait sp.web.rootFolder.folders.getByUrl(\"My Folder\").delete();\n</code></pre>"},{"location":"sp/folders/#delete-with-params","title":"delete with params","text":"<p>Deletes a folder with options</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/folders\";\n\nconst sp = spfi(...);\n\nawait sp.web.rootFolder.folders.getByUrl(\"My Folder\").deleteWithParams({\n                BypassSharedLock: true,\n                DeleteIfEmpty: true,\n            });\n</code></pre>"},{"location":"sp/folders/#recycle","title":"recycle","text":"<p>Recycles a folder</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/folders\";\n\nconst sp = spfi(...);\n\nawait sp.web.rootFolder.folders.getByUrl(\"My Folder\").recycle();\n</code></pre>"},{"location":"sp/folders/#serverrelativeurl","title":"serverRelativeUrl","text":"<p>Gets folder's server relative url</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/folders\";\n\nconst sp = spfi(...);\n\nconst relUrl = await sp.web.rootFolder.folders.getByUrl(\"SiteAssets\").select('ServerRelativeUrl')();\n</code></pre>"},{"location":"sp/folders/#update","title":"update","text":"<p>Updates folder's properties</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/folders\";\n\nconst sp = spfi(...);\n\nawait sp.web.getFolderByServerRelativePath(\"Shared Documents/Folder2\").update({\n        \"Name\": \"New name\",\n    });\n</code></pre>"},{"location":"sp/folders/#contenttypeorder","title":"contentTypeOrder","text":"<p>Gets content type order of a folder</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/folders\";\n\nconst sp = spfi(...);\n\nconst order = await sp.web.getFolderByServerRelativePath(\"Shared Documents\").select('contentTypeOrder')();\n</code></pre>"},{"location":"sp/folders/#folders","title":"folders","text":"<p>Gets all child folders associated with the current folder</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/folders\";\n\nconst sp = spfi(...);\n\nconst folders = await sp.web.rootFolder.folders();\n</code></pre>"},{"location":"sp/folders/#files","title":"files","text":"<p>Gets all files inside a folder</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/folders\";\nimport \"@pnp/sp/files/folder\";\n\nconst sp = spfi(...);\n\nconst files = await sp.web.getFolderByServerRelativePath(\"Shared Documents\").files();\n</code></pre>"},{"location":"sp/folders/#listitemallfields","title":"listItemAllFields","text":"<p>Gets this folder's list item field values</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/folders\";\n\nconst sp = spfi(...);\n\nconst itemFields = await sp.web.getFolderByServerRelativePath(\"Shared Documents/My Folder\").listItemAllFields();\n</code></pre>"},{"location":"sp/folders/#parentfolder","title":"parentFolder","text":"<p>Gets the parent folder, if available</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/folders\";\n\nconst sp = spfi(...);\n\nconst parentFolder = await sp.web.getFolderByServerRelativePath(\"Shared Documents/My Folder\").parentFolder();\n</code></pre>"},{"location":"sp/folders/#properties","title":"properties","text":"<p>Gets this folder's properties</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/folders\";\n\nconst sp = spfi(...);\n\nconst properties = await sp.web.getFolderByServerRelativePath(\"Shared Documents/Folder2\").properties();\n</code></pre>"},{"location":"sp/folders/#uniquecontenttypeorder","title":"uniqueContentTypeOrder","text":"<p>Gets a value that specifies the content type order.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/folders\";\n\nconst sp = spfi(...);\n\nconst contentTypeOrder = await sp.web.getFolderByServerRelativePath(\"Shared Documents/Folder2\").select('uniqueContentTypeOrder')();\n</code></pre>"},{"location":"sp/folders/#rename-a-folder","title":"Rename a folder","text":"<p>You can rename a folder by updating <code>FileLeafRef</code> property:</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/folders\";\n\nconst sp = spfi(...);\n\nconst folder = sp.web.getFolderByServerRelativePath(\"Shared Documents/My Folder\");\n\nconst item = await folder.getItem();\nconst result = await item.update({ FileLeafRef: \"Folder2\" });\n</code></pre>"},{"location":"sp/folders/#create-a-folder-with-custom-content-type","title":"Create a folder with custom content type","text":"<p>Below code creates a new folder under Document library and assigns custom folder content type to a newly created folder. Additionally it sets a field of a custom folder content type.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/items\";\nimport \"@pnp/sp/folders\";\nimport \"@pnp/sp/lists\";\n\nconst sp = spfi(...);\n\nconst newFolderResult = await sp.web.rootFolder.folders.getByUrl(\"Shared Documents\").folders.addUsingPath(\"My New Folder\");\nconst item = await newFolderResult.folder.listItemAllFields();\n\nawait sp.web.lists.getByTitle(\"Documents\").items.getById(item.ID).update({\n    ContentTypeId: \"0x0120001E76ED75A3E3F3408811F0BF56C4CDDD\",\n    MyFolderField: \"field value\",\n    Title: \"My New Folder\",\n});\n</code></pre>"},{"location":"sp/folders/#addsubfolderusingpath","title":"addSubFolderUsingPath","text":"<p>You can use the addSubFolderUsingPath method to add a folder with some special chars supported</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/folders\";\nimport { IFolder } from \"@pnp/sp/folders\";\n\nconst sp = spfi(...);\n\n// add a folder to site assets\nconst folder: IFolder = await sp.web.rootFolder.folders.getByUrl(\"SiteAssets\").addSubFolderUsingPath(\"folder name\");\n</code></pre>"},{"location":"sp/folders/#getfolderbyid","title":"getFolderById","text":"<p>You can get a folder by Id from a web.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/folders\";\nimport { IFolder } from \"@pnp/sp/folders\";\n\nconst sp = spfi(...);\n\nconst folder: IFolder = sp.web.getFolderById(\"2b281c7b-ece9-4b76-82f9-f5cf5e152ba0\");\n</code></pre>"},{"location":"sp/folders/#getparentinfos","title":"getParentInfos","text":"<p>Gets information about folder, including details about the parent list, parent list root folder, and parent web.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/folders\";\n\nconst sp = spfi(...);\n\nconst folder: IFolder = sp.web.getFolderById(\"2b281c7b-ece9-4b76-82f9-f5cf5e152ba0\");\nawait folder.getParentInfos();\n</code></pre>"},{"location":"sp/forms/","title":"@pnp/sp/forms","text":"<p>Forms in SharePoint are the Display, New, and Edit forms associated with a list.</p>"},{"location":"sp/forms/#iforms","title":"IForms","text":""},{"location":"sp/forms/#get-form-by-id","title":"Get Form by Id","text":"<p>Gets a form from the collection by id (guid). Note that the library will handle a guid formatted with curly braces (i.e. '{03b05ff4-d95d-45ed-841d-3855f77a2483}') as well as without curly braces (i.e. '03b05ff4-d95d-45ed-841d-3855f77a2483'). The Id parameter is also case insensitive.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/forms\";\nimport \"@pnp/sp/lists\";\n\nconst sp = spfi(...);\n\n// get the field by Id for web\nconst form = sp.web.lists.getByTitle(\"Documents\").forms.getById(\"{c4486774-f1e2-4804-96f3-91edf3e22a19}\")();\n</code></pre>"},{"location":"sp/groupSiteManager/","title":"GroupSiteManager","text":""},{"location":"sp/groupSiteManager/#pnpspgroupsitemanager","title":"@pnp/sp/groupsitemanager","text":"<p>The <code>@pnp/sp/groupsitemanager</code> package represents calls to <code>_api/groupsitemanager</code> endpoint and is accessible from any site url.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/groupsitemanager\";\n\nconst sp = spfi(...);\n\n// call method to check if the current user can create Microsoft 365 groups\nconst isUserAllowed = await sp.groupSiteManager.canUserCreateGroup();\n\n// call method to delete a group-connected site\nawait sp.groupSiteManager.delete(\"https://contoso.sharepoint.com/sites/hrteam\");\n\n//call method to gets labels configured for the tenant\nconst orgLabels = await sp.groupSiteManager.getAllOrgLabels(0);\n\n//call method to get information regarding site groupification configuration for the current site context\nconst groupCreationContext = await sp.groupSiteManager.getGroupCreationContext();\n\n//call method to get information regarding site groupification configuration for the current site context\nconst siteData = await sp.groupSiteManager.getGroupSiteConversionData();\n\n// call method to get teams membership for a user\nconst userTeams = await sp.groupSiteManager.getUserTeamConnectedMemberGroups(\"meganb@contoso.onmicrosoft.com\");\n\n// call method to get shared channel memberhsip for user\nconst sharedChannels = await sp.groupSiteManager.getUserSharedChannelMemberGroups(\"meganb@contoso.onmicrosoft.com\");\n\n//call method to get valid site url from Alias\nconst siteUrl = await sp.groupSiteManager.getValidSiteUrlFromAlias(\"contoso\");\n\n//call method to check if teamify prompt is hidden\nconst isTeamifyPromptHidden = await sp.groupSiteManager.isTeamifyPromptHidden(\"https://contoso.sharepoint.com/sites/hrteam\");\n</code></pre> <p>For more information on the methods available and how to use them, please review the code comments in the source.</p>"},{"location":"sp/hubsites/","title":"@pnp/sp/hubsites","text":"<p>This module helps you with working with hub sites in your tenant.</p>"},{"location":"sp/hubsites/#ihubsites","title":"IHubSites","text":""},{"location":"sp/hubsites/#get-a-listing-of-all-hub-sites","title":"Get a Listing of All Hub sites","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport { IHubSiteInfo } from  \"@pnp/sp/hubsites\";\nimport \"@pnp/sp/hubsites\";\n\nconst sp = spfi(...);\n\n// invoke the hub sites object\nconst hubsites: IHubSiteInfo[] = await sp.hubSites();\n\n// you can also use select to only return certain fields:\nconst hubsites2: IHubSiteInfo[] = await sp.hubSites.select(\"ID\", \"Title\", \"RelatedHubSiteIds\")();\n</code></pre>"},{"location":"sp/hubsites/#get-hub-site-by-id","title":"Get Hub site by Id","text":"<p>Using the getById method on the hubsites module to get a hub site by site Id (guid).</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { IHubSiteInfo } from  \"@pnp/sp/hubsites\";\nimport \"@pnp/sp/hubsites\";\n\nconst sp = spfi(...);\n\nconst hubsite: IHubSiteInfo = await sp.hubSites.getById(\"3504348e-b2be-49fb-a2a9-2d748db64beb\")();\n\n// log hub site title to console\nconsole.log(hubsite.Title);\n</code></pre>"},{"location":"sp/hubsites/#get-isite-instance","title":"Get ISite instance","text":"<p>We provide a helper method to load the ISite instance from the HubSite</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { ISite } from  \"@pnp/sp/sites\";\nimport \"@pnp/sp/hubsites\";\n\nconst sp = spfi(...);\n\nconst site: ISite = await sp.hubSites.getById(\"3504348e-b2be-49fb-a2a9-2d748db64beb\").getSite();\n\nconst siteData = await site();\n\nconsole.log(siteData.Title);\n</code></pre>"},{"location":"sp/hubsites/#get-hub-site-data-for-a-web","title":"Get Hub site data for a web","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport { IHubSiteWebData } from  \"@pnp/sp/hubsites\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/hubsites/web\";\n\nconst sp = spfi(...);\n\nconst webData: Partial&lt;IHubSiteWebData&gt; = await sp.web.hubSiteData();\n\n// you can also force a refresh of the hub site data\nconst webData2: Partial&lt;IHubSiteWebData&gt; = await sp.web.hubSiteData(true);\n</code></pre>"},{"location":"sp/hubsites/#synchubsitetheme","title":"syncHubSiteTheme","text":"<p>Allows you to apply theme updates from the parent hub site collection.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/hubsites/web\";\n\nconst sp = spfi(...);\n\nawait sp.web.syncHubSiteTheme();\n</code></pre>"},{"location":"sp/hubsites/#hub-site-site-methods","title":"Hub site Site Methods","text":"<p>You manage hub sites at the Site level.</p>"},{"location":"sp/hubsites/#joinhubsite","title":"joinHubSite","text":"<p>Id of the hub site collection you want to join. If you want to disassociate the site collection from hub site, then pass the siteId as 00000000-0000-0000-0000-000000000000</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/sites\";\nimport \"@pnp/sp/hubsites/site\";\n\nconst sp = spfi(...);\n\n// join a site to a hub site\nawait sp.site.joinHubSite(\"{parent hub site id}\");\n\n// remove a site from a hub site\nawait sp.site.joinHubSite(\"00000000-0000-0000-0000-000000000000\");\n</code></pre>"},{"location":"sp/hubsites/#registerhubsite","title":"registerHubSite","text":"<p>Registers the current site collection as hub site collection</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/sites\";\nimport \"@pnp/sp/hubsites/site\";\n\nconst sp = spfi(...);\n\n// register current site as a hub site\nawait sp.site.registerHubSite();\n</code></pre>"},{"location":"sp/hubsites/#unregisterhubsite","title":"unRegisterHubSite","text":"<p>Un-registers the current site collection as hub site collection.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/sites\";\nimport \"@pnp/sp/hubsites/site\";\n\nconst sp = spfi(...);\n\n// make a site no longer a hub\nawait sp.site.unRegisterHubSite();\n</code></pre>"},{"location":"sp/items/","title":"@pnp/sp/items","text":""},{"location":"sp/items/#get","title":"GET","text":"<p>Getting items from a list is one of the basic actions that most applications require. This is made easy through the library and the following examples demonstrate these actions.</p>"},{"location":"sp/items/#basic-get","title":"Basic Get","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/items\";\n\nconst sp = spfi(...);\n\n// get all the items from a list\nconst items: any[] = await sp.web.lists.getByTitle(\"My List\").items();\nconsole.log(items);\n\n// get a specific item by id.\nconst item: any = await sp.web.lists.getByTitle(\"My List\").items.getById(1)();\nconsole.log(item);\n\n// use odata operators for more efficient queries\nconst items2: any[] = await sp.web.lists.getByTitle(\"My List\").items.select(\"Title\", \"Description\").top(5).orderBy(\"Modified\", true)();\nconsole.log(items2);\n</code></pre>"},{"location":"sp/items/#get-paged-items","title":"Get Paged Items","text":"<p>Working with paging can be a challenge as it is based on skip tokens and item ids, something that is hard to guess at runtime. To simplify things you can use the getPaged method on the Items class to assist. Note that there isn't a way to move backwards in the collection, this is by design. The pattern you should use to support backwards navigation in the results is to cache the results into a local array and use the standard array operators to get previous pages. Alternatively you can append the results to the UI, but this can have performance impact for large result sets.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/items\";\n\nconst sp = spfi(...);\n\n// basic case to get paged items form a list\nconst items = await sp.web.lists.getByTitle(\"BigList\").items.getPaged();\n\n// you can also provide a type for the returned values instead of any\nconst items = await sp.web.lists.getByTitle(\"BigList\").items.getPaged&lt;{Title: string}[]&gt;();\n\n// the query also works with select to choose certain fields and top to set the page size\nconst items = await sp.web.lists.getByTitle(\"BigList\").items.select(\"Title\", \"Description\").top(50).getPaged&lt;{Title: string}[]&gt;();\n\n// the results object will have two properties and one method:\n\n// the results property will be an array of the items returned\nif (items.results.length &gt; 0) {\n    console.log(\"We got results!\");\n\n    for (let i = 0; i &lt; items.results.length; i++) {\n        // type checking works here if we specify the return type\n        console.log(items.results[i].Title);\n    }\n}\n\n// the hasNext property is used with the getNext method to handle paging\n// hasNext will be true so long as there are additional results\nif (items.hasNext) {\n\n    // this will carry over the type specified in the original query for the results array\n    items = await items.getNext();\n    console.log(items.results.length);\n}\n</code></pre>"},{"location":"sp/items/#getlistitemchangessincetoken","title":"getListItemChangesSinceToken","text":"<p>The GetListItemChangesSinceToken method allows clients to track changes on a list. Changes, including deleted items, are returned along with a token that represents the moment in time when those changes were requested. By including this token when you call GetListItemChangesSinceToken, the server looks for only those changes that have occurred since the token was generated. Sending a GetListItemChangesSinceToken request without including a token returns the list schema, the full list contents and a token.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\n\nconst sp = spfi(...);\n\n// Using RowLimit. Enables paging\nconst changes = await sp.web.lists.getByTitle(\"BigList\").getListItemChangesSinceToken({RowLimit: '5'});\n\n// Use QueryOptions to make a XML-style query.\n// Because it's XML we need to escape special characters\n// Instead of &amp; we use &amp;amp; in the query\nconst changes = await sp.web.lists.getByTitle(\"BigList\").getListItemChangesSinceToken({QueryOptions: '&lt;Paging ListItemCollectionPositionNext=\"Paged=TRUE&amp;amp;p_ID=5\" /&gt;'});\n\n// Get everything. Using null with ChangeToken gets everything\nconst changes = await sp.web.lists.getByTitle(\"BigList\").getListItemChangesSinceToken({ChangeToken: null});\n\n</code></pre>"},{"location":"sp/items/#get-all-items","title":"Get All Items","text":"<p>Using the items collection's getAll method you can get all of the items in a list regardless of the size of the list. Sample usage is shown below. Only the odata operations top, select, and filter are supported. usingCaching and inBatch are ignored - you will need to handle caching the results on your own. This method will write a warning to the Logger and should not frequently be used. Instead the standard paging operations should be used.</p> <p>In v3 there is a separate import for get-all to include the functionality. This is to remove the code from bundles for folks who do not need it.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/items\";\nimport \"@pnp/sp/items/get-all\";\n\nconst sp = spfi(...);\n\n// basic usage\nconst allItems: any[] = await sp.web.lists.getByTitle(\"BigList\").items.getAll();\nconsole.log(allItems.length);\n\n// set page size\nconst allItems: any[] = await sp.web.lists.getByTitle(\"BigList\").items.getAll(4000);\nconsole.log(allItems.length);\n\n// use select and top. top will set page size and override the any value passed to getAll\nconst allItems: any[] = await sp.web.lists.getByTitle(\"BigList\").items.select(\"Title\").top(4000).getAll();\nconsole.log(allItems.length);\n\n// we can also use filter as a supported odata operation, but this will likely fail on large lists\nconst allItems: any[] = await sp.web.lists.getByTitle(\"BigList\").items.select(\"Title\").filter(\"Title eq 'Test'\").getAll();\nconsole.log(allItems.length);\n</code></pre>"},{"location":"sp/items/#retrieving-lookup-fields","title":"Retrieving Lookup Fields","text":"<p>When working with lookup fields you need to use the expand operator along with select to get the related fields from the lookup column. This works for both the items collection and item instances.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/items\";\n\nconst sp = spfi(...);\n\nconst items = await sp.web.lists.getByTitle(\"LookupList\").items.select(\"Title\", \"Lookup/Title\", \"Lookup/ID\").expand(\"Lookup\")();\nconsole.log(items);\n\nconst item = await sp.web.lists.getByTitle(\"LookupList\").items.getById(1).select(\"Title\", \"Lookup/Title\", \"Lookup/ID\").expand(\"Lookup\")();\nconsole.log(item);\n</code></pre>"},{"location":"sp/items/#filter-using-metadata-fields","title":"Filter using Metadata fields","text":"<p>To filter on a metadata field you must use the getItemsByCAMLQuery method as $filter does not support these fields.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists/web\";\n\nconst sp = spfi(...);\n\nconst r = await sp.web.lists.getByTitle(\"TaxonomyList\").getItemsByCAMLQuery({\n    ViewXml: `&lt;View&gt;&lt;Query&gt;&lt;Where&gt;&lt;Eq&gt;&lt;FieldRef Name=\"MetaData\"/&gt;&lt;Value Type=\"TaxonomyFieldType\"&gt;Term 2&lt;/Value&gt;&lt;/Eq&gt;&lt;/Where&gt;&lt;/Query&gt;&lt;/View&gt;`,\n});\n</code></pre>"},{"location":"sp/items/#retrieving-publishingpageimage","title":"Retrieving PublishingPageImage","text":"<p>The PublishingPageImage and some other publishing-related fields aren't stored in normal fields, rather in the MetaInfo field. To get these values you need to use the technique shown below, and originally outlined in this thread. Note that a lot of information can be stored in this field so will pull back potentially a significant amount of data, so limit the rows as possible to aid performance.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/items\";\nimport { Web } from \"@pnp/sp/webs\";\n\ntry {\n  const sp = spfi(\"https://{publishing site url}\").using(SPFx(this.context));\n\n  const r = await sp.web.lists.getByTitle(\"Pages\").items\n    .select(\"Title\", \"FileRef\", \"FieldValuesAsText/MetaInfo\")\n    .expand(\"FieldValuesAsText\")\n    ();\n\n  // look through the returned items.\n  for (var i = 0; i &lt; r.length; i++) {\n\n    // the title field value\n    console.log(r[i].Title);\n\n    // find the value in the MetaInfo string using regex\n    const matches = /PublishingPageImage:SW\\|(.*?)\\r\\n/ig.exec(r[i].FieldValuesAsText.MetaInfo);\n    if (matches !== null &amp;&amp; matches.length &gt; 1) {\n\n      // this wil be the value of the PublishingPageImage field\n      console.log(matches[1]);\n    }\n  }\n}\ncatch (e) {\n  console.error(e);\n}\n</code></pre>"},{"location":"sp/items/#add-items","title":"Add Items","text":"<p>There are several ways to add items to a list. The simplest just uses the add method of the items collection passing in the properties as a plain object.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/items\";\nimport { IItemAddResult } from \"@pnp/sp/items\";\n\nconst sp = spfi(...);\n\n// add an item to the list\nconst iar: IItemAddResult = await sp.web.lists.getByTitle(\"My List\").items.add({\n  Title: \"Title\",\n  Description: \"Description\"\n});\n\nconsole.log(iar);\n</code></pre>"},{"location":"sp/items/#content-type","title":"Content Type","text":"<p>You can also set the content type id when you create an item as shown in the example below. For more information on content type IDs reference the Microsoft Documentation. While this documentation references SharePoint 2010 the structure of the IDs has not changed.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/items\";\n\nconst sp = spfi(...);\n\nawait sp.web.lists.getById(\"4D5A36EA-6E84-4160-8458-65C436DB765C\").items.add({\n    Title: \"Test 1\",\n    ContentTypeId: \"0x01030058FD86C279252341AB303852303E4DAF\"\n});\n</code></pre>"},{"location":"sp/items/#user-fields","title":"User Fields","text":"<p>There are two types of user fields, those that allow a single value and those that allow multiple. For both types, you first need to determine the Id field name, which you can do by doing a GET REST request on an existing item. Typically the value will be the user field internal name with \"Id\" appended. So in our example, we have two fields User1 and User2 so the Id fields are User1Id and User2Id.</p> <p>Next, you need to remember there are two types of user fields, those that take a single value and those that allow multiple - these are updated in different ways. For single value user fields you supply just the user's id. For multiple value fields, you need to supply an array. Examples for both are shown below.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/items\";\nimport { getGUID } from \"@pnp/core\";\n\nconst sp = spfi(...);\n\nconst i = await sp.web.lists.getByTitle(\"PeopleFields\").items.add({\n  Title: getGUID(),\n  User1Id: 9, // allows a single user\n  User2Id: [16, 45] // allows multiple users\n});\n\nconsole.log(i);\n</code></pre> <p>If you want to update or add user field values when using validateUpdateListItem you need to use the form shown below. You can specify multiple values in the array.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/items\";\n\nconst sp = spfi(...);\n\nconst result = await sp.web.lists.getByTitle(\"UserFieldList\").items.getById(1).validateUpdateListItem([{\n    FieldName: \"UserField\",\n    FieldValue: JSON.stringify([{ \"Key\": \"i:0#.f|membership|person@tenant.com\" }]),\n},\n{\n    FieldName: \"Title\",\n    FieldValue: \"Test - Updated\",\n}]);\n</code></pre>"},{"location":"sp/items/#lookup-fields","title":"Lookup Fields","text":"<p>What is said for User Fields is, in general, relevant to Lookup Fields:</p> <ul> <li>Lookup Field types:</li> <li>Single-valued lookup</li> <li>Multiple-valued lookup</li> <li><code>Id</code> suffix should be appended to the end of lookups <code>EntityPropertyName</code> in payloads</li> <li>Numeric Ids for lookups' items should be passed as values</li> </ul> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/items\";\nimport { getGUID } from \"@pnp/core\";\n\nconst sp = spfi(...);\n\nawait sp.web.lists.getByTitle(\"LookupFields\").items.add({\n    Title: getGUID(),\n    LookupFieldId: 2,       // allows a single lookup value\n    MultiLookupFieldId: [1, 56]  // allows multiple lookup value\n});\n</code></pre>"},{"location":"sp/items/#add-multiple-items","title":"Add Multiple Items","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/items\";\nimport \"@pnp/sp/batching\";\n\nconst sp = spfi(...);\n\nconst [batchedSP, execute] = sp.batched();\n\nconst list = batchedSP.web.lists.getByTitle(\"rapidadd\");\n\nlet res = [];\n\nlist.items.add({ Title: \"Batch 6\" }).then(r =&gt; res.push(r));\n\nlist.items.add({ Title: \"Batch 7\" }).then(r =&gt; res.push(r));\n\n// Executes the batched calls\nawait execute();\n\n// Results for all batched calls are available\nfor(let i = 0; i &lt; res.length; i++) {\n    ///Do something with the results\n}\n</code></pre>"},{"location":"sp/items/#update-items","title":"Update Items","text":"<p>The update method is very similar to the add method in that it takes a plain object representing the fields to update. The property names are the internal names of the fields. If you aren't sure you can always do a get request for an item in the list and see the field names that come back - you would use these same names to update the item.</p> <p>Note: For updating certain types of fields, see the Add examples above. The payload will be the same you will just need to replace the .add method with .getById({itemId}).update.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/items\";\n\nconst sp = spfi(...);\n\nconst list = sp.web.lists.getByTitle(\"MyList\");\n\nconst i = await list.items.getById(1).update({\n  Title: \"My New Title\",\n  Description: \"Here is a new description\"\n});\n\nconsole.log(i);\n</code></pre>"},{"location":"sp/items/#getting-and-updating-a-collection-using-filter","title":"Getting and updating a collection using filter","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/items\";\n\nconst sp = spfi(...);\n\n// you are getting back a collection here\nconst items: any[] = await sp.web.lists.getByTitle(\"MyList\").items.top(1).filter(\"Title eq 'A Title'\")();\n\n// see if we got something\nif (items.length &gt; 0) {\n  const updatedItem = await sp.web.lists.getByTitle(\"MyList\").items.getById(items[0].Id).update({\n    Title: \"Updated Title\",\n  });\n\n  console.log(JSON.stringify(updatedItem));\n}\n</code></pre>"},{"location":"sp/items/#update-multiple-items","title":"Update Multiple Items","text":"<p>This approach avoids multiple calls for the same list's entity type name.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/items\";\nimport \"@pnp/sp/batching\"\n\nconst sp = spfi(...);\n\nconst [batchedSP, execute] = sp.batched();\n\nconst list = batchedSP.web.lists.getByTitle(\"rapidupdate\");\n\nlist.items.getById(1).update({ Title: \"Batch 6\" }).then(b =&gt; {\n  console.log(b);\n});\n\nlist.items.getById(2).update({ Title: \"Batch 7\" }).then(b =&gt; {\n  console.log(b);\n});\n\n// Executes the batched calls\nawait execute();\n\nconsole.log(\"Done\");\n</code></pre>"},{"location":"sp/items/#update-taxonomy-field","title":"Update Taxonomy field","text":"<p>Note: Updating Taxonomy field for a File item should be handled differently. Instead of using update(), use validateUpdateListItem(). Please see below</p> <p>List Item</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/items\";\n\nconst sp = spfi(...);\n\nawait sp.web.lists.getByTitle(\"Demo\").items.getById(1).update({\n    MetaDataColumn: { Label: \"Demo\", TermGuid: '883e4c81-e8f9-4f19-b90b-6ab805c9f626', WssId: '-1' }\n});\n\n</code></pre> <p>File List Item</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/items\";\nimport \"@pnp/sp/files\";\n\nconst sp = spfi(...);\n\nawait (await sp.web.getFileByServerRelativePath(\"/sites/demo/DemoLibrary/File.txt\").getItem()).validateUpdateListItem([{\n    FieldName: \"MetaDataColumn\",\n    FieldValue:\"Demo|883e4c81-e8f9-4f19-b90b-6ab805c9f626\", //Label|TermGuid\n}]);\n</code></pre>"},{"location":"sp/items/#update-multi-value-taxonomy-field","title":"Update Multi-value Taxonomy field","text":"<p>Based on this excellent article from Beau Cameron.</p> <p>As he says you must update a hidden field to get this to work via REST. My meta data field accepting multiple values is called \"MultiMetaData\".</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/items\";\nimport \"@pnp/sp/fields\";\n\nconst sp = spfi(...);\n\n// first we need to get the hidden field's internal name.\n// The Title of that hidden field is, in my case and in the linked article just the visible field name with \"_0\" appended.\nconst fields = await sp.web.lists.getByTitle(\"TestList\").fields.filter(\"Title eq 'MultiMetaData_0'\").select(\"Title\", \"InternalName\")();\n// get an item to update, here we just create one for testing\nconst newItem = await sp.web.lists.getByTitle(\"TestList\").items.add({\n  Title: \"Testing\",\n});\n// now we have to create an update object\n// to do that for each field value you need to serialize each as -1;#{field label}|{field id} joined by \";#\"\n// update with the values you want, this also works in the add call directly to avoid a second call\nconst updateVal = {};\nupdateVal[fields[0].InternalName] = \"-1;#New Term|bb046161-49cc-41bd-a459-5667175920d4;#-1;#New 2|0069972e-67f1-4c5e-99b6-24ac5c90b7c9\";\n// execute the update call\nawait newItem.item.update(updateVal);\n</code></pre>"},{"location":"sp/items/#update-bcs-field","title":"Update BCS Field","text":"<p>Please see the issue for full details.</p> <p>You will need to use <code>validateUpdateListItem</code> to ensure hte BCS field is updated correctly.</p> <pre><code>const update = await sp.web.lists.getByTitle(\"Price\").items.getById(7).select('*,External').validateUpdateListItem([\n      {FieldName:\"External\",FieldValue:\"Fauntleroy Circus\"},\n      {FieldName:\"Customers_ID\", FieldValue:\"__bk410024003500240054006500\"}\n    ]); \n</code></pre>"},{"location":"sp/items/#recycle","title":"Recycle","text":"<p>To send an item to the recycle bin use recycle.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/items\";\n\nconst sp = spfi(...);\n\nconst list = sp.web.lists.getByTitle(\"MyList\");\n\nconst recycleBinIdentifier = await list.items.getById(1).recycle();\n</code></pre>"},{"location":"sp/items/#delete","title":"Delete","text":"<p>Delete is as simple as calling the .delete method. It optionally takes an eTag if you need to manage concurrency.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/items\";\n\nconst sp = spfi(...);\n\nconst list = sp.web.lists.getByTitle(\"MyList\");\n\nawait list.items.getById(1).delete();\n</code></pre>"},{"location":"sp/items/#delete-with-params","title":"Delete With Params","text":"<p>Deletes the item object with options.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/items\";\n\nconst sp = spfi(...);\n\nconst list = sp.web.lists.getByTitle(\"MyList\");\n\nawait list.items.getById(1).deleteWithParams({\n                BypassSharedLock: true,\n            });\n</code></pre> <p>The deleteWithParams method can only be used by accounts where UserToken.IsSystemAccount is true</p>"},{"location":"sp/items/#resolving-field-names","title":"Resolving field names","text":"<p>It's a very common mistake trying wrong field names in the requests. Field's <code>EntityPropertyName</code> value should be used.</p> <p>The easiest way to get know EntityPropertyName is to use the following snippet:</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/items\";\nimport \"@pnp/sp/fields\";\n\nconst sp = spfi(...);\n\nconst response =\n  await sp.web.lists\n    .getByTitle('[Lists_Title]')\n    .fields\n    .select('Title, EntityPropertyName')\n    .filter(`Hidden eq false and Title eq '[Field's_Display_Name]'`)\n    ();\n\nconsole.log(response.map(field =&gt; {\n  return {\n    Title: field.Title,\n    EntityPropertyName: field.EntityPropertyName\n  };\n}));\n</code></pre> <p>Lookup fields' names should be ended with additional <code>Id</code> suffix. E.g. for <code>Editor</code> EntityPropertyName <code>EditorId</code> should be used.</p>"},{"location":"sp/items/#getparentinfos","title":"getParentInfos","text":"<p>Gets information about an item, including details about the parent list, parent list root folder, and parent web.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/items\";\n\nconst sp = spfi(...);\n\nconst item: any = await sp.web.lists.getByTitle(\"My List\").items.getById(1)();\nawait item.getParentInfos();\n</code></pre>"},{"location":"sp/lists/","title":"@pnp/sp/lists","text":"<p>Lists in SharePoint are collections of information built in a structural way using columns and rows. Columns for metadata, and rows representing each entry. Visually, it reminds us a lot of a database table or an Excel spreadsheet.</p>"},{"location":"sp/lists/#ilists","title":"ILists","text":""},{"location":"sp/lists/#get-list-by-id","title":"Get List by Id","text":"<p>Gets a list from the collection by id (guid). Note that the library will handle a guid formatted with curly braces (i.e. '{03b05ff4-d95d-45ed-841d-3855f77a2483}') as well as without curly braces (i.e. '03b05ff4-d95d-45ed-841d-3855f77a2483'). The Id parameter is also case insensitive.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\n\nconst sp = spfi(...);\n\n// get the list by Id\nconst list = sp.web.lists.getById(\"03b05ff4-d95d-45ed-841d-3855f77a2483\");\n\n// we can use this 'list' variable to execute more queries on the list:\nconst r = await list.select(\"Title\")();\n\n// show the response from the server\nconsole.log(r.Title);\n</code></pre>"},{"location":"sp/lists/#get-list-by-title","title":"Get List by Title","text":"<p>You can also get a list from the collection by title.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\n\nconst sp = spfi(...);\n\n// get the default document library 'Documents'\nconst list = sp.web.lists.getByTitle(\"Documents\");\n\n// we can use this 'list' variable to run more queries on the list:\nconst r = await list.select(\"Id\")();\n\n// log the list Id to console\nconsole.log(r.Id);\n</code></pre>"},{"location":"sp/lists/#add-list","title":"Add List","text":"<p>You can add a list to the web's list collection using the .add-method. To invoke this method in its most simple form, you can provide only a title as a parameter. This will result in a standard out of the box list with all default settings, and the title you provide.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\n\nconst sp = spfi(...);\n\n// create a new list, passing only the title\nconst listAddResult = await sp.web.lists.add(\"My new list\");\n\n// we can work with the list created using the IListAddResult.list property:\nconst r = await listAddResult.list.select(\"Title\")();\n\n// log newly created list title to console\nconsole.log(r.Title);\n});\n</code></pre> <p>You can also provide other (optional) parameters like description, template and enableContentTypes. If that is not enough for you, you can use the parameter named 'additionalSettings' which is just a TypedHash, meaning you can sent whatever properties you'd like in the body (provided that the property is supported by the SharePoint API). You can find a listing of list template codes in the official docs.</p> <pre><code>// this will create a list with template 101 (Document library), content types enabled and show it on the quick launch (using additionalSettings)\nconst listAddResult = await sp.web.lists.add(\"My Doc Library\", \"This is a description of doc lib.\", 101, true, { OnQuickLaunch: true });\n\n// get the Id of the newly added document library\nconst r = await listAddResult.list.select(\"Id\")();\n\n// log id to console\nconsole.log(r.Id);\n</code></pre>"},{"location":"sp/lists/#ensure-that-a-list-exists-by-title","title":"Ensure that a List exists (by title)","text":"<p>Ensures that the specified list exists in the collection (note: this method not supported for batching). Just like with the add-method (see examples above) you can provide only the title, or any or all of the optional parameters desc, template, enableContentTypes and additionalSettings.</p> <p></p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\n\nconst sp = spfi(...);\n// ensure that a list exists. If it doesn't it will be created with the provided title (the rest of the settings will be default):\nconst listEnsureResult = await sp.web.lists.ensure(\"My List\");\n\n// check if the list was created, or if it already existed:\nif (listEnsureResult.created) {\n    console.log(\"My List was created!\");\n} else {\n    console.log(\"My List already existed!\");\n}\n\n// work on the created/updated list\nconst r = await listEnsureResult.list.select(\"Id\")();\n\n// log the Id\nconsole.log(r.Id);\n</code></pre> <p>If the list already exists, the other settings you provide will be used to update the existing list.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\n\nconst sp = spfi(...);\n// add a new list to the lists collection of the web\nsp.web.lists.add(\"My List 2\").then(async () =&gt; {\n\n// then call ensure on the created list with an updated description\nconst listEnsureResult = await sp.web.lists.ensure(\"My List 2\", \"Updated description\");\n\n// get the updated description\nconst r = await listEnsureResult.list.select(\"Description\")();\n\n// log the updated description\nconsole.log(r.Description);\n});\n</code></pre>"},{"location":"sp/lists/#ensure-site-assets-library-exist","title":"Ensure Site Assets Library exist","text":"<p>Gets a list that is the default asset location for images or other files, which the users upload to their wiki pages.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\n\nconst sp = spfi(...);\n// get Site Assets library\nconst siteAssetsList = await sp.web.lists.ensureSiteAssetsLibrary();\n\n// get the Title\nconst r = await siteAssetsList.select(\"Title\")();\n\n// log Title\nconsole.log(r.Title);\n</code></pre>"},{"location":"sp/lists/#ensure-site-pages-library-exist","title":"Ensure Site Pages Library exist","text":"<p>Gets a list that is the default location for wiki pages.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\n\nconst sp = spfi(...);\n// get Site Pages library\nconst siteAssetsList = await sp.web.lists.ensureSitePagesLibrary();\n\n// get the Title\nconst r = await siteAssetsList.select(\"Title\")();\n\n// log Title\nconsole.log(r.Title);\n</code></pre>"},{"location":"sp/lists/#ilist","title":"IList","text":"Scenario Import Statement Selective 1 import { List, IList } from \"@pnp/sp/lists\"; Selective 2 import \"@pnp/sp/lists\"; Preset: All import { sp, List, IList } from \"@pnp/sp/presets/all\"; Preset: Core import { sp, List, IList } from \"@pnp/sp/presets/core\";"},{"location":"sp/lists/#update-a-list","title":"Update a list","text":"<p>Update an existing list with the provided properties. You can also provide an eTag value that will be used in the IF-Match header (default is \"*\")</p> <pre><code>import { IListUpdateResult } from \"@pnp/sp/lists\";\n\n// create a TypedHash object with the properties to update\nconst updateProperties = {\n    Description: \"This list title and description has been updated using PnPjs.\",\n    Title: \"Updated title\",\n};\n\n// update the list with the properties above\nlist.update(updateProperties).then(async (l: IListUpdateResult) =&gt; {\n\n    // get the updated title and description\n    const r = await l.list.select(\"Title\", \"Description\")();\n\n    // log the updated properties to the console\n    console.log(r.Title);\n    console.log(r.Description);\n});\n</code></pre>"},{"location":"sp/lists/#get-changes-on-a-list","title":"Get changes on a list","text":"<p>From the change log, you can get a collection of changes that have occurred within the list based on the specified query.</p> <pre><code>import { IChangeQuery } from \"@pnp/sp\";\n\n// build the changeQuery object, here we look att changes regarding Add, DeleteObject and Restore\nconst changeQuery: IChangeQuery = {\n    Add: true,\n    ChangeTokenEnd: null,\n    ChangeTokenStart: null,\n    DeleteObject: true,\n    Rename: true,\n    Restore: true,\n};\n\n// get list changes\nconst r = await list.getChanges(changeQuery);\n\n// log changes to console\nconsole.log(r);\n</code></pre> <p>To get changes from a specific time range you can use the ChangeTokenStart or a combination of ChangeTokenStart and ChangeTokenEnd.</p> <pre><code>import { IChangeQuery } from \"@pnp/sp\";\n\n//Resource is the list Id (as Guid)\nconst resource = list.Id;\nconst changeStart = new Date(\"2022-02-22\").getTime();\nconst changeTokenStart = `1;3;${resource};${changeStart};-1`;\n\n// build the changeQuery object, here we look at changes regarding Add and Update for Items.\nconst changeQuery: IChangeQuery = {\n    Add: true,\n    Update: true,\n    Item: true,\n    ChangeTokenEnd: null,\n    ChangeTokenStart: { StringValue: changeTokenStart },\n};\n\n// get list changes\nconst r = await list.getChanges(changeQuery);\n\n// log changes to console\nconsole.log(r);\n</code></pre>"},{"location":"sp/lists/#get-list-items-using-a-caml-query","title":"Get list items using a CAML Query","text":"<p>You can get items from SharePoint using a CAML Query.</p> <pre><code>import { ICamlQuery } from \"@pnp/sp/lists\";\n\n// build the caml query object (in this example, we include Title field and limit rows to 5)\nconst caml: ICamlQuery = {\n    ViewXml: \"&lt;View&gt;&lt;ViewFields&gt;&lt;FieldRef Name='Title' /&gt;&lt;/ViewFields&gt;&lt;RowLimit&gt;5&lt;/RowLimit&gt;&lt;/View&gt;\",\n};\n\n// get list items\nconst r = await list.getItemsByCAMLQuery(caml);\n\n// log resulting array to console\nconsole.log(r);\n</code></pre> <p>If you need to get and expand a lookup field, there is a spread array parameter on the getItemsByCAMLQuery. This means that you can provide multiple properties to this method depending on how many lookup fields you are working with on your list. Below is a minimal example showing how to expand one field (RoleAssignment)</p> <pre><code>import { ICamlQuery } from \"@pnp/sp/lists\";\n\n// build the caml query object (in this example, we include Title field and limit rows to 5)\nconst caml: ICamlQuery = {\n    ViewXml: \"&lt;View&gt;&lt;ViewFields&gt;&lt;FieldRef Name='Title' /&gt;&lt;FieldRef Name='RoleAssignments' /&gt;&lt;/ViewFields&gt;&lt;RowLimit&gt;5&lt;/RowLimit&gt;&lt;/View&gt;\",\n};\n\n// get list items\nconst r = await list.getItemsByCAMLQuery(caml, \"RoleAssignments\");\n\n// log resulting item array to console\nconsole.log(r);\n</code></pre>"},{"location":"sp/lists/#get-list-items-changes-using-a-token","title":"Get list items changes using a Token","text":"<pre><code>import {  IChangeLogItemQuery } from \"@pnp/sp/lists\";\n\n// build the caml query object (in this example, we include Title field and limit rows to 5)\nconst changeLogItemQuery: IChangeLogItemQuery = {\n    Contains: `&lt;Contains&gt;&lt;FieldRef Name=\"Title\"/&gt;&lt;Value Type=\"Text\"&gt;Item16&lt;/Value&gt;&lt;/Contains&gt;`,\n    QueryOptions: `&lt;QueryOptions&gt;\n    &lt;IncludeMandatoryColumns&gt;FALSE&lt;/IncludeMandatoryColumns&gt;\n    &lt;DateInUtc&gt;False&lt;/DateInUtc&gt;\n    &lt;IncludePermissions&gt;TRUE&lt;/IncludePermissions&gt;\n    &lt;IncludeAttachmentUrls&gt;FALSE&lt;/IncludeAttachmentUrls&gt;\n    &lt;Folder&gt;My List&lt;/Folder&gt;&lt;/QueryOptions&gt;`,\n};\n\n// get list items\nconst r = await list.getListItemChangesSinceToken(changeLogItemQuery);\n\n// log resulting XML to console\nconsole.log(r);\n</code></pre>"},{"location":"sp/lists/#recycle-a-list","title":"Recycle a list","text":"<p>Removes the list from the web's list collection and puts it in the recycle bin.</p> <pre><code>await list.recycle();\n</code></pre>"},{"location":"sp/lists/#render-list-data","title":"Render list data","text":"<pre><code>import { IRenderListData } from \"@pnp/sp/lists\";\n\n// render list data, top 5 items\nconst r: IRenderListData = await list.renderListData(\"&lt;View&gt;&lt;RowLimit&gt;5&lt;/RowLimit&gt;&lt;/View&gt;\");\n\n// log array of items in response\nconsole.log(r.Row);\n</code></pre>"},{"location":"sp/lists/#render-list-data-as-stream","title":"Render list data as stream","text":"<pre><code>import { IRenderListDataParameters } from \"@pnp/sp/lists\";\n// setup parameters object\nconst renderListDataParams: IRenderListDataParameters = {\n    ViewXml: \"&lt;View&gt;&lt;RowLimit&gt;5&lt;/RowLimit&gt;&lt;/View&gt;\",\n};\n// render list data as stream\nconst r = await list.renderListDataAsStream(renderListDataParams);\n// log array of items in response\nconsole.log(r.Row);\n</code></pre> <p>You can also supply other options to renderListDataAsStream including override parameters and query params. This can be helpful when looking to apply sorting to the returned data.</p> <pre><code>import { IRenderListDataParameters } from \"@pnp/sp/lists\";\n// setup parameters object\nconst renderListDataParams: IRenderListDataParameters = {\n    ViewXml: \"&lt;View&gt;&lt;RowLimit&gt;5&lt;/RowLimit&gt;&lt;/View&gt;\",\n};\nconst overrideParams = {\n    ViewId = \"{view guid}\"\n};\n// OR if you don't want to supply override params use null\n// overrideParams = null;\n// Set the query params using a map\nconst query = new Map&lt;string, string&gt;();\nquery.set(\"SortField\", \"{AField}\");\nquery.set(\"SortDir\", \"Desc\");\n// render list data as stream\nconst r = await list.renderListDataAsStream(renderListDataParams, overrideParams, query);\n// log array of items in response\nconsole.log(r.Row);\n</code></pre>"},{"location":"sp/lists/#reserve-list-item-id-for-idempotent-list-item-creation","title":"Reserve list item Id for idempotent list item creation","text":"<pre><code>const listItemId = await list.reserveListItemId();\n\n// log id to console\nconsole.log(listItemId);\n</code></pre>"},{"location":"sp/lists/#add-a-list-item-using-path-folder-validation-and-set-field-values","title":"Add a list item using path (folder), validation and set field values","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\n\nconst sp = spfi(...);\n\nconst list = await sp.webs.lists.getByTitle(\"MyList\").select(\"Title\", \"ParentWebUrl\")();\nconst formValues: IListItemFormUpdateValue[] = [\n                {\n                    FieldName: \"Title\",\n                    FieldValue: title,\n                },\n            ];\n\nlist.addValidateUpdateItemUsingPath(formValues,`${list.ParentWebUrl}/Lists/${list.Title}/MyFolder`)\n\n</code></pre>"},{"location":"sp/lists/#content-types-imports","title":"content-types imports","text":""},{"location":"sp/lists/#contenttypes","title":"contentTypes","text":"<p>Get all content types for a list</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\n\nconst sp = spfi(...);\nimport \"@pnp/sp/content-types/list\";\n\nconst list = sp.web.lists.getByTitle(\"Documents\");\nconst r = await list.contentTypes();\n</code></pre>"},{"location":"sp/lists/#fields-imports","title":"fields imports","text":"Scenario Import Statement Selective 1 import \"@pnp/sp/fields\"; Selective 2 import \"@pnp/sp/fields/list\"; Preset: All import { sp } from \"@pnp/sp/presets/all\";"},{"location":"sp/lists/#fields","title":"fields","text":"<p>Get all the fields for a list</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\n\nconst sp = spfi(...);\nimport \"@pnp/sp/fields/list\";\n\nconst list = sp.web.lists.getByTitle(\"Documents\");\nconst r = await list.fields();\n</code></pre> <p>Add a field to the site, then add the site field to a list</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\n\nconst sp = spfi(...);\nconst fld = await sp.site.rootWeb.fields.addText(\"MyField\");\nawait sp.web.lists.getByTitle(\"MyList\").fields.createFieldAsXml(fld.data.SchemaXml);\n</code></pre>"},{"location":"sp/lists/#folders","title":"folders","text":"<p>Get the root folder of a list.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/folders/list\";\n\nconst sp = spfi(...);\n\nconst list = sp.web.lists.getByTitle(\"Documents\");\nconst r = await list.rootFolder();\n</code></pre>"},{"location":"sp/lists/#forms","title":"forms","text":"<pre><code>import \"@pnp/sp/forms/list\";\n\nconst r = await list.forms();\n</code></pre>"},{"location":"sp/lists/#items","title":"items","text":"<p>Get a collection of list items.</p> <pre><code>import \"@pnp/sp/items/list\";\n\nconst r = await list.items();\n</code></pre>"},{"location":"sp/lists/#views","title":"views","text":"<p>Get the default view of the list</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/views/list\";\n\nconst sp = spfi(...);\nconst list = sp.web.lists.getByTitle(\"Documents\");\nconst views = await list.views();\nconst defaultView = await list.defaultView();\n</code></pre> <p>Get a list view by Id</p> <pre><code>const view = await list.getView(defaultView.Id).select(\"Title\")();\n</code></pre>"},{"location":"sp/lists/#security-imports","title":"security imports","text":"<p>To work with list security, you can import the list methods as follows:</p> <pre><code>import \"@pnp/sp/security/list\";\n</code></pre> <p>For more information on how to call security methods for lists, please refer to the @pnp/sp/security documentation.</p>"},{"location":"sp/lists/#subscriptions","title":"subscriptions","text":"<p>Get all subscriptions on the list</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/subscriptions/list\";\n\nconst sp = spfi(...);\nconst list = sp.web.lists.getByTitle(\"Documents\");\nconst subscriptions = await list.subscriptions();\n</code></pre>"},{"location":"sp/lists/#usercustomactions","title":"userCustomActions","text":"<p>Get a collection of the list's user custom actions.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/user-custom-actions/web\"\n\nconst sp = spfi(...);\nconst list = sp.web.lists.getByTitle(\"Documents\");\nconst r = await list.userCustomActions();\n</code></pre>"},{"location":"sp/lists/#getparentinfos","title":"getParentInfos","text":"<p>Gets information about an list, including details about the parent list root folder, and parent web.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\n\nconst sp = spfi(...);\n\nconst list = sp.web.lists.getByTitle(\"Documents\");\nawait list.getParentInfos();\n</code></pre>"},{"location":"sp/navigation/","title":"@pnp/sp - navigation","text":""},{"location":"sp/navigation/#navigation-service","title":"Navigation Service","text":""},{"location":"sp/navigation/#getmenustate","title":"getMenuState","text":"<p>The MenuState service operation returns a Menu-State (dump) of a SiteMapProvider on a site. It will return an exception if the SiteMapProvider cannot be found on the site, the SiteMapProvider does not implement the IEditableSiteMapProvider interface or the SiteMapNode key cannot be found within the provider hierarchy.</p> <p>The IEditableSiteMapProvider also supports Custom Properties which is an optional feature. What will be return in the custom properties is up to the IEditableSiteMapProvider implementation and can differ for for each SiteMapProvider implementation. The custom properties can be requested by providing a comma separated string of property names like: property1,property2,property3\\,containingcomma</p> <p>NOTE: the , separator can be escaped using the \\ as escape character as done in the example above. The string above would split like:</p> <ul> <li>property1</li> <li>property2</li> <li>property3,containingcomma</li> </ul> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/navigation\";\n\nconst sp = spfi(...);\n\n// Will return a menu state of the default SiteMapProvider 'SPSiteMapProvider' where the dump starts a the RootNode (within the site) with a depth of 10 levels.\nconst state = await sp.navigation.getMenuState();\n\n// Will return the menu state of the 'SPSiteMapProvider', starting with the node with the key '1002' with a depth of 5\nconst state2 = await sp.navigation.getMenuState(\"1002\", 5);\n\n// Will return the menu state of the 'CurrentNavSiteMapProviderNoEncode' from the root node of the provider with a depth of 5\nconst state3 = await sp.navigation.getMenuState(null, 5, \"CurrentNavSiteMapProviderNoEncode\");\n</code></pre>"},{"location":"sp/navigation/#getmenunodekey","title":"getMenuNodeKey","text":"<p>Tries to get a SiteMapNode.Key for a given URL within a site collection. If the SiteMapNode cannot be found an Exception is returned. The method is using SiteMapProvider.FindSiteMapNodeFromKey(string rawUrl) to lookup the SiteMapNode. Depending on the actual implementation of FindSiteMapNodeFromKey the matching can differ for different SiteMapProviders.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/navigation\";\n\nconst sp = spfi(...);\n\nconst key = await sp.navigation.getMenuNodeKey(\"/sites/dev/Lists/SPPnPJSExampleList/AllItems.aspx\");\n</code></pre>"},{"location":"sp/navigation/#web-navigation","title":"Web Navigation","text":"Scenario Import Statement Selective 1 import \"@pnp/sp/webs\";import \"@pnp/sp/navigation\"; <p>The navigation object contains two properties \"quicklaunch\" and \"topnavigationbar\". Both have the same set of methods so our examples below show use of only quicklaunch but apply equally to topnavigationbar.</p>"},{"location":"sp/navigation/#get-navigation","title":"Get navigation","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/navigation\";\n\nconst sp = spfi(...);\n\nconst top = await sp.web.navigation.topNavigationBar();\nconst quick = await sp.web.navigation.quicklaunch();\n</code></pre> <p>For the following examples we will refer to a variable named \"nav\" that is understood to be one of topNavigationBar or quicklaunch:</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/navigation\";\n\nconst sp = spfi(...);\n// note we are just getting a ref to the nav object, not executing a request\nconst nav = sp.web.navigation.topNavigationBar;\n// -- OR -- \n// note we are just getting a ref to the nav object, not executing a request\nconst nav = sp.web.navigation.quicklaunch;\n</code></pre>"},{"location":"sp/navigation/#getbyid","title":"getById","text":"<pre><code>import \"@pnp/sp/navigation\";\n\nconst node = await nav.getById(3)();\n</code></pre>"},{"location":"sp/navigation/#add","title":"add","text":"<pre><code>import \"@pnp/sp/navigation\";\n\nconst result = await nav.add(\"Node Title\", \"/sites/dev/pages/mypage.aspx\", true);\n\nconst nodeDataRaw = result.data;\n\n// request the data from the created node\nconst nodeData = result.node();\n</code></pre>"},{"location":"sp/navigation/#moveafter","title":"moveAfter","text":"<p>Places a navigation node after another node in the tree</p> <pre><code>import \"@pnp/sp/navigation\";\n\nconst node1result = await nav.add(`Testing - ${getRandomString(4)} (1)`, url, true);\nconst node2result = await nav.add(`Testing - ${getRandomString(4)} (2)`, url, true);\nconst node1 = await node1result.node();\nconst node2 = await node2result.node();\n\nawait nav.moveAfter(node1.Id, node2.Id);\n</code></pre>"},{"location":"sp/navigation/#delete","title":"Delete","text":"<p>Deletes a given node</p> <pre><code>import \"@pnp/sp/navigation\";\n\nconst node1result = await nav.add(`Testing - ${getRandomString(4)}`, url, true);\nlet nodes = await nav();\n// check we added a node\nlet index = nodes.findIndex(n =&gt; n.Id === node1result.data.Id)\n// index &gt;= 0\n\n// delete a node\nawait nav.getById(node1result.data.Id).delete();\n\nnodes = await nav();\nindex = nodes.findIndex(n =&gt; n.Id === node1result.data.Id)\n// index = -1\n</code></pre>"},{"location":"sp/navigation/#update","title":"Update","text":"<p>You are able to update various properties of a given node, such as the the Title, Url, IsVisible.</p> <p>You may update the Audience Targeting value for the node by passing in Microsoft Group IDs in the AudienceIds array. Be aware, Audience Targeting must already be enabled on the navigation.</p> <pre><code>import \"@pnp/sp/navigation\";\n\n\nawait nav.getById(4).update({\n    Title: \"A new title\",\n    AudienceIds:[\"d50f9511-b811-4d76-b20a-0d6e1c8095f7\"],\n    Url:\"/sites/dev/SitePages/home.aspx\",\n    IsVisible:false\n});\n</code></pre>"},{"location":"sp/navigation/#children","title":"Children","text":"<p>The children property of a Navigation Node represents a collection with all the same properties and methods available on topNavigationBar or quicklaunch.</p> <pre><code>import \"@pnp/sp/navigation\";\n\nconst childrenData = await nav.getById(1).children();\n\n// add a child\nawait nav.getById(1).children.add(\"Title\", \"Url\", true);\n</code></pre>"},{"location":"sp/permissions/","title":"@pnp/sp - permissions","text":"<p>A common task is to determine if a user or the current user has a certain permission level. It is a great idea to check before performing a task such as creating a list to ensure a user can without getting back an error. This allows you to provide a better experience to the user.</p> <p>Permissions in SharePoint are assigned to the set of securable objects which include Site, Web, List, and List Item. These are the four level to which unique permissions can be assigned. As such @pnp/sp provides a set of methods defined in the QueryableSecurable class to handle these permissions. These examples all use the Web to get the values, however the methods work identically on all securables.</p>"},{"location":"sp/permissions/#get-role-assignments","title":"Get Role Assignments","text":"<p>This gets a collection of all the role assignments on a given securable. The property returns a RoleAssignments collection which supports the OData collection operators.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/web\";\nimport \"@pnp/sp/security\";\n\nconst sp = spfi(...);\n\nconst roles = await sp.web.roleAssignments();\n</code></pre>"},{"location":"sp/permissions/#first-unique-ancestor-securable-object","title":"First Unique Ancestor Securable Object","text":"<p>This method can be used to find the securable parent up the hierarchy that has unique permissions. If everything inherits permissions this will be the Site. If a sub web has unique permissions it will be the web, and so on.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/web\";\nimport \"@pnp/sp/security\";\n\nconst sp = spfi(...);\n\nconst obj = await sp.web.firstUniqueAncestorSecurableObject();\n</code></pre>"},{"location":"sp/permissions/#user-effective-permissions","title":"User Effective Permissions","text":"<p>This method returns the BasePermissions for a given user or the current user. This value contains the High and Low values for a user on the securable you have queried.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/web\";\nimport \"@pnp/sp/security\";\n\nconst sp = spfi(...);\n\nconst perms = await sp.web.getUserEffectivePermissions(\"i:0#.f|membership|user@site.com\");\n\nconst perms2 = await sp.web.getCurrentUserEffectivePermissions();\n</code></pre>"},{"location":"sp/permissions/#user-has-permissions","title":"User Has Permissions","text":"<p>Because the High and Low values in the BasePermission don't obviously mean anything you can use these methods along with the PermissionKind enumeration to check actual rights on the securable.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/web\";\nimport { PermissionKind } from \"@pnp/sp/security\";\n\nconst sp = spfi(...);\n\nconst perms = await sp.web.userHasPermissions(\"i:0#.f|membership|user@site.com\", PermissionKind.ApproveItems);\n\nconst perms2 = await sp.web.currentUserHasPermissions(PermissionKind.ApproveItems);\n</code></pre>"},{"location":"sp/permissions/#has-permissions","title":"Has Permissions","text":"<p>If you need to check multiple permissions it can be more efficient to get the BasePermissions once and then use the hasPermissions method to check them as shown below.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/web\";\nimport { PermissionKind } from \"@pnp/sp/security\";\n\nconst sp = spfi(...);\n\nconst perms = await sp.web.getCurrentUserEffectivePermissions();\nif (sp.web.hasPermissions(perms, PermissionKind.AddListItems) &amp;&amp; sp.web.hasPermissions(perms, PermissionKind.DeleteVersions)) {\n    // ...\n}\n</code></pre>"},{"location":"sp/profiles/","title":"@pnp/sp/profiles","text":"<p>The profile services allows you to work with the SharePoint User Profile Store.</p>"},{"location":"sp/profiles/#profiles","title":"Profiles","text":"<p>Profiles is accessed directly from the root sp object.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/profiles\";\n</code></pre>"},{"location":"sp/profiles/#get-edit-profile-link-for-the-current-user","title":"Get edit profile link for the current user","text":"<pre><code>getEditProfileLink(): Promise&lt;string&gt;\n</code></pre> <pre><code>const sp = spfi(...);\nconst editProfileLink = await sp.profiles.getEditProfileLink();\n</code></pre>"},{"location":"sp/profiles/#is-my-people-list-public","title":"Is My People List Public","text":"<p>Provides a boolean that indicates if the current users \"People I'm Following\" list is public or not</p> <pre><code>getIsMyPeopleListPublic(): Promise&lt;boolean&gt;\n</code></pre> <pre><code>const sp = spfi(...);\nconst isPublic = await sp.profiles.getIsMyPeopleListPublic();\n</code></pre>"},{"location":"sp/profiles/#find-out-if-the-current-user-is-followed-by-another-user","title":"Find out if the current user is followed by another user","text":"<p>Provides a boolean that indicates if the current users is followed by a specific user.</p> <pre><code>amIFollowedBy(loginName: string): Promise&lt;boolean&gt;\n</code></pre> <pre><code>const sp = spfi(...);\nconst loginName = \"i:0#.f|membership|testuser@mytenant.onmicrosoft.com\";\nconst isFollowedBy = await sp.profiles.amIFollowedBy(loginName);\n</code></pre>"},{"location":"sp/profiles/#find-out-if-i-am-following-a-specific-user","title":"Find out if I am following a specific user","text":"<p>Provides a boolean that indicates if the current users is followed by a specific user.</p> <pre><code>amIFollowing(loginName: string): Promise&lt;boolean&gt;\n</code></pre> <pre><code>const sp = spfi(...);\nconst loginName = \"i:0#.f|membership|testuser@mytenant.onmicrosoft.com\";\nconst following = await sp.profiles.amIFollowing(loginName);\n</code></pre>"},{"location":"sp/profiles/#get-the-tags-i-follow","title":"Get the tags I follow","text":"<p>Gets the tags the current user is following. Accepts max count, default is 20.</p> <pre><code>getFollowedTags(maxCount = 20): Promise&lt;string[]&gt;\n</code></pre> <pre><code>const sp = spfi(...);\nconst tags = await sp.profiles.getFollowedTags();\n</code></pre>"},{"location":"sp/profiles/#get-followers-for-a-specific-user","title":"Get followers for a specific user","text":"<p>Gets the people who are following the specified user.</p> <pre><code>getFollowersFor(loginName: string): Promise&lt;any[]&gt;\n</code></pre> <pre><code>const sp = spfi(...);\nconst loginName = \"i:0#.f|membership|testuser@mytenant.onmicrosoft.com\";\nconst followers = await sp.profiles.getFollowersFor(loginName);\nfollowers.forEach((value) =&gt; {\n  ...\n});\n</code></pre>"},{"location":"sp/profiles/#get-followers-for-the-current","title":"Get followers for the current","text":"<p>Gets the people who are following the current user.</p> <pre><code>myFollowers(): ISPCollection\n</code></pre> <pre><code>const sp = spfi(...);\nconst folowers = await sp.profiles.myFollowers();\n</code></pre>"},{"location":"sp/profiles/#get-the-properties-for-the-current-user","title":"Get the properties for the current user","text":"<p>Gets user properties for the current user.</p> <pre><code>myProperties(): ISPInstance\n</code></pre> <pre><code>const sp = spfi(...);\nconst profile = await sp.profiles.myProperties();\nconsole.log(profile.DisplayName);\nconsole.log(profile.Email);\nconsole.log(profile.Title);\nconsole.log(profile.UserProfileProperties.length);\n\n// Properties are stored in Key/Value pairs,\n// so parse into an object called userProperties\nvar props = {};\nprofile.UserProfileProperties.forEach((prop) =&gt; {\n  props[prop.Key] = prop.Value;\n});\nprofile.userProperties = props;\nconsole.log(\"Account Name: \" + profile.userProperties.AccountName);\n</code></pre> <pre><code>// you can also select properties to return before\nconst sp = spfi(...);\nconst profile = await sp.profiles.myProperties.select(\"Title\", \"Email\")();\nconsole.log(profile.Email);\nconsole.log(profile.Title);\n</code></pre>"},{"location":"sp/profiles/#gets-people-specified-user-is-following","title":"Gets people specified user is following","text":"<pre><code>getPeopleFollowedBy(loginName: string): Promise&lt;any[]&gt;\n</code></pre> <pre><code>const sp = spfi(...);\nconst loginName = \"i:0#.f|membership|testuser@mytenant.onmicrosoft.com\";\nconst folowers = await sp.profiles.getFollowersFor(loginName);\nfollowers.forEach((value) =&gt; {\n  ...\n});\n</code></pre>"},{"location":"sp/profiles/#gets-properties-for-a-specified-user","title":"Gets properties for a specified user","text":"<pre><code>getPropertiesFor(loginName: string): Promise&lt;any&gt;\n</code></pre> <pre><code>const sp = spfi(...);\nconst loginName = \"i:0#.f|membership|testuser@mytenant.onmicrosoft.com\";\nconst profile = await sp.profiles.getPropertiesFor(loginName);\nconsole.log(profile.DisplayName);\nconsole.log(profile.Email);\nconsole.log(profile.Title);\nconsole.log(profile.UserProfileProperties.length);\n\n// Properties are stored in inconvenient Key/Value pairs,\n// so parse into an object called userProperties\nvar props = {};\nprofile.UserProfileProperties.forEach((prop) =&gt; {\n  props[prop.Key] = prop.Value;\n});\n\nprofile.userProperties = props;\nconsole.log(\"Account Name: \" + profile.userProperties.AccountName);\n</code></pre>"},{"location":"sp/profiles/#gets-most-popular-tags","title":"Gets most popular tags","text":"<p>Gets the 20 most popular hash tags over the past week, sorted so that the most popular tag appears first</p> <pre><code>trendingTags(): Promise&lt;IHashTagCollection&gt;\n</code></pre> <pre><code>const sp = spfi(...);\nconst tags = await sp.profiles.trendingTags();\ntags.Items.forEach((tag) =&gt; {\n  ...\n});\n</code></pre>"},{"location":"sp/profiles/#gets-specified-user-profile-property-for-the-specified-user","title":"Gets specified user profile property for the specified user","text":"<pre><code>getUserProfilePropertyFor(loginName: string, propertyName: string): Promise&lt;string&gt;\n</code></pre> <pre><code>const sp = spfi(...);\nconst loginName = \"i:0#.f|membership|testuser@mytenant.onmicrosoft.com\";\nconst propertyName = \"AccountName\";\nconst property = await sp.profiles.getUserProfilePropertyFor(loginName, propertyName);\n</code></pre>"},{"location":"sp/profiles/#hide-specific-user-from-list-of-suggested-people","title":"Hide specific user from list of suggested people","text":"<p>Removes the specified user from the user's list of suggested people to follow.</p> <pre><code>hideSuggestion(loginName: string): Promise&lt;void&gt;\n</code></pre> <pre><code>const sp = spfi(...);\nconst loginName = \"i:0#.f|membership|testuser@mytenant.onmicrosoft.com\";\nawait sp.profiles.hideSuggestion(loginName);\n</code></pre>"},{"location":"sp/profiles/#is-one-user-following-another","title":"Is one user following another","text":"<p>Indicates whether the first user is following the second user. First parameter is the account name of the user who might be following the followee. Second parameter is the account name of the user who might be followed by the follower.</p> <pre><code>isFollowing(follower: string, followee: string): Promise&lt;boolean&gt;\n</code></pre> <pre><code>const sp = spfi(...);\nconst follower = \"i:0#.f|membership|testuser@mytenant.onmicrosoft.com\";\nconst followee = \"i:0#.f|membership|testuser2@mytenant.onmicrosoft.com\";\nconst isFollowing = await sp.profiles.isFollowing(follower, followee);\n</code></pre>"},{"location":"sp/profiles/#set-user-profile-picture","title":"Set User Profile Picture","text":"<p>Uploads and sets the user profile picture (Users can upload a picture to their own profile only). Not supported for batching. Accepts the profilePicSource Blob data representing the user's picture in BMP, JPEG, or PNG format of up to 4.76MB.</p> <p></p> <pre><code>setMyProfilePic(profilePicSource: Blob): Promise&lt;void&gt;\n</code></pre> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists/web\";\nimport \"@pnp/sp/profiles\";\nimport \"@pnp/sp/folders\";\nimport \"@pnp/sp/files\";\n\nconst sp = spfi(...);\n\n// get the blob object through a request or from a file input\nconst blob = await sp.web.lists.getByTitle(\"Documents\").rootFolder.files.getByName(\"profile.jpg\").getBlob();\n\nawait sp.profiles.setMyProfilePic(blob);\n</code></pre>"},{"location":"sp/profiles/#sets-single-value-user-profile-property","title":"Sets single value User Profile property","text":"<p>accountName The account name of the user propertyName Property name propertyValue Property value</p> <pre><code>setSingleValueProfileProperty(accountName: string, propertyName: string, propertyValue: string): Promise&lt;void&gt;\n</code></pre> <pre><code>const sp = spfi(...);\nconst loginName = \"i:0#.f|membership|testuser@mytenant.onmicrosoft.com\";\nawait sp.profiles.setSingleValueProfileProperty(loginName, \"CellPhone\", \"(123) 555-1212\");\n</code></pre>"},{"location":"sp/profiles/#sets-a-mult-value-user-profile-property","title":"Sets a mult-value User Profile property","text":"<p>accountName The account name of the user propertyName Property name propertyValues Property values</p> <pre><code>setMultiValuedProfileProperty(accountName: string, propertyName: string, propertyValues: string[]): Promise&lt;void&gt;\n</code></pre> <pre><code>const sp = spfi(...);\nconst loginName = \"i:0#.f|membership|testuser@mytenant.onmicrosoft.com\";\nconst propertyName = \"SPS-Skills\";\nconst propertyValues = [\"SharePoint\", \"Office 365\", \"Architecture\", \"Azure\"];\nawait sp.profiles.setMultiValuedProfileProperty(loginName, propertyName, propertyValues);\nconst profile = await sp.profiles.getPropertiesFor(loginName);\nvar props = {};\nprofile.UserProfileProperties.forEach((prop) =&gt; {\n  props[prop.Key] = prop.Value;\n});\nprofile.userProperties = props;\nconsole.log(profile.userProperties[propertyName]);\n</code></pre>"},{"location":"sp/profiles/#create-personal-site-for-specified-users","title":"Create Personal Site for specified users","text":"<p>Provisions one or more users' personal sites. (My Site administrator on SharePoint Online only) Emails The email addresses of the users to provision sites for</p> <pre><code>createPersonalSiteEnqueueBulk(...emails: string[]): Promise&lt;void&gt;\n</code></pre> <pre><code>const sp = spfi(...);\nlet userEmails: string[] = [\"testuser1@mytenant.onmicrosoft.com\", \"testuser2@mytenant.onmicrosoft.com\"];\nawait sp.profiles.createPersonalSiteEnqueueBulk(userEmails);\n</code></pre>"},{"location":"sp/profiles/#get-the-user-profile-of-the-owner-for-the-current-site","title":"Get the user profile of the owner for the current site","text":"<pre><code>ownerUserProfile(): Promise&lt;IUserProfile&gt;\n</code></pre> <pre><code>const sp = spfi(...);\nconst profile = await sp.profiles.ownerUserProfile();\n</code></pre>"},{"location":"sp/profiles/#get-the-user-profile-of-the-current-user","title":"Get the user profile of the current user","text":"<pre><code>userProfile(): Promise&lt;any&gt;\n</code></pre> <pre><code>const sp = spfi(...);\nconst profile = await sp.profiles.userProfile();\n</code></pre>"},{"location":"sp/profiles/#create-personal-site-for-current-user","title":"Create personal site for current user","text":"<pre><code>createPersonalSite(interactiveRequest = false): Promise&lt;void&gt;\n</code></pre> <pre><code>const sp = spfi(...);\nawait sp.profiles.createPersonalSite();\n</code></pre>"},{"location":"sp/profiles/#make-all-profile-data-public-or-private","title":"Make all profile data public or private","text":"<p>Set the privacy settings for all social data.</p> <pre><code>shareAllSocialData(share: boolean): Promise&lt;void&gt;\n</code></pre> <pre><code>const sp = spfi(...);\nawait sp.profiles.shareAllSocialData(true);\n</code></pre>"},{"location":"sp/profiles/#resolve-a-user-or-group","title":"Resolve a user or group","text":"<p>Resolves user or group using specified query parameters</p> <pre><code>clientPeoplePickerResolveUser(queryParams: IClientPeoplePickerQueryParameters): Promise&lt;IPeoplePickerEntity&gt;\n</code></pre> <pre><code>const sp = spfi(...);\nconst result = await sp.profiles.clientPeoplePickerResolveUser({\n  AllowEmailAddresses: true,\n  AllowMultipleEntities: false,\n  MaximumEntitySuggestions: 25,\n  QueryString: 'mbowen@contoso.com'\n});\n</code></pre>"},{"location":"sp/profiles/#search-a-user-or-group","title":"Search a user or group","text":"<p>Searches for users or groups using specified query parameters</p> <pre><code>clientPeoplePickerSearchUser(queryParams: IClientPeoplePickerQueryParameters): Promise&lt;IPeoplePickerEntity[]&gt;\n</code></pre> <pre><code>const sp = spfi(...);\nconst result = await sp.profiles.clientPeoplePickerSearchUser({\n  AllowEmailAddresses: true,\n  AllowMultipleEntities: false,\n  MaximumEntitySuggestions: 25,\n  QueryString: 'John'\n});\n</code></pre>"},{"location":"sp/publishing-sitepageservice/","title":"@pnp/sp/publishing-sitepageservice","text":"<p>Through the REST api you are able to call a SP.Publishing.SitePageService method GetCurrentUserMemberships. This method allows you to fetch identifiers of unified groups to which current user belongs. It's an alternative for using graph.me.transitiveMemberOf() method from graph package. Note, method only works with the context of a logged in user, and not with app-only permissions.</p>"},{"location":"sp/publishing-sitepageservice/#get-current-users-group-memberships","title":"Get current user's group memberships","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/publishing-sitepageservice\";\n\nconst sp = spfi(...);\n\nconst groupIdentifiers = await sp.publishingSitePageService.getCurrentUserMemberships();\n</code></pre>"},{"location":"sp/recycle-bin/","title":"@pnp/sp/recycle-bin","text":"<p>The contents of the recycle bin.</p>"},{"location":"sp/recycle-bin/#irecyclebin-irecyclebinitem","title":"IRecycleBin, IRecycleBinItem","text":""},{"location":"sp/recycle-bin/#work-with-the-contents-of-the-webs-recycle-bin","title":"Work with the contents of the web's Recycle Bin","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/recycle-bin\";\n\nconst sp = spfi(...);\n\n// gets contents of the web's recycle bin\nconst bin = await sp.web.recycleBin();\n\n// gets a specific item from the recycle bin\nconst rbItem = await sp.web.recycleBin.getById(bin[0].id);\n\n// delete the item from the recycle bin\nawait rbItem.delete();\n\n// restore the item from the recycle bin\nawait rbItem.restore();\n\n// move the item to the second-stage (site) recycle bin.\nawait rbItem.moveToSecondStage();\n\n// deletes everything in the recycle bin\nawait sp.web.recycleBin.deleteAll();\n\n// restores everything in the recycle bin\nawait sp.web.recycleBin.restoreAll();\n\n// moves contents of recycle bin to second-stage (site) recycle bin.\nawait sp.web.recycleBin.moveAllToSecondStage();\n\n// deletes contents of the second-stage (site) recycle bin.\nawait sp.web.recycleBin.deleteAllSecondStageItems();\n</code></pre>"},{"location":"sp/recycle-bin/#work-with-the-contents-of-the-second-stage-site-recycle-bin","title":"Work with the contents of the Second-stage (site) Recycle Bin","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/sites\";\nimport \"@pnp/sp/recycle-bin\";\n\nconst sp = spfi(...);\n\n// gets contents of the second-stage recycle bin\nconst ssBin = await sp.site.recycleBin();\n\n// gets a specific item from the second-stage recycle bin\nconst rbItem = await sp.site.recycleBin.getById(ssBin[0].id);\n\n// delete the item from the second-stage recycle bin\nawait rbItem.delete();\n\n// restore the item from the second-stage recycle bin\nawait rbItem.restore();\n\n// deletes everything in the second-stage recycle bin\nawait sp.site.recycleBin.deleteAll();\n\n// restores everything in the second-stage recycle bin\nawait sp.site.recycleBin.restoreAll();\n</code></pre>"},{"location":"sp/regional-settings/","title":"@pnp/sp/regional-settings","text":"<p>The regional settings module helps with managing dates and times across various timezones.</p>"},{"location":"sp/regional-settings/#iregionalsettings","title":"IRegionalSettings","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/regional-settings/web\";\n\nconst sp = spfi(...);\n\n// get all the web's regional settings\nconst s = await sp.web.regionalSettings();\n\n// select only some settings to return\nconst s2 = await sp.web.regionalSettings.select(\"DecimalSeparator\", \"ListSeparator\", \"IsUIRightToLeft\")();\n</code></pre>"},{"location":"sp/regional-settings/#installed-languages","title":"Installed Languages","text":"<p>You can get a list of the installed languages in the web.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/regional-settings/web\";\n\nconst sp = spfi(...);\n\nconst s = await sp.web.regionalSettings.getInstalledLanguages();\n</code></pre> <p>The installedLanguages property accessor is deprecated after 2.0.4 in favor of getInstalledLanguages and will be removed in future versions.</p>"},{"location":"sp/regional-settings/#timezones","title":"TimeZones","text":"<p>You can also get information about the selected timezone in the web and all of the defined timezones.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/regional-settings/web\";\n\nconst sp = spfi(...);\n\n// get the web's configured timezone\nconst s = await sp.web.regionalSettings.timeZone();\n\n// select just the Description and Id\nconst s2 = await sp.web.regionalSettings.timeZone.select(\"Description\", \"Id\")();\n\n// get all the timezones\nconst s3 = await sp.web.regionalSettings.timeZones();\n\n// get a specific timezone by id\n// list of ids: https://msdn.microsoft.com/en-us/library/office/jj247008.aspx\nconst s4 = await sp.web.regionalSettings.timeZones.getById(23);\nconst s5 = await s.localTimeToUTC(new Date());\n\n// convert a given date from web's local time to UTC time\nconst s6 = await sp.web.regionalSettings.timeZone.localTimeToUTC(new Date());\n\n// convert a given date from UTC time to web's local time\nconst s6 = await sp.web.regionalSettings.timeZone.utcToLocalTime(new Date())\nconst s7 = await sp.web.regionalSettings.timeZone.utcToLocalTime(new Date(2019, 6, 10, 10, 0, 0, 0))\n</code></pre>"},{"location":"sp/regional-settings/#title-and-description-resources","title":"Title and Description Resources","text":"<p>Some objects allow you to read language specific title information as shown in the following sample. This applies to Web, List, Field, Content Type, and User Custom Actions.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/regional-settings\";\n\nconst sp = spfi(...);\n\n//\n// The below methods appears on\n// - Web\n// - List\n// - Field\n// - ContentType\n// - User Custom Action\n//\n// after you import @pnp/sp/regional-settings\n//\n// you can also import just parts of the regional settings:\n// import \"@pnp/sp/regional-settings/web\";\n// import \"@pnp/sp/regional-settings/list\";\n// import \"@pnp/sp/regional-settings/content-type\";\n// import \"@pnp/sp/regional-settings/field\";\n// import \"@pnp/sp/regional-settings/user-custom-actions\";\n\n\nconst title = await sp.web.titleResource(\"en-us\");\nconst title2 = await sp.web.titleResource(\"de-de\");\n\nconst description = await sp.web.descriptionResource(\"en-us\");\nconst description2 = await sp.web.descriptionResource(\"de-de\");\n</code></pre> <p>You can only read the values through the REST API, not set the value.</p>"},{"location":"sp/related-items/","title":"@pnp/sp/related-items","text":"<p>The related items API allows you to add related items to items within a task or workflow list. Related items need to be in the same site collection.</p>"},{"location":"sp/related-items/#setup","title":"Setup","text":"<p>Instead of copying this block of code into each sample, understand that each sample is meant to run with this supporting code to work.</p> <pre><code>import { spfi, SPFx, extractWebUrl } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/related-items/web\";\nimport \"@pnp/sp/lists/web\";\nimport \"@pnp/sp/items/list\";\nimport \"@pnp/sp/files/list\";\nimport { IList } from \"@pnp/sp/lists\";\nimport { getRandomString } from \"@pnp/core\";\n\nconst sp = spfi(...);\n\n// setup some lists (or just use existing ones this is just to show the complete process)\n// we need two lists to use for creating related items, they need to use template 107 (task list)\nconst ler1 = await sp.web.lists.ensure(\"RelatedItemsSourceList\", \"\", 107);\nconst ler2 = await sp.web.lists.ensure(\"RelatedItemsTargetList\", \"\", 107);\n\nconst sourceList = ler1.list;\nconst targetList = ler2.list;\n\nconst sourceListName = await sourceList.select(\"Id\")().then(r =&gt; r.Id);\nconst targetListName = await targetList.select(\"Id\")().then(r =&gt; r.Id);\n\n// or whatever you need to get the web url, both our example lists are in the same web.\nconst webUrl = sp.web.toUrl();\n\n// ...individual samples start here\n</code></pre>"},{"location":"sp/related-items/#addsinglelink","title":"addSingleLink","text":"<pre><code>const sourceItem = await sourceList.items.add({ Title: `Item ${getRandomString(4)}` }).then(r =&gt; r.data);\nconst targetItem = await targetList.items.add({ Title: `Item ${getRandomString(4)}` }).then(r =&gt; r.data);\n\nawait sp.web.relatedItems.addSingleLink(sourceListName, sourceItem.Id, webUrl, targetListName, targetItem.Id, webUrl);\n</code></pre>"},{"location":"sp/related-items/#addsinglelinktourl","title":"addSingleLinkToUrl","text":"<p>This method adds a link to task item based on a url. The list name and item id are to the task item, the url is to the related item/document.</p> <pre><code>// get a file's server relative url in some manner, here we add one\nconst file = await sp.web.defaultDocumentLibrary.rootFolder.files.add(`file_${getRandomString(4)}.txt`, \"Content\", true).then(r =&gt; r.data);\n// add an item or get an item from the task list\nconst targetItem = await targetList.items.add({ Title: `Item ${getRandomString(4)}` }).then(r =&gt; r.data);\n\nawait sp.web.relatedItems.addSingleLinkToUrl(targetListName, targetItem.Id, file.ServerRelativeUrl);\n</code></pre>"},{"location":"sp/related-items/#addsinglelinkfromurl","title":"addSingleLinkFromUrl","text":"<p>This method adds a link to task item based on a url. The list name and item id are to related item, the url is to task item to which the related reference is being added. I haven't found a use case for this method.</p>"},{"location":"sp/related-items/#deletesinglelink","title":"deleteSingleLink","text":"<p>This method allows you to delete a link previously created.</p> <pre><code>const sourceItem = await sourceList.items.add({ Title: `Item ${getRandomString(4)}` }).then(r =&gt; r.data);\nconst targetItem = await targetList.items.add({ Title: `Item ${getRandomString(4)}` }).then(r =&gt; r.data);\n\n// add the link\nawait sp.web.relatedItems.addSingleLink(sourceListName, sourceItem.Id, webUrl, targetListName, targetItem.Id, webUrl);\n\n// delete the link\nawait sp.web.relatedItems.deleteSingleLink(sourceListName, sourceItem.Id, webUrl, targetListName, targetItem.Id, webUrl);\n</code></pre>"},{"location":"sp/related-items/#getrelateditems","title":"getRelatedItems","text":"<p>Gets the related items for an item</p> <pre><code>import { IRelatedItem } from \"@pnp/sp/related-items\";\n\nconst sourceItem = await sourceList.items.add({ Title: `Item ${getRandomString(4)}` }).then(r =&gt; r.data);\nconst targetItem = await targetList.items.add({ Title: `Item ${getRandomString(4)}` }).then(r =&gt; r.data);\n\n// add a link\nawait sp.web.relatedItems.addSingleLink(sourceListName, sourceItem.Id, webUrl, targetListName, targetItem.Id, webUrl);\n\nconst targetItem2 = await targetList.items.add({ Title: `Item ${getRandomString(4)}` }).then(r =&gt; r.data);\n\n// add a link\nawait sp.web.relatedItems.addSingleLink(sourceListName, sourceItem.Id, webUrl, targetListName, targetItem2.Id, webUrl);\n\nconst items: IRelatedItem[] = await sp.web.relatedItems.getRelatedItems(sourceListName, sourceItem.Id);\n\n// items.length === 2\n</code></pre> <p>Related items are defined by the IRelatedItem interface</p> <pre><code>export interface IRelatedItem {\n    ListId: string;\n    ItemId: number;\n    Url: string;\n    Title: string;\n    WebId: string;\n    IconUrl: string;\n}\n</code></pre>"},{"location":"sp/related-items/#getpageonerelateditems","title":"getPageOneRelatedItems","text":"<p>Gets an abbreviated set of related items</p> <pre><code>import { IRelatedItem } from \"@pnp/sp/related-items\";\n\nconst sourceItem = await sourceList.items.add({ Title: `Item ${getRandomString(4)}` }).then(r =&gt; r.data);\nconst targetItem = await targetList.items.add({ Title: `Item ${getRandomString(4)}` }).then(r =&gt; r.data);\n\n// add a link\nawait sp.web.relatedItems.addSingleLink(sourceListName, sourceItem.Id, webUrl, targetListName, targetItem.Id, webUrl);\n\nconst targetItem2 = await targetList.items.add({ Title: `Item ${getRandomString(4)}` }).then(r =&gt; r.data);\n\n// add a link\nawait sp.web.relatedItems.addSingleLink(sourceListName, sourceItem.Id, webUrl, targetListName, targetItem2.Id, webUrl);\n\nconst items: IRelatedItem[] = await sp.web.relatedItems.getPageOneRelatedItems(sourceListName, sourceItem.Id);\n\n// items.length === 2\n</code></pre>"},{"location":"sp/search/","title":"@pnp/sp/search","text":"<p>Using search you can access content throughout your organization in a secure and consistent manner. The library provides support for searching and suggest - as well as some interfaces and helper classes to make building your queries and processing responses easier.</p>"},{"location":"sp/search/#search","title":"Search","text":"<p>Search is accessed directly from the root sp object and can take either a string representing the query text, a plain object matching the ISearchQuery interface, or a SearchQueryBuilder instance.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/search\";\nimport { ISearchQuery, SearchResults, SearchQueryBuilder } from \"@pnp/sp/search\";\n\nconst sp = spfi(...);\n\n// text search using SharePoint default values for other parameters\nconst results: SearchResults = await sp.search(\"test\");\n\nconsole.log(results.ElapsedTime);\nconsole.log(results.RowCount);\nconsole.log(results.PrimarySearchResults);\n\n\n// define a search query object matching the ISearchQuery interface\nconst results2: SearchResults = await sp.search(&lt;ISearchQuery&gt;{\n    Querytext: \"test\",\n    RowLimit: 10,\n    EnableInterleaving: true,\n});\n\nconsole.log(results2.ElapsedTime);\nconsole.log(results2.RowCount);\nconsole.log(results2.PrimarySearchResults);\n\n// define a query using a builder\nconst builder = SearchQueryBuilder(\"test\").rowLimit(10).enableInterleaving.enableQueryRules.processPersonalFavorites;\nconst results3 = await sp.search(builder);\n\nconsole.log(results3.ElapsedTime);\nconsole.log(results3.RowCount);\nconsole.log(results3.PrimarySearchResults);\n</code></pre>"},{"location":"sp/search/#search-result-caching","title":"Search Result Caching","text":"<p>Starting with v3 you can use any of the caching behaviors with search and the results will be cached. Please see here for more details on caching options.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/search\";\nimport { ISearchQuery, SearchResults, SearchQueryBuilder } from \"@pnp/sp/search\";\nimport { Caching } from \"@pnp/queryable\";\n\nconst sp = spfi(...).using(Caching());\n\nsp.search({/* ... query */}).then((r: SearchResults) =&gt; {\n\n    console.log(r.ElapsedTime);\n    console.log(r.RowCount);\n    console.log(r.PrimarySearchResults);\n});\n\n// use a query builder\nconst builder = SearchQueryBuilder(\"test\").rowLimit(3);\n\n// supply a search query builder and caching options\nconst results2 = await sp.search(builder);\n\nconsole.log(results2.TotalRows);\n</code></pre>"},{"location":"sp/search/#paging-with-searchresultsgetpage","title":"Paging with SearchResults.getPage","text":"<p>Paging is controlled by a start row and page size parameter. You can specify both arguments in your initial query however you can use the getPage method to jump to any page. The second parameter page size is optional and will use the previous RowLimit or default to 10.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/search\";\nimport { SearchResults, SearchQueryBuilder } from \"@pnp/sp/search\";\n\nconst sp = spfi(...);\n\n// this will hold our current results\nlet currentResults: SearchResults = null;\nlet page = 1;\n\n// triggered on page load or through some other means\nfunction onStart() {\n\n    // construct our query that will be used throughout the paging process, likely from user input\n    const q = SearchQueryBuilder(\"test\").rowLimit(5);\n    const results = await sp.search(q);\n    currentResults = results; // set the current results\n    page = 1; // reset page counter\n    // update UI...\n}\n\n// triggered by an event\nasync function next() {\n\n    currentResults = await currentResults.getPage(++page);\n    // update UI...\n}\n\n// triggered by an event\nasync function prev() {\n\n    currentResults = await currentResults.getPage(--page);\n    // update UI...\n}\n</code></pre>"},{"location":"sp/search/#searchquerybuilder","title":"SearchQueryBuilder","text":"<p>The SearchQueryBuilder allows you to build your queries in a fluent manner. It also accepts constructor arguments for query text and a base query plain object, should you have a shared configuration for queries in an application you can define them once. The methods and properties match those on the SearchQuery interface. Boolean properties add the flag to the query while methods require that you supply one or more arguments. Also arguments supplied later in the chain will overwrite previous values.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/search\";\nimport { SearchQueryBuilder, SearchResults, ISearchQuery } from \"@pnp/sp/search\";\n\nconst sp = spfi(...);\n\n// basic usage\nlet q = SearchQueryBuilder().text(\"test\").rowLimit(4).enablePhonetic;\n\nsp.search(q).then(h =&gt; { /* ... */ });\n\n// provide a default query text at creation\nlet q2 = SearchQueryBuilder(\"text\").rowLimit(4).enablePhonetic;\n\nconst results: SearchResults = await sp.search(q2);\n\n// provide query text and a template for\n// shared settings across queries that can\n// be overwritten by individual builders\nconst appSearchSettings: ISearchQuery = {\n    EnablePhonetic: true,\n    HiddenConstraints: \"reports\"\n};\n\nlet q3 = SearchQueryBuilder(\"test\", appSearchSettings).enableQueryRules;\nlet q4 = SearchQueryBuilder(\"financial data\", appSearchSettings).enableSorting.enableStemming;\nconst results2 = await sp.search(q3);\nconst results3 = sp.search(q4);\n</code></pre>"},{"location":"sp/search/#search-suggest","title":"Search Suggest","text":"<p>Search suggest works in much the same way as search, except against the suggest end point. It takes a string or a plain object that matches ISuggestQuery.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/search\";\nimport { ISuggestQuery, ISuggestResult } from \"@pnp/sp/search\";\n\nconst sp = spfi(...);\n\nconst results = await sp.searchSuggest(\"test\");\n\nconst results2 = await sp.searchSuggest({\n    querytext: \"test\",\n    count: 5,\n} as ISuggestQuery);\n</code></pre>"},{"location":"sp/search/#search-factory","title":"Search Factory","text":"<p>You can also configure a search or suggest query against any valid SP url using the factory methods.</p> <p>In this case you'll need to ensure you add observers, or use the tuple constructor to inherit</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/web\";\nimport \"@pnp/sp/search\";\nimport { Search, Suggest } from \"@pnp/sp/search\";\nimport { SPDefault } from \"@pnp/nodejs\";\n\nconst sp = spfi(...);\n\n// set the url for search\nconst searcher = Search([sp.web, \"https://mytenant.sharepoint.com/sites/dev\"]);\n\n// this can accept any of the query types (text, ISearchQuery, or SearchQueryBuilder)\nconst results = await searcher(\"test\");\n\n// you can reuse the ISearch instance\nconst results2 = await searcher(\"another query\");\n\n// same process works for Suggest\nconst suggester = Suggest([sp.web, \"https://mytenant.sharepoint.com/sites/dev\"]);\n\nconst suggestions = await suggester({ querytext: \"test\" });\n\n// resetting the observers on the instance\nconst searcher2 = Search(\"https://mytenant.sharepoint.com/sites/dev\").using(SPDefault({\n  msal: {\n    config: {...},\n    scopes: [...],\n  },\n}));\n\nconst results3 = await searcher2(\"test\");\n</code></pre>"},{"location":"sp/security/","title":"@pnp/sp/security","text":"<p>There are four levels where you can break inheritance and assign security: Site, Web, List, Item. All four of these objects share a common set of methods. Because of this we are showing in the examples below usage of these methods for an IList instance, but they apply across all four securable objects. In addition to the shared methods, some types have unique methods which are listed below.</p> <p>Site permissions are managed on the root web of the site collection.</p>"},{"location":"sp/security/#a-note-on-selective-imports-for-security","title":"A Note on Selective Imports for Security","text":"<p>Because the method are shared you can opt to import only the methods for one of the instances.</p> <pre><code>import \"@pnp/sp/security/web\";\nimport \"@pnp/sp/security/list\";\nimport \"@pnp/sp/security/item\";\n</code></pre> <p>Possibly useful if you are trying to hyper-optimize for bundle size but it is just as easy to import the whole module:</p> <pre><code>import \"@pnp/sp/security\";\n</code></pre>"},{"location":"sp/security/#securable-methods","title":"Securable Methods","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/security/list\";\nimport \"@pnp/sp/site-users/web\";\nimport { IList } from \"@pnp/sp/lists\";\nimport { PermissionKind } from \"@pnp/sp/security\";\n\nconst sp = spfi(...);\n\n// ensure we have a list\nconst ler = await sp.web.lists.ensure(\"SecurityTestingList\");\nconst list: IList = ler.list;\n\n// role assignments (see section below)\nawait list.roleAssignments();\n\n// data will represent one of the possible parents Site, Web, or List\nconst data = await list.firstUniqueAncestorSecurableObject();\n\n// getUserEffectivePermissions\nconst users = await sp.web.siteUsers.top(1).select(\"LoginName\")();\nconst perms = await list.getUserEffectivePermissions(users[0].LoginName);\n\n// getCurrentUserEffectivePermissions\nconst perms2 = list.getCurrentUserEffectivePermissions();\n\n// userHasPermissions\nconst v: boolean = list.userHasPermissions(users[0].LoginName, PermissionKind.AddListItems)\n\n// currentUserHasPermissions\nconst v2: boolean = list.currentUserHasPermissions(PermissionKind.AddListItems)\n\n// breakRoleInheritance\nawait list.breakRoleInheritance();\n// copy existing permissions\nawait list.breakRoleInheritance(true);\n// copy existing permissions and reset all child securables to the new permissions\nawait list.breakRoleInheritance(true, true);\n\n// resetRoleInheritance\nawait list.resetRoleInheritance();\n</code></pre>"},{"location":"sp/security/#web-specific-methods","title":"Web Specific methods","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/security/web\";\n\nconst sp = spfi(...);\n\n// role definitions (see section below)\nconst defs = await sp.web.roleDefinitions();\n</code></pre>"},{"location":"sp/security/#role-assignments","title":"Role Assignments","text":"<p>Allows you to list and manipulate the set of role assignments for the given securable. Again we show usage using list, but the examples apply to web and item as well.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/security/web\";\nimport \"@pnp/sp/site-users/web\";\nimport { IList } from \"@pnp/sp/lists\";\nimport { PermissionKind } from \"@pnp/sp/security\";\n\nconst sp = spfi(...);\n\n// ensure we have a list\nconst ler = await sp.web.lists.ensure(\"SecurityTestingList\");\nconst list: IList = ler.list;\n\n// list role assignments\nconst assignments = await list.roleAssignments();\n\n// add a role assignment\nconst defs = await sp.web.roleDefinitions();\nconst user = await sp.web.currentUser();\nconst r = await list.roleAssignments.add(user.Id, defs[0].Id);\n\n// remove a role assignment\nconst { Id: fullRoleDefId } = await sp.web.roleDefinitions.getByName('Full Control')();\nconst ras = await list.roleAssignments();\n// filter/find the role assignment you want to remove\n// here we just grab the first\nconst ra = ras.find(v =&gt; true);\nconst r = await list.roleAssignments.remove(ra.PrincipalId, fullRoleDefId);\n\n// read role assignment info\nconst info = await list.roleAssignments.getById(ra.Id)();\n\n// get the groups\nconst info2 = await list.roleAssignments.getById(ra.Id).groups();\n\n// get the bindings\nconst info3 = await list.roleAssignments.getById(ra.Id).bindings();\n\n// delete a role assignment (same as remove)\nconst ras = await list.roleAssignments();\n// filter/find the role assignment you want to remove\n// here we just grab the first\nconst ra = ras.find(v =&gt; true);\n\n// delete it\nawait list.roleAssignments.getById(ra.Id).delete();\n</code></pre>"},{"location":"sp/security/#role-definitions","title":"Role Definitions","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/security/web\";\n\nconst sp = spfi(...);\n\n// read role definitions\nconst defs = await sp.web.roleDefinitions();\n\n// get by id\nconst def = await sp.web.roleDefinitions.getById(5)();\nconst def = await sp.web.roleDefinitions.getById(5).select(\"Name\", \"Order\")();\n\n// get by name\nconst def = await sp.web.roleDefinitions.getByName(\"Full Control\")();\nconst def = await sp.web.roleDefinitions.getByName(\"Full Control\").select(\"Name\", \"Order\")();\n\n// get by type\nconst def = await sp.web.roleDefinitions.getByType(5)();\nconst def = await sp.web.roleDefinitions.getByType(5).select(\"Name\", \"Order\")();\n\n// add\n// name The new role definition's name\n// description The new role definition's description\n// order The order in which the role definition appears\n// basePermissions The permissions mask for this role definition\nconst rdar = await sp.web.roleDefinitions.add(\"title\", \"description\", 99, { High: 1, Low: 2 });\n\n\n\n// the following methods work on a single role def, you can use any of the three getBy methods, here we use getById as an example\n\n// delete\nawait sp.web.roleDefinitions.getById(5).delete();\n\n// update\nconst res = sp.web.roleDefinitions.getById(5).update({ Name: \"New Name\" });\n</code></pre>"},{"location":"sp/security/#get-list-items-with-unique-permissions","title":"Get List Items with Unique Permissions","text":"<p>In order to get a list of items that have unique permissions you have to specifically select the '' field and then filter on the client.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/items\";\nimport \"@pnp/sp/security/items\";\n\nconst sp = spfi(...);\n\nconst listItems = await sp.web.lists.getByTitle(\"pnplist\").items.select(\"Id, HasUniqueRoleAssignments\")();\n\n//Loop over list items filtering for HasUniqueRoleAssignments value\n\n</code></pre>"},{"location":"sp/sharing/","title":"@pnp/sp/sharing","text":"<p>Note: This API is still considered \"beta\" meaning it may change and some behaviors may differ across tenants by version. It is also supported only in SharePoint Online.</p> <p>One of the newer abilities in SharePoint is the ability to share webs, files, or folders with both internal and external folks. It is important to remember that these settings are managed at the tenant level and ? override anything you may supply as an argument to these methods. If you receive an InvalidOperationException when using these methods please check your tenant sharing settings to ensure sharing is not blocked before ?submitting an issue.</p>"},{"location":"sp/sharing/#imports","title":"Imports","text":"<p>In previous versions of this library the sharing methods were part of the inheritance stack for SharePointQueryable objects. Starting with v2 this is no longer the case and they are now selectively importable. There are four objects within the SharePoint hierarchy that support sharing: Item, File, Folder, and Web. You can import the sharing methods for all of them, or for individual objects.</p>"},{"location":"sp/sharing/#import-all","title":"Import All","text":"<p>To import and attach the sharing methods to all four of the sharable types include all of the sharing sub module:</p> <pre><code>import \"@pnp/sp/sharing\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/site-users/web\";\nimport { spfi } from \"@pnp/sp\";\n\nconst sp = spfi(...);\n\nconst user = await sp.web.siteUsers.getByEmail(\"user@site.com\")();\nconst r = await sp.web.shareWith(user.LoginName);\n</code></pre>"},{"location":"sp/sharing/#selective-import","title":"Selective Import","text":"<p>Import only the web's sharing methods into the library</p> <pre><code>import \"@pnp/sp/sharing/web\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/site-users/web\";\nimport { spfi } from \"@pnp/sp\";\n\nconst sp = spfi(...);\n\nconst user = await sp.web.siteUsers.getByEmail(\"user@site.com\")();\nconst r = await sp.web.shareWith(user.LoginName);\n</code></pre>"},{"location":"sp/sharing/#getsharelink","title":"getShareLink","text":"<p>Applies to: Item, Folder, File</p> <p>Creates a sharing link for the given resource with an optional expiration.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/sharing\";\nimport { SharingLinkKind, IShareLinkResponse } from \"@pnp/sp/sharing\";\nimport { dateAdd } from \"@pnp/core\";\n\nconst sp = spfi(...);\n\nconst result = await sp.web.getFolderByServerRelativeUrl(\"/sites/dev/Shared Documents/folder1\").getShareLink(SharingLinkKind.AnonymousView);\n\nconsole.log(JSON.stringify(result, null, 2));\n\n\nconst result2 = await sp.web.getFolderByServerRelativeUrl(\"/sites/dev/Shared Documents/folder1\").getShareLink(SharingLinkKind.AnonymousView, dateAdd(new Date(), \"day\", 5));\n\nconsole.log(JSON.stringify(result2, null, 2));\n</code></pre>"},{"location":"sp/sharing/#sharewith","title":"shareWith","text":"<p>Applies to: Item, Folder, File, Web</p> <p>Shares the given resource with the specified permissions (View or Edit) and optionally sends an email to the users. You can supply a single string for the <code>loginnames</code> parameter or an array of <code>loginnames</code>. The folder method takes an optional parameter \"shareEverything\" which determines if the shared permissions are pushed down to all items in the folder, even those with unique permissions.</p> <p></p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/sharing\";\nimport \"@pnp/sp/folders/web\";\nimport \"@pnp/sp/files/web\";\nimport { ISharingResult, SharingRole } from \"@pnp/sp/sharing\";\n\nconst sp = spfi(...);\n\nconst result = await sp.web.shareWith(\"i:0#.f|membership|user@site.com\");\n\nconsole.log(JSON.stringify(result, null, 2));\n\n// Share and allow editing\nconst result2 = await sp.web.shareWith(\"i:0#.f|membership|user@site.com\", SharingRole.Edit);\n\nconsole.log(JSON.stringify(result2, null, 2));\n\n\n// share folder\nconst result3 = await sp.web.getFolderByServerRelativeUrl(\"/sites/dev/Shared Documents/folder1\").shareWith(\"i:0#.f|membership|user@site.com\");\n\n// Share folder with edit permissions, and provide params for requireSignin and propagateAcl (apply to all children)\nawait sp.web.getFolderByServerRelativeUrl(\"/sites/dev/Shared Documents/test\").shareWith(\"i:0#.f|membership|user@site.com\", SharingRole.Edit, true, true);\n\n// Share a file\nawait sp.web.getFileByServerRelativeUrl(\"/sites/dev/Shared Documents/test.txt\").shareWith(\"i:0#.f|membership|user@site.com\");\n\n// Share a file with edit permissions\nawait sp.web.getFileByServerRelativeUrl(\"/sites/dev/Shared Documents/test.txt\").shareWith(\"i:0#.f|membership|user@site.com\", SharingRole.Edit);\n</code></pre>"},{"location":"sp/sharing/#shareobject-shareobjectraw","title":"shareObject &amp; shareObjectRaw","text":"<p>Applies to: Web</p> <p>Allows you to share any shareable object in a web by providing the appropriate parameters. These two methods differ in that shareObject will try and fix up your query based on the supplied parameters where shareObjectRaw will send your supplied json object directly to the server. The later method is provided for the greatest amount of flexibility.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/sharing\";\nimport { ISharingResult, SharingRole } from \"@pnp/sp/sharing\";\n\nconst sp = spfi(...);\n\n// Share an object in this web\nconst result = await sp.web.shareObject(\"https://mysite.sharepoint.com/sites/dev/Docs/test.txt\", \"i:0#.f|membership|user@site.com\", SharingRole.View);\n\n// Share an object with all settings available\nawait sp.web.shareObjectRaw({\n    url: \"https://mysite.sharepoint.com/sites/dev/Docs/test.txt\",\n    peoplePickerInput: [{ Key: \"i:0#.f|membership|user@site.com\" }],\n    roleValue: \"role: 1973741327\",\n    groupId: 0,\n    propagateAcl: false,\n    sendEmail: true,\n    includeAnonymousLinkInEmail: false,\n    emailSubject: \"subject\",\n    emailBody: \"body\",\n    useSimplifiedRoles: true,\n});\n</code></pre>"},{"location":"sp/sharing/#unshareobject","title":"unshareObject","text":"<p>Applies to: Web</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/sharing\";\nimport { ISharingResult } from \"@pnp/sp/sharing\";\n\nconst sp = spfi(...);\n\nconst result = await sp.web.unshareObject(\"https://mysite.sharepoint.com/sites/dev/Docs/test.txt\");\n</code></pre>"},{"location":"sp/sharing/#checksharingpermissions","title":"checkSharingPermissions","text":"<p>Applies to: Item, Folder, File</p> <p>Checks Permissions on the list of Users and returns back role the users have on the Item.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/sharing/folders\";\nimport \"@pnp/sp/folders/web\";\nimport { SharingEntityPermission } from \"@pnp/sp/sharing\";\n\nconst sp = spfi(...);\n\n// check the sharing permissions for a folder\nconst perms = await sp.web.getFolderByServerRelativeUrl(\"/sites/dev/Shared Documents/test\").checkSharingPermissions([{ alias: \"i:0#.f|membership|user@site.com\" }]);\n</code></pre>"},{"location":"sp/sharing/#getsharinginformation","title":"getSharingInformation","text":"<p>Applies to: Item, Folder, File</p> <p>Get Sharing Information.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/sharing\";\nimport \"@pnp/sp/folders\";\nimport { ISharingInformation } from \"@pnp/sp/sharing\";\n\nconst sp = spfi(...);\n\n// Get the sharing information for a folder\nconst info = await sp.web.getFolderByServerRelativeUrl(\"/sites/dev/Shared Documents/test\").getSharingInformation();\n\n// get sharing informaiton with a request object\nconst info2 = await sp.web.getFolderByServerRelativeUrl(\"/sites/dev/Shared Documents/test\").getSharingInformation({\n    maxPrincipalsToReturn: 10,\n    populateInheritedLinks: true,\n});\n\n// get sharing informaiton using select and expand, NOTE expand comes first in the API signature\nconst info3 = await sp.web.getFolderByServerRelativeUrl(\"/sites/dev/Shared Documents/test\").getSharingInformation({}, [\"permissionsInformation\"], [\"permissionsInformation\",\"anyoneLinkTrackUsers\"]);\n</code></pre>"},{"location":"sp/sharing/#getobjectsharingsettings","title":"getObjectSharingSettings","text":"<p>Applies to: Item, Folder, File</p> <p>Gets the sharing settings</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/sharing\";\nimport \"@pnp/sp/folders\";\nimport { IObjectSharingSettings } from \"@pnp/sp/sharing\";\n\nconst sp = spfi(...);\n\n// Gets the sharing object settings\nconst settings: IObjectSharingSettings = await sp.web.getFolderByServerRelativeUrl(\"/sites/dev/Shared Documents/test\").getObjectSharingSettings();\n</code></pre>"},{"location":"sp/sharing/#unshare","title":"unshare","text":"<p>Applies to: Item, Folder, File</p> <p>Unshares a given resource</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/sharing\";\nimport \"@pnp/sp/folders\";\nimport { ISharingResult } from \"@pnp/sp/sharing\";\n\nconst sp = spfi(...);\n\nconst result: ISharingResult = await sp.web.getFolderByServerRelativeUrl(\"/sites/dev/Shared Documents/test\").unshare();\n</code></pre>"},{"location":"sp/sharing/#deletesharinglinkbykind","title":"deleteSharingLinkByKind","text":"<p>Applies to: Item, Folder, File</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/sharing\";\nimport \"@pnp/sp/folders\";\nimport { ISharingResult, SharingLinkKind } from \"@pnp/sp/sharing\";\n\nconst sp = spfi(...);\n\nconst result: ISharingResult = await sp.web.getFolderByServerRelativeUrl(\"/sites/dev/Shared Documents/test\").deleteSharingLinkByKind(SharingLinkKind.AnonymousEdit);\n</code></pre>"},{"location":"sp/sharing/#unsharelink","title":"unshareLink","text":"<p>Applies to: Item, Folder, File</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/sharing\";\nimport \"@pnp/sp/folders\";\nimport { SharingLinkKind } from \"@pnp/sp/sharing\";\n\nconst sp = spfi(...);\n\nawait sp.web.getFolderByServerRelativeUrl(\"/sites/dev/Shared Documents/test\").unshareLink(SharingLinkKind.AnonymousEdit);\n\n// specify the sharing link id if available\nawait sp.web.getFolderByServerRelativeUrl(\"/sites/dev/Shared Documents/test\").unshareLink(SharingLinkKind.AnonymousEdit, \"12345\");\n</code></pre>"},{"location":"sp/site-designs/","title":"@pnp/sp/site-designs","text":"<p>You can create site designs to provide reusable lists, themes, layouts, pages, or custom actions so that your users can quickly build new SharePoint sites with the features they need. Check out SharePoint site design and site script overview for more information.</p>"},{"location":"sp/site-designs/#site-designs","title":"Site Designs","text":""},{"location":"sp/site-designs/#create-a-new-site-design","title":"Create a new site design","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/site-designs\";\n\nconst sp = spfi(...);\n\n// WebTemplate: 64 Team site template, 68 Communication site template\nconst siteDesign = await sp.siteDesigns.createSiteDesign({\n    SiteScriptIds: [\"884ed56b-1aab-4653-95cf-4be0bfa5ef0a\"],\n    Title: \"SiteDesign001\",\n    WebTemplate: \"64\",\n});\n\nconsole.log(siteDesign.Title);\n</code></pre>"},{"location":"sp/site-designs/#applying-a-site-design-to-a-site","title":"Applying a site design to a site","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/site-designs\";\n\nconst sp = spfi(...);\n\n// Limited to 30 actions in a site script, but runs synchronously\nawait sp.siteDesigns.applySiteDesign(\"75b9d8fe-4381-45d9-88c6-b03f483ae6a8\",\"https://contoso.sharepoint.com/sites/teamsite-pnpjs001\");\n\n// Better use the following method for 300 actions in a site script\nconst task = await sp.web.addSiteDesignTask(\"75b9d8fe-4381-45d9-88c6-b03f483ae6a8\");\n</code></pre>"},{"location":"sp/site-designs/#retrieval","title":"Retrieval","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/site-designs\";\n\nconst sp = spfi(...);\n\n// Retrieving all site designs\nconst allSiteDesigns = await sp.siteDesigns.getSiteDesigns();\nconsole.log(`Total site designs: ${allSiteDesigns.length}`);\n\n// Retrieving a single site design by Id\nconst siteDesign = await sp.siteDesigns.getSiteDesignMetadata(\"75b9d8fe-4381-45d9-88c6-b03f483ae6a8\");\nconsole.log(siteDesign.Title);\n</code></pre>"},{"location":"sp/site-designs/#update-and-delete","title":"Update and delete","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/site-designs\";\n\nconst sp = spfi(...);\n\n// Update\nconst updatedSiteDesign = await sp.siteDesigns.updateSiteDesign({ Id: \"75b9d8fe-4381-45d9-88c6-b03f483ae6a8\", Title: \"SiteDesignUpdatedTitle001\" });\n\n// Delete\nawait sp.siteDesigns.deleteSiteDesign(\"75b9d8fe-4381-45d9-88c6-b03f483ae6a8\");\n</code></pre>"},{"location":"sp/site-designs/#setting-rightspermissions","title":"Setting Rights/Permissions","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/site-designs\";\n\nconst sp = spfi(...);\n\n// Get\nconst rights = await sp.siteDesigns.getSiteDesignRights(\"75b9d8fe-4381-45d9-88c6-b03f483ae6a8\");\nconsole.log(rights.length &gt; 0 ? rights[0].PrincipalName : \"\");\n\n// Grant\nawait sp.siteDesigns.grantSiteDesignRights(\"75b9d8fe-4381-45d9-88c6-b03f483ae6a8\", [\"user@contoso.onmicrosoft.com\"]);\n\n// Revoke\nawait sp.siteDesigns.revokeSiteDesignRights(\"75b9d8fe-4381-45d9-88c6-b03f483ae6a8\", [\"user@contoso.onmicrosoft.com\"]);\n\n// Reset all view rights\nconst rights = await sp.siteDesigns.getSiteDesignRights(\"75b9d8fe-4381-45d9-88c6-b03f483ae6a8\");\nawait sp.siteDesigns.revokeSiteDesignRights(\"75b9d8fe-4381-45d9-88c6-b03f483ae6a8\", rights.map(u =&gt; u.PrincipalName));\n</code></pre>"},{"location":"sp/site-designs/#get-a-history-of-site-designs-that-have-run-on-a-web","title":"Get a history of site designs that have run on a web","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/site-designs\";\n\nconst sp = spfi(...);\n\nconst runs = await sp.web.getSiteDesignRuns();\nconst runs2 = await sp.siteDesigns.getSiteDesignRun(\"https://TENANT.sharepoint.com/sites/mysite\");\n\n// Get runs specific to a site design\nconst runs3 = await sp.web.getSiteDesignRuns(\"75b9d8fe-4381-45d9-88c6-b03f483ae6a8\");\nconst runs4 = await sp.siteDesigns.getSiteDesignRun(\"https://TENANT.sharepoint.com/sites/mysite\", \"75b9d8fe-4381-45d9-88c6-b03f483ae6a8\");\n\n// For more information about the site script actions\nconst runStatus = await sp.web.getSiteDesignRunStatus(runs[0].ID);\nconst runStatus2 = await sp.siteDesigns.getSiteDesignRunStatus(\"https://TENANT.sharepoint.com/sites/mysite\", runs[0].ID);\n\n</code></pre>"},{"location":"sp/site-groups/","title":"@pnp/sp/site-groups","text":"<p>The site groups module provides methods to manage groups for a sharepoint site.</p>"},{"location":"sp/site-groups/#isitegroups","title":"ISiteGroups","text":""},{"location":"sp/site-groups/#get-all-site-groups","title":"Get all site groups","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/site-groups/web\";\n\nconst sp = spfi(...);\n\n// gets all site groups of the web\nconst groups = await sp.web.siteGroups();\n</code></pre>"},{"location":"sp/site-groups/#get-the-associated-groups-of-a-web","title":"Get the associated groups of a web","text":"<p>You can get the associated Owner, Member and Visitor groups of a web</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/site-groups/web\";\n\nconst sp = spfi(...);\n\n// Gets the associated visitors group of a web\nconst visitorGroup = await sp.web.associatedVisitorGroup();\n\n// Gets the associated members group of a web\nconst memberGroup = await sp.web.associatedMemberGroup();\n\n// Gets the associated owners group of a web\nconst ownerGroup = await sp.web.associatedOwnerGroup();\n\n</code></pre>"},{"location":"sp/site-groups/#create-the-default-associated-groups-for-a-web","title":"Create the default associated groups for a web","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/site-groups/web\";\n\nconst sp = spfi(...);\n\n// Breaks permission inheritance and creates the default associated groups for the web\n\n// Login name of the owner\nconst owner1 = \"owner@example.onmicrosoft.com\";\n\n// Specify true, the permissions should be copied from the current parent scope, else false\nconst copyRoleAssignments = false;\n\n// Specify true to make all child securable objects inherit role assignments from the current object\nconst clearSubScopes = true;\n\nawait sp.web.createDefaultAssociatedGroups(\"PnP Site\", owner1, copyRoleAssignments, clearSubScopes);\n</code></pre>"},{"location":"sp/site-groups/#create-a-new-site-group","title":"Create a new site group","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/site-groups/web\";\n\nconst sp = spfi(...);\n\n// Creates a new site group with the specified title\nawait sp.web.siteGroups.add({\"Title\":\"new group name\"});\n</code></pre>"},{"location":"sp/site-groups/#isitegroup","title":"ISiteGroup","text":"Scenario Import Statement Selective 2 import \"@pnp/sp/webs\";import \"@pnp/sp/site-groups\"; Selective 3 import \"@pnp/sp/webs\";import \"@pnp/sp/site-groups/web\"; Preset: All import {sp, SiteGroups, SiteGroup } from \"@pnp/sp/presets/all\";"},{"location":"sp/site-groups/#getting-and-updating-the-groups-of-a-sharepoint-web","title":"Getting and updating the groups of a sharepoint web","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/site-groups\";\n\nconst sp = spfi(...);\n\n// get the group using a group id\nconst groupID = 33;\nlet grp = await sp.web.siteGroups.getById(groupID)();\n\n// get the group using the group's name\nconst groupName = \"ClassicTeam Visitors\";\ngrp = await sp.web.siteGroups.getByName(groupName)();\n\n// update a group\nawait sp.web.siteGroups.getById(groupID).update({\"Title\": \"New Group Title\"});\n\n// delete a group from the site using group id\nawait sp.web.siteGroups.removeById(groupID);\n\n// delete a group from the site using group name\nawait sp.web.siteGroups.removeByLoginName(groupName);\n</code></pre>"},{"location":"sp/site-groups/#getting-all-users-of-a-group","title":"Getting all users of a group","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/site-groups\";\n\nconst sp = spfi(...);\n\n// get all users of group\nconst groupID = 7;\nconst users = await sp.web.siteGroups.getById(groupID).users();\n</code></pre>"},{"location":"sp/site-groups/#updating-the-owner-of-a-site-group","title":"Updating the owner of a site group","text":"<p>Unfortunately for now setting the owner of a group as another or same SharePoint group is currently unsupported in REST. Setting the owner as a user is supported.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/site-groups\";\n\nconst sp = spfi(...);\n\n// Update the owner with a user id\nawait sp.web.siteGroups.getById(7).setUserAsOwner(4);\n</code></pre>"},{"location":"sp/site-scripts/","title":"@pnp/sp/site-scripts","text":""},{"location":"sp/site-scripts/#create-a-new-site-script","title":"Create a new site script","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/site-scripts\";\n\nconst sp = spfi(...);\n\nconst sitescriptContent = {\n    \"$schema\": \"schema.json\",\n    \"actions\": [\n        {\n            \"themeName\": \"Theme Name 123\",\n            \"verb\": \"applyTheme\",\n        },\n    ],\n    \"bindata\": {},\n    \"version\": 1,\n};\n\nconst siteScript = await sp.siteScripts.createSiteScript(\"Title\", \"description\", sitescriptContent);\n\nconsole.log(siteScript.Title);\n</code></pre>"},{"location":"sp/site-scripts/#retrieval","title":"Retrieval","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/site-scripts\";\n\nconst sp = spfi(...);\n\n// Retrieving all site scripts\nconst allSiteScripts = await sp.siteScripts.getSiteScripts();\nconsole.log(allSiteScripts.length &gt; 0 ? allSiteScripts[0].Title : \"\");\n\n// Retrieving a single site script by Id\nconst siteScript = await sp.siteScripts.getSiteScriptMetadata(\"884ed56b-1aab-4653-95cf-4be0bfa5ef0a\");\nconsole.log(siteScript.Title);\n</code></pre>"},{"location":"sp/site-scripts/#update-and-delete","title":"Update and delete","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/site-scripts\";\n\nconst sp = spfi(...);\n\n// Update\nconst updatedSiteScript = await sp.siteScripts.updateSiteScript({ Id: \"884ed56b-1aab-4653-95cf-4be0bfa5ef0a\", Title: \"New Title\" });\nconsole.log(updatedSiteScript.Title);\n\n// Delete\nawait sp.siteScripts.deleteSiteScript(\"884ed56b-1aab-4653-95cf-4be0bfa5ef0a\");\n</code></pre>"},{"location":"sp/site-scripts/#get-site-script-from-a-list","title":"Get site script from a list","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/site-scripts\";\n\nconst sp = spfi(...);\n\n// Using the absolute URL of the list\nconst ss = await sp.siteScripts.getSiteScriptFromList(\"https://TENANT.sharepoint.com/Lists/mylist\");\n\n// Using the PnPjs web object to fetch the site script from a specific list\nconst ss2 = await sp.web.lists.getByTitle(\"mylist\").getSiteScript();\n</code></pre>"},{"location":"sp/site-scripts/#get-site-script-from-a-web","title":"Get site script from a web","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/site-scripts\";\n\nconst extractInfo = {\n    IncludeBranding: true,\n    IncludeLinksToExportedItems: true,\n    IncludeRegionalSettings: true,\n    IncludeSiteExternalSharingCapability: true,\n    IncludeTheme: true,\n    IncludedLists: [\"Lists/MyList\"]\n};\n\nconst ss = await sp.siteScripts.getSiteScriptFromWeb(\"https://TENANT.sharepoint.com/sites/mysite\", extractInfo);\n\n// Using the PnPjs web object to fetch the site script from a specific web\nconst ss2 = await sp.web.getSiteScript(extractInfo);\n</code></pre>"},{"location":"sp/site-scripts/#execute-site-script-action","title":"Execute Site Script Action","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/site-scripts\";\n\nconst sp = spfi(...);\n\nconst siteScript = \"your site script action...\";\n\nconst ss = await sp.siteScripts.executeSiteScriptAction(siteScript);\n</code></pre>"},{"location":"sp/site-scripts/#execute-site-script-for-a-specific-web","title":"Execute site script for a specific web","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport { SiteScripts } \"@pnp/sp/site-scripts\";\n\nconst siteScript = \"your site script action...\";\n\nconst scriptService = SiteScripts(\"https://absolute/url/to/web\");\n\nconst ss = await scriptService.executeSiteScriptAction(siteScript);\n</code></pre>"},{"location":"sp/site-users/","title":"@pnp/sp/site-users","text":"<p>The site users module provides methods to manage users for a sharepoint site.</p>"},{"location":"sp/site-users/#isiteusers","title":"ISiteUsers","text":""},{"location":"sp/site-users/#get-all-site-user","title":"Get all site user","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/site-users/web\";\n\nconst sp = spfi(...);\n\nconst users = await sp.web.siteUsers();\n</code></pre>"},{"location":"sp/site-users/#get-current-user","title":"Get Current user","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/site-users/web\";\n\nconst sp = spfi(...);\n\nlet user = await sp.web.currentUser();\n</code></pre>"},{"location":"sp/site-users/#get-user-by-id","title":"Get user by id","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/site-users/web\";\n\nconst sp = spfi(...);\n\nconst id = 6;\nuser = await sp.web.getUserById(id)();\n</code></pre>"},{"location":"sp/site-users/#ensure-user","title":"Ensure user","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/site-users/web\";\n\nconst sp = spfi(...);\n\nconst username = \"usernames@microsoft.com\";\nresult = await sp.web.ensureUser(username);\n</code></pre>"},{"location":"sp/site-users/#isiteuser","title":"ISiteUser","text":"Scenario Import Statement Selective 2 import \"@pnp/sp/webs\";import \"@pnp/sp/site-users\"; Selective 3 import \"@pnp/sp/webs\";import \"@pnp/sp/site-users/web\"; Preset: All import {sp, SiteUsers, SiteUser } from \"@pnp/sp/presets/all\";"},{"location":"sp/site-users/#get-user-groups","title":"Get user Groups","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/site-users/web\";\n\nconst sp = spfi(...);\n\nlet groups = await sp.web.currentUser.groups();\n</code></pre>"},{"location":"sp/site-users/#add-user-to-site-collection","title":"Add user to Site collection","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/site-users/web\";\n\nconst sp = spfi(...);\n\nconst user = await sp.web.ensureUser(\"userLoginname\")\nconst users = await sp.web.siteUsers;\n\nawait users.add(user.data.LoginName);\n</code></pre>"},{"location":"sp/site-users/#get-user","title":"Get user","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/site-users/web\";\n\nconst sp = spfi(...);\n\n// get user object by id\nconst user = await sp.web.siteUsers.getById(6)();\n\n//get user object by Email\nconst user = await sp.web.siteUsers.getByEmail(\"user@mail.com\")();\n\n//get user object by LoginName\nconst user = await sp.web.siteUsers.getByLoginName(\"userLoginName\")();\n</code></pre>"},{"location":"sp/site-users/#update-user","title":"Update user","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/site-users/web\";\n\nconst sp = spfi(...);\n\nlet userProps = await sp.web.currentUser();\nuserProps.Title = \"New title\";\nawait sp.web.currentUser.update(userProps);\n</code></pre>"},{"location":"sp/site-users/#remove-user","title":"Remove user","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/site-users/web\";\n\nconst sp = spfi(...);\n\n// remove user by id\nawait sp.web.siteUsers.removeById(6);\n\n// remove user by LoginName\nawait sp.web.siteUsers.removeByLoginName(6);\n</code></pre>"},{"location":"sp/site-users/#isiteuserprops","title":"ISiteUserProps","text":"<p>User properties:</p> Property Name Type Description Email string Contains Site user email Id Number Contains Site user Id IsHiddenInUI Boolean Site user IsHiddenInUI IsShareByEmailGuestUser boolean Site user is external user IsSiteAdmin Boolean Describes if Site user Is Site Admin LoginName string Site user LoginName PrincipalType number Site user Principal type Title string Site user Title <pre><code>interface ISiteUserProps {\n\n    /**\n     * Contains Site user email\n     *\n     */\n    Email: string;\n\n    /**\n     * Contains Site user Id\n     *\n     */\n    Id: number;\n\n    /**\n     * Site user IsHiddenInUI\n     *\n     */\n    IsHiddenInUI: boolean;\n\n    /**\n     * Site user IsShareByEmailGuestUser\n     *\n     */\n    IsShareByEmailGuestUser: boolean;\n\n    /**\n     * Describes if Site user Is Site Admin\n     *\n     */\n    IsSiteAdmin: boolean;\n\n    /**\n     * Site user LoginName\n     *\n     */\n    LoginName: string;\n\n    /**\n     * Site user Principal type\n     *\n     */\n    PrincipalType: number | PrincipalType;\n\n    /**\n     * Site user Title\n     *\n     */\n    Title: string;\n}\n</code></pre>"},{"location":"sp/sites/","title":"@pnp/sp/site - Site properties","text":"<p>Site collection are one of the fundamental entry points while working with SharePoint. Sites serve as container for webs, lists, features and other entity types.</p>"},{"location":"sp/sites/#get-context-information-for-the-current-site-collection","title":"Get context information for the current site collection","text":"<p>Using the library, you can get the context information of the current site collection</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/sites\";\nimport { IContextInfo } from \"@pnp/sp/sites\";\n\nconst sp = spfi(...);\n\nconst oContext: IContextInfo = await sp.site.getContextInfo();\nconsole.log(oContext.FormDigestValue);\n</code></pre>"},{"location":"sp/sites/#get-document-libraries-of-a-web","title":"Get document libraries of a web","text":"<p>Using the library, you can get a list of the document libraries present in the a given web.</p> <p>Note: Works only in SharePoint online</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/sites\";\nimport { IDocumentLibraryInformation } from \"@pnp/sp/sites\";\n\nconst sp = spfi(...);\n\nconst docLibs: IDocumentLibraryInformation[] = await sp.site.getDocumentLibraries(\"https://tenant.sharepoint.com/sites/test/subsite\");\n\n//we got the array of document library information\ndocLibs.forEach((docLib: IDocumentLibraryInformation) =&gt; {\n    // do something with each library\n});\n</code></pre>"},{"location":"sp/sites/#open-web-by-id","title":"Open Web By Id","text":"<p>Because this method is a POST request you can chain off it directly. You will get back the full web properties in the data property of the return object. You can also chain directly off the returned Web instance on the web property.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/sites\";\n\nconst sp = spfi(...);\n\nconst w = await sp.site.openWebById(\"111ca453-90f5-482e-a381-cee1ff383c9e\");\n\n//we got all the data from the web as well\nconsole.log(w.data);\n\n// we can chain\nconst w2 = await w.web.select(\"Title\")();\n</code></pre>"},{"location":"sp/sites/#get-absolute-web-url-from-page-url","title":"Get absolute web url from page url","text":"<p>Using the library, you can get the absolute web url by providing a page url</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/sites\";\n\nconst sp = spfi(...);\n\nconst d: string = await sp.site.getWebUrlFromPageUrl(\"https://tenant.sharepoint.com/sites/test/Pages/test.aspx\");\n\nconsole.log(d); //https://tenant.sharepoint.com/sites/test\n</code></pre>"},{"location":"sp/sites/#access-the-root-web","title":"Access the root web","text":"<p>There are two methods to access the root web. The first, using the rootWeb property, is best for directly accessing information about that web. If you want to chain multiple operations off of the web, better to use the getRootWeb method that will ensure the web instance is created using its own Url vs. \"_api/sites/rootweb\" which does not work for all operations.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/sites\";\n\nconst sp = spfi(...);\n\n// use for rootweb information access\nconst rootwebData = await sp.site.rootWeb();\n\n// use for chaining\nconst rootweb = await sp.site.getRootWeb();\nconst listData = await rootWeb.lists.getByTitle(\"MyList\")();\n</code></pre>"},{"location":"sp/sites/#create-a-modern-communication-site","title":"Create a modern communication site","text":"<p>Note: Works only in SharePoint online</p> <p>Creates a modern communication site.</p> Property Type Required Description Title string yes The title of the site to create. lcid number yes The default language to use for the site. shareByEmailEnabled boolean yes If set to true, it will enable sharing files via Email. By default it is set to false url string yes The fully qualified URL (e.g. <code>https://yourtenant.sharepoint.com/sites/mysitecollection</code>) of the site. description string no The description of the communication site. classification string no The Site classification to use. For instance \"Contoso Classified\". See https://www.youtube.com/watch?v=E-8Z2ggHcS0 for more information siteDesignId string no The Guid of the site design to be used. You can use the below default OOTB GUIDs: Topic: null Showcase: 6142d2a0-63a5-4ba0-aede-d9fefca2c767 Blank: f6cc5403-0d63-442e-96c0-285923709ffc hubSiteId string no The Guid of the already existing Hub site Owner string no Required when using app-only context. Owner principal name e.g. user@tenant.onmicrosoft.com <pre><code>\nimport { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/sites\";\n\nconst sp = spfi(...);\n\nconst result = await sp.site.createCommunicationSite(\n            \"Title\",\n            1033,\n            true,\n            \"https://tenant.sharepoint.com/sites/commSite\",\n            \"Description\",\n            \"HBI\",\n            \"f6cc5403-0d63-442e-96c0-285923709ffc\",\n            \"a00ec589-ea9f-4dba-a34e-67e78d41e509\",\n            \"user@TENANT.onmicrosoft.com\");\n\n</code></pre>"},{"location":"sp/sites/#create-from-props","title":"Create from Props","text":"<p>You may need to supply additional parameters such as WebTemplate, to do so please use the <code>createCommunicationSiteFromProps</code> method.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/sites\";\n\nconst sp = spfi(...);\n\n// in this case you supply a single struct deinfing the creation props\nconst result = await sp.site.createCommunicationSiteFromProps({\n  Owner: \"patrick@three18studios.com\",\n  Title: \"A Test Site\",\n  Url: \"https://{tenant}.sharepoint.com/sites/commsite2\",\n  WebTemplate: \"STS#3\",\n});\n</code></pre>"},{"location":"sp/sites/#create-a-modern-team-site","title":"Create a modern team site","text":"<p>Note: Works only in SharePoint online. It wont work with App only tokens</p> <p>Creates a modern team site backed by O365 group.</p> Property Type Required Description displayName string yes The title/displayName of the site to be created. alias string yes Alias of the underlying Office 365 Group. isPublic boolean yes Defines whether the Office 365 Group will be public (default), or private. lcid number yes The language to use for the site. If not specified will default to English (1033). description string no The description of the modern team site. classification string no The Site classification to use. For instance \"Contoso Classified\". See https://www.youtube.com/watch?v=E-8Z2ggHcS0 for more information owners string array (string[]) no The Owners of the site to be created hubSiteId string no The Guid of the already existing Hub site siteDesignId string no The Guid of the site design to be used. You can use the below default OOTB GUIDs: Topic: null Showcase: 6142d2a0-63a5-4ba0-aede-d9fefca2c767 Blank: f6cc5403-0d63-442e-96c0-285923709ffc <pre><code>\nimport { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/sites\";\n\nconst sp = spfi(...);\n\nconst result = await sp.site.createModernTeamSite(\n        \"displayName\",\n        \"alias\",\n        true,\n        1033,\n        \"description\",\n        \"HBI\",\n        [\"user1@tenant.onmicrosoft.com\",\"user2@tenant.onmicrosoft.com\",\"user3@tenant.onmicrosoft.com\"],\n        \"a00ec589-ea9f-4dba-a34e-67e78d41e509\",\n        \"f6cc5403-0d63-442e-96c0-285923709ffc\"\n        );\n\nconsole.log(d);\n</code></pre>"},{"location":"sp/sites/#create-from-props_1","title":"Create from Props","text":"<p>You may need to supply additional parameters, to do so please use the <code>createModernTeamSiteFromProps</code> method.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/sites\";\n\nconst sp = spfi(...);\n\n// in this case you supply a single struct deinfing the creation props\nconst result = await sp.site.createModernTeamSiteFromProps({\n  alias: \"JenniferGarner\",\n  displayName: \"A Test Site\",\n  owners: [\"patrick@three18studios.com\"],\n});\n</code></pre>"},{"location":"sp/sites/#delete-a-site-collection","title":"Delete a site collection","text":"<p>Using the library, you can delete a specific site collection</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/sites\";\nimport { Site } from \"@pnp/sp/sites\";\n\nconst sp = spfi(...);\n\n// Delete the current site\nawait sp.site.delete();\n\n// Specify which site to delete\nconst siteUrl = \"https://tenant.sharepoint.com/sites/subsite\";\nconst site2 = Site(siteUrl);\nawait site2.delete();\n</code></pre>"},{"location":"sp/sites/#check-if-a-site-collection-exists","title":"Check if a Site Collection Exists","text":"<p>Using the library, you can check if a specific site collection exist or not on your tenant</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/sites\";\n\nconst sp = spfi(...);\n\n// Specify which site to verify\nconst siteUrl = \"https://tenant.sharepoint.com/sites/subsite\";\nconst exists = await sp.site.exists(siteUrl);\nconsole.log(exists);\n</code></pre>"},{"location":"sp/sites/#set-the-site-logo","title":"Set the site logo","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/sites\";\nimport {ISiteLogoProperties, SiteLogoAspect, SiteLogoType} from \"@pnp/sp/sites\";\n\nconst sp = spfi(...);\n\n//set the web's site logo\nconst logoProperties: ISiteLogoProperties = {\n    relativeLogoUrl: \"/sites/mySite/SiteAssets/site_logo.png\", \n    aspect: SiteLogoAspect.Rectangular, \n    type: SiteLogoType.WebLogo\n};\nawait sp.site.setSiteLogo(logoProperties);\n</code></pre>"},{"location":"sp/social/","title":"@pnp/sp/ - social","text":"<p>The social API allows you to track followed sites, people, and docs. Note, many of these methods only work with the context of a logged in user, and not with app-only permissions.</p>"},{"location":"sp/social/#getfollowedsitesuri","title":"getFollowedSitesUri","text":"<p>Gets a URI to a site that lists the current user's followed sites.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/social\";\n\nconst sp = spfi(...);\n\nconst uri = await sp.social.getFollowedSitesUri();\n</code></pre>"},{"location":"sp/social/#getfolloweddocumentsuri","title":"getFollowedDocumentsUri","text":"<p>Gets a URI to a site that lists the current user's followed documents.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/social\";\n\nconst sp = spfi(...);\n\nconst uri = await sp.social.getFollowedDocumentsUri();\n</code></pre>"},{"location":"sp/social/#follow","title":"follow","text":"<p>Makes the current user start following a user, document, site, or tag</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { SocialActorType } from \"@pnp/sp/social\";\n\nconst sp = spfi(...);\n\n// follow a site\nconst r1 = await sp.social.follow({\n    ActorType: SocialActorType.Site,\n    ContentUri: \"htts://tenant.sharepoint.com/sites/site\",\n});\n\n// follow a person\nconst r2 = await sp.social.follow({\n    AccountName: \"i:0#.f|membership|person@tenant.com\",\n    ActorType: SocialActorType.User,\n});\n\n// follow a doc\nconst r3 = await sp.social.follow({\n    ActorType: SocialActorType.Document,\n    ContentUri: \"https://tenant.sharepoint.com/sites/dev/SitePages/Test.aspx\",\n});\n\n// follow a tag\n// You need the tag GUID to start following a tag.\n// You can't get the GUID by using the REST service, but you can use the .NET client object model or the JavaScript object model.\n// See How to get a tag's GUID based on the tag's name by using the JavaScript object model.\n// https://docs.microsoft.com/en-us/sharepoint/dev/general-development/follow-content-in-sharepoint#bk_getTagGuid\nconst r4 = await sp.social.follow({\n    ActorType: SocialActorType.Tag,\n    TagGuid: \"19a4a484-c1dc-4bc5-8c93-bb96245ce928\",\n});\n</code></pre>"},{"location":"sp/social/#isfollowed","title":"isFollowed","text":"<p>Indicates whether the current user is following a specified user, document, site, or tag</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { SocialActorType } from \"@pnp/sp/social\";\n\nconst sp = spfi(...);\n\n// pass the same social actor struct as shown in follow example for each type\nconst r = await sp.social.isFollowed({\n    AccountName: \"i:0#.f|membership|person@tenant.com\",\n    ActorType: SocialActorType.User,\n});\n</code></pre>"},{"location":"sp/social/#stopfollowing","title":"stopFollowing","text":"<p>Makes the current user stop following a user, document, site, or tag</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { SocialActorType } from \"@pnp/sp/social\";\n\nconst sp = spfi(...);\n\n// pass the same social actor struct as shown in follow example for each type\nconst r = await sp.social.stopFollowing({\n    AccountName: \"i:0#.f|membership|person@tenant.com\",\n    ActorType: SocialActorType.User,\n});\n</code></pre>"},{"location":"sp/social/#my","title":"my","text":""},{"location":"sp/social/#get","title":"get","text":"<p>Gets this user's social information</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/social\";\n\nconst sp = spfi(...);\n\nconst r = await sp.social.my();\n</code></pre>"},{"location":"sp/social/#followed","title":"followed","text":"<p>Gets users, documents, sites, and tags that the current user is following based on the supplied flags.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { SocialActorType } from \"@pnp/sp/social\";\n\nconst sp = spfi(...);\n\n// get all the followed documents\nconst r1 = await sp.social.my.followed(SocialActorTypes.Document);\n\n// get all the followed documents and sites\nconst r2 = await sp.social.my.followed(SocialActorTypes.Document | SocialActorTypes.Site);\n\n// get all the followed sites updated in the last 24 hours\nconst r3 = await sp.social.my.followed(SocialActorTypes.Site | SocialActorTypes.WithinLast24Hours);\n</code></pre>"},{"location":"sp/social/#followedcount","title":"followedCount","text":"<p>Works as followed but returns on the count of actors specified by the query</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { SocialActorType } from \"@pnp/sp/social\";\n\nconst sp = spfi(...);\n\n// get the followed documents count\nconst r = await sp.social.my.followedCount(SocialActorTypes.Document);\n</code></pre>"},{"location":"sp/social/#followers","title":"followers","text":"<p>Gets the users who are following the current user.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/social\";\n\nconst sp = spfi(...);\n\n// get the followed documents count\nconst r = await sp.social.my.followers();\n</code></pre>"},{"location":"sp/social/#suggestions","title":"suggestions","text":"<p>Gets users who the current user might want to follow.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/social\";\n\nconst sp = spfi(...);\n\n// get the followed documents count\nconst r = await sp.social.my.suggestions();\n</code></pre>"},{"location":"sp/sp-utilities-utility/","title":"@pnp/sp/utilities","text":"<p>Through the REST api you are able to call a subset of the SP.Utilities.Utility methods. We have explicitly defined some of these methods and provided a method to call any others in a generic manner. These methods are exposed on pnp.sp.utility and support batching and caching.</p>"},{"location":"sp/sp-utilities-utility/#sendemail","title":"sendEmail","text":"<p>This methods allows you to send an email based on the supplied arguments. The method takes a single argument, a plain object defined by the EmailProperties interface (shown below).</p>"},{"location":"sp/sp-utilities-utility/#emailproperties","title":"EmailProperties","text":"<pre><code>export interface TypedHash&lt;T&gt; {\n    [key: string]: T;\n}\n\nexport interface EmailProperties {\n\n    To: string[];\n    CC?: string[];\n    BCC?: string[];\n    Subject: string;\n    Body: string;\n    AdditionalHeaders?: TypedHash&lt;string&gt;;\n    From?: string;\n}\n</code></pre>"},{"location":"sp/sp-utilities-utility/#usage","title":"Usage","text":"<p>You must define the To, Subject, and Body values - the remaining are optional.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/sputilities\";\nimport { IEmailProperties } from \"@pnp/sp/sputilities\";\n\nconst sp = spfi(...);\n\nconst emailProps: IEmailProperties = {\n    To: [\"user@site.com\"],\n    CC: [\"user2@site.com\", \"user3@site.com\"],\n    BCC: [\"user4@site.com\", \"user5@site.com\"],\n    Subject: \"This email is about...\",\n    Body: \"Here is the body. &lt;b&gt;It supports html&lt;/b&gt;\",\n    AdditionalHeaders: {\n        \"content-type\": \"text/html\"\n    }\n};\n\nawait sp.utility.sendEmail(emailProps);\nconsole.log(\"Email Sent!\");\n</code></pre>"},{"location":"sp/sp-utilities-utility/#getcurrentuseremailaddresses","title":"getCurrentUserEmailAddresses","text":"<p>This method returns the current user's email addresses known to SharePoint.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/sputilities\";\n\nconst sp = spfi(...);\n\nlet addressString: string = await sp.utility.getCurrentUserEmailAddresses();\n\n// and use it with sendEmail\nawait sp.utility.sendEmail({\n    To: [addressString],\n    Subject: \"This email is about...\",\n    Body: \"Here is the body. &lt;b&gt;It supports html&lt;/b&gt;\",\n    AdditionalHeaders: {\n        \"content-type\": \"text/html\"\n    },\n});\n</code></pre>"},{"location":"sp/sp-utilities-utility/#resolveprincipal","title":"resolvePrincipal","text":"<p>Gets information about a principal that matches the specified Search criteria</p> <pre><code>import { spfi, SPFx, IPrincipalInfo, PrincipalType, PrincipalSource } from \"@pnp/sp\";\nimport \"@pnp/sp/sputilities\";\n\nconst sp = spfi(...);\n\nlet principal : IPrincipalInfo = await sp.utility.resolvePrincipal(\"user@site.com\", PrincipalType.User, PrincipalSource.All, true, false, true);\n\nconsole.log(principal);\n</code></pre>"},{"location":"sp/sp-utilities-utility/#searchprincipals","title":"searchPrincipals","text":"<p>Gets information about the principals that match the specified Search criteria.</p> <pre><code>import { spfi, SPFx, IPrincipalInfo, PrincipalType, PrincipalSource } from \"@pnp/sp\";\nimport \"@pnp/sp/sputilities\";\n\nconst sp = spfi(...);\n\nlet principals : IPrincipalInfo[] = await sp.utility.searchPrincipals(\"john\", PrincipalType.User, PrincipalSource.All,\"\", 10);\n\nconsole.log(principals);\n</code></pre>"},{"location":"sp/sp-utilities-utility/#createemailbodyforinvitation","title":"createEmailBodyForInvitation","text":"<p>Gets the external (outside the firewall) URL to a document or resource in a site.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/sputilities\";\n\nconst sp = spfi(...);\n\nlet url : string = await sp.utility.createEmailBodyForInvitation(\"https://contoso.sharepoint.com/sites/dev/SitePages/DevHome.aspx\");\nconsole.log(url);\n</code></pre>"},{"location":"sp/sp-utilities-utility/#expandgroupstoprincipals","title":"expandGroupsToPrincipals","text":"<p>Resolves the principals contained within the supplied groups</p> <pre><code>import { spfi, SPFx, IPrincipalInfo } from \"@pnp/sp\";\nimport \"@pnp/sp/sputilities\";\n\nconst sp = spfi(...);\n\nlet principals : IPrincipalInfo[] = await sp.utility.expandGroupsToPrincipals([\"Dev Owners\", \"Dev Members\"]);\nconsole.log(principals);\n\n// optionally supply a max results count. Default is 30.\nlet principals : IPrincipalInfo[] = await sp.utility.expandGroupsToPrincipals([\"Dev Owners\", \"Dev Members\"], 10);\nconsole.log(principals);\n</code></pre>"},{"location":"sp/sp-utilities-utility/#createwikipage","title":"createWikiPage","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/sputilities\";\nimport { ICreateWikiPageResult } from \"@pnp/sp/sputilities\";\n\nconst sp = spfi(...);\n\nlet newPage : ICreateWikiPageResult = await sp.utility.createWikiPage({\n    ServerRelativeUrl: \"/sites/dev/SitePages/mynewpage.aspx\",\n    WikiHtmlContent: \"This is my &lt;b&gt;page&lt;/b&gt; content. It supports rich html.\",\n});\n\n// newPage contains the raw data returned by the service\nconsole.log(newPage.data);\n\n// newPage contains a File instance you can use to further update the new page\nlet file = await newPage.file();\nconsole.log(file);\n</code></pre>"},{"location":"sp/subscriptions/","title":"@pnp/sp/subscriptions","text":"<p>Webhooks on a SharePoint list are used to notify any change in the list, to other applications using a push model. This module provides methods to add, update or delete webhooks on a particular SharePoint list or library.</p>"},{"location":"sp/subscriptions/#isubscriptions","title":"ISubscriptions","text":""},{"location":"sp/subscriptions/#add-a-webhook","title":"Add a webhook","text":"<p>Using this library, you can add a webhook to a specified list within the SharePoint site.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\n\nimport { Subscriptions, ISubscriptions} from \"@pnp/sp/subscriptions\";\nimport \"@pnp/sp/subscriptions/list\";\n\nconst sp = spfi(...);\n\n// This is the URL which will be called by SharePoint when there is a change in the list\nconst notificationUrl = \"&lt;notification-url&gt;\";\n\n// Set the expiry date to 180 days from now, which is the maximum allowed for the webhook expiry date.\nconst expiryDate = dateAdd(new Date(), \"day\" , 180).toISOString();\n\n// Adds a webhook to the Documents library\nvar res = await sp.web.lists.getByTitle(\"Documents\").subscriptions.add(notificationUrl,expiryDate);\n</code></pre>"},{"location":"sp/subscriptions/#get-all-webhooks-added-to-a-list","title":"Get all webhooks added to a list","text":"<p>Read all the webhooks' details which are associated to the list</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/subscriptions\";\n\nconst sp = spfi(...);\n\nconst res = await sp.web.lists.getByTitle(\"Documents\").subscriptions();\n</code></pre>"},{"location":"sp/subscriptions/#isubscription","title":"ISubscription","text":"<p>This interface provides the methods for managing a particular webhook.</p> <p> </p> Scenario Import Statement Selective import \"@pnp/sp/webs\";import \"@pnp/sp/lists\";import { Subscriptions, ISubscriptions, Subscription, ISubscription} from \"@pnp/sp/subscriptions\";import \"@pnp/sp/subscriptions/list\" Preset: All import { sp, Webs, IWebs, Lists, ILists, Subscriptions, ISubscriptions, Subscription, ISubscription } from \"@pnp/sp/presets/all\";"},{"location":"sp/subscriptions/#managing-a-webhook","title":"Managing a webhook","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/subscriptions\";\n\nconst sp = spfi(...);\n\n// Get details of a webhook based on its ID\nconst webhookId = \"1f029e5c-16e4-4941-b46f-67895118763f\";\nconst webhook = await sp.web.lists.getByTitle(\"Documents\").subscriptions.getById(webhookId)();\n\n// Update a webhook\nconst newDate = dateAdd(new Date(), \"day\" , 150).toISOString();\nconst updatedWebhook = await sp.web.lists.getByTitle(\"Documents\").subscriptions.getById(webhookId).update(newDate);\n\n// Delete a webhook\nawait sp.web.lists.getByTitle(\"Documents\").subscriptions.getById(webhookId).delete();\n</code></pre>"},{"location":"sp/taxonomy/","title":"@pnp/sp/taxonomy","text":"<p>Provides access to the v2.1 api term store</p>"},{"location":"sp/taxonomy/#docs-updated-with-v209-release-as-the-underlying-api-changed","title":"Docs updated with v2.0.9 release as the underlying API changed","text":"<p>NOTE: This API may change so please be aware updates to the taxonomy module will not trigger a major version bump in PnPjs even if they are breaking. Once things stabilize this note will be removed.</p> <p> </p> <p></p>"},{"location":"sp/taxonomy/#term-store","title":"Term Store","text":"<p>Access term store data from the root sp object as shown below.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/taxonomy\";\nimport { ITermStoreInfo } from \"@pnp/sp/taxonomy\";\n\nconst sp = spfi(...);\n\n// get term store data\nconst info: ITermStoreInfo = await sp.termStore();\n</code></pre>"},{"location":"sp/taxonomy/#searchterm","title":"searchTerm","text":"<p>Added in 3.3.0</p> <p>Search for terms starting with provided label under entire termStore or a termSet or a parent term.</p> <p>The following properties are valid for the supplied query: <code>label: string</code>, <code>setId?: string</code>, <code>parentTermId?: string</code>, <code>languageTag?: string</code>, <code>stringMatchOption?: \"ExactMatch\" | \"StartsWith\"</code>.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/taxonomy\";\n\nconst sp = spfi(...);\n\n// minimally requires the label\nconst results1 = await sp.termStore.searchTerm({\n  label: \"test\",\n});\n\n// other properties can be included as needed\nconst results2 = await sp.termStore.searchTerm({\n  label: \"test\",\n  setId: \"{guid}\",\n});\n\n// other properties can be included as needed\nconst results3 = await sp.termStore.searchTerm({\n  label: \"test\",\n  setId: \"{guid}\",\n  stringMatchOption: \"ExactMatch\",\n});\n</code></pre>"},{"location":"sp/taxonomy/#update","title":"update","text":"<p>Added in 3.10.0</p> <p>Allows you to update language setttings for the store</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/taxonomy\";\n\nconst sp = spfi(...);\n\nawait sp.termStore.update({\n  defaultLanguageTag: \"en-US\",\n  languageTags: [\"en-US\", \"en-IE\", \"de-DE\"],\n});\n</code></pre>"},{"location":"sp/taxonomy/#term-groups","title":"Term Groups","text":"<p>Access term group information</p>"},{"location":"sp/taxonomy/#list","title":"List","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/taxonomy\";\nimport { ITermGroupInfo } from \"@pnp/sp/taxonomy\";\n\nconst sp = spfi(...);\n\n// get term groups\nconst info: ITermGroupInfo[] = await sp.termStore.groups();\n</code></pre>"},{"location":"sp/taxonomy/#get-by-id","title":"Get By Id","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/taxonomy\";\nimport { ITermGroupInfo } from \"@pnp/sp/taxonomy\";\n\nconst sp = spfi(...);\n\n// get term groups data\nconst info: ITermGroupInfo = await sp.termStore.groups.getById(\"338666a8-1111-2222-3333-f72471314e72\")();\n</code></pre>"},{"location":"sp/taxonomy/#add","title":"Add","text":"<p>Added in 3.10.0</p> <p>Allows you to add a term group to a store.</p> <pre><code>import { spfi, SPFxToken, SPFx } from \"@pnp/sp\";\nimport \"@pnp/sp/taxonomy\";\nimport { ITermGroupInfo } from \"@pnp/sp/taxonomy\";\n\n// NOTE: Because this endpoint requires a token and does not work with cookie auth you must create an instance of SPFI that includes an auth token.\n// We've included a new behavior to support getting a token for sharepoint called `SPFxToken`\nconst sp = spfi().using(SPFx(context), SPFxToken(context));\nconst groupInfo: ITermGroupInfo = await sp.termStore.groups.add({\n  displayName: \"Accounting\",\n  description: \"Term Group for Accounting\",\n  name: \"accounting1\",\n  scope: \"global\",\n});\n</code></pre>"},{"location":"sp/taxonomy/#term-group","title":"Term Group","text":""},{"location":"sp/taxonomy/#delete","title":"Delete","text":"<p>Added in 3.10.0</p> <p>Allows you to add a term group to a store.</p> <pre><code>import { spfi, SPFxToken, SPFx } from \"@pnp/sp\";\nimport \"@pnp/sp/taxonomy\";\nimport { ITermGroupInfo } from \"@pnp/sp/taxonomy\";\n\n// NOTE: Because this endpoint requires a token and does not work with cookie auth you must create an instance of SPFI that includes an auth token.\n// We've included a new behavior to support getting a token for sharepoint called `SPFxToken`\nconst sp = spfi().using(SPFx(context), SPFxToken(context));\n\nawait sp.termStore.groups.getById(\"338666a8-1111-2222-3333-f72471314e72\").delete();\n</code></pre>"},{"location":"sp/taxonomy/#term-sets","title":"Term Sets","text":"<p>Access term set information</p>"},{"location":"sp/taxonomy/#list_1","title":"List","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/taxonomy\";\nimport { ITermSetInfo } from \"@pnp/sp/taxonomy\";\n\nconst sp = spfi(...);\n\n// get set info\nconst info: ITermSetInfo[] = await sp.termStore.groups.getById(\"338666a8-1111-2222-3333-f72471314e72\").sets();\n</code></pre>"},{"location":"sp/taxonomy/#get-by-id_1","title":"Get By Id","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/taxonomy\";\nimport { ITermSetInfo } from \"@pnp/sp/taxonomy\";\n\nconst sp = spfi(...);\n\n// get term set data by group id then by term set id\nconst info: ITermSetInfo = await sp.termStore.groups.getById(\"338666a8-1111-2222-3333-f72471314e72\").sets.getById(\"338666a8-1111-2222-3333-f72471314e72\")();\n\n// get term set data by term set id\nconst infoByTermSetId: ITermSetInfo = await sp.termStore.sets.getById(\"338666a8-1111-2222-3333-f72471314e72\")();\n</code></pre>"},{"location":"sp/taxonomy/#add_1","title":"Add","text":"<p>Added in 3.10.0</p> <p>Allows you to add a term set.</p> <pre><code>import { spfi, SPFxToken, SPFx } from \"@pnp/sp\";\nimport \"@pnp/sp/taxonomy\";\nimport { ITermGroupInfo } from \"@pnp/sp/taxonomy\";\n\n// NOTE: Because this endpoint requires a token and does not work with cookie auth you must create an instance of SPFI that includes an auth token.\n// We've included a new behavior to support getting a token for sharepoint called `SPFxToken`\nconst sp = spfi().using(SPFx(context), SPFxToken(context));\n\n// when adding a set directly from the root .sets property, you must include the \"parentGroup\" property\nconst setInfo = await sp.termStore.sets.add({\n  parentGroup: {\n    id: \"338666a8-1111-2222-3333-f72471314e72\"\n  },\n  contact: \"steve\",\n  description: \"description\",\n  isAvailableForTagging: true,\n  isOpen: true,\n  localizedNames: [{\n    name: \"MySet\",\n    languageTag: \"en-US\",\n  }],\n  properties: [{\n    key: \"key1\",\n    value: \"value1\",\n  }]\n});\n\n// when adding a termset through a group's sets property you do not specify the \"parentGroup\" property\nconst setInfo2 = await sp.termStore.groups.getById(\"338666a8-1111-2222-3333-f72471314e72\").sets.add({\n  contact: \"steve\",\n  description: \"description\",\n  isAvailableForTagging: true,\n  isOpen: true,\n  localizedNames: [{\n    name: \"MySet2\",\n    languageTag: \"en-US\",\n  }],\n  properties: [{\n    key: \"key1\",\n    value: \"value1\",\n  }]\n});\n</code></pre>"},{"location":"sp/taxonomy/#getallchildrenasorderedtree","title":"getAllChildrenAsOrderedTree","text":"<p>This method will get all of a set's child terms in an ordered array. It is a costly method in terms of requests so we suggest you cache the results as taxonomy trees seldom change.</p> <p>Starting with version 2.6.0 you can now include an optional param to retrieve all of the term's properties and localProperties in the tree. Default is false.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/taxonomy\";\nimport { ITermInfo } from \"@pnp/sp/taxonomy\";\nimport { dateAdd, PnPClientStorage } from \"@pnp/core\";\n\nconst sp = spfi(...);\n\n// here we get all the children of a given set\nconst childTree = await sp.termStore.groups.getById(\"338666a8-1111-2222-3333-f72471314e72\").sets.getById(\"338666a8-1111-2222-3333-f72471314e72\").getAllChildrenAsOrderedTree();\n\n// here we show caching the results using the PnPClientStorage class, there are many caching libraries and options available\nconst store = new PnPClientStorage();\n\n// our tree likely doesn't change much in 30 minutes for most applications\n// adjust to be longer or shorter as needed\nconst cachedTree = await store.local.getOrPut(\"myKey\", () =&gt; {\n    return sp.termStore.groups.getById(\"338666a8-1111-2222-3333-f72471314e72\").sets.getById(\"338666a8-1111-2222-3333-f72471314e72\").getAllChildrenAsOrderedTree();\n}, dateAdd(new Date(), \"minute\", 30));\n\n// you can also get all the properties and localProperties\nconst set = sp.termStore.groups.getById(\"338666a8-1111-2222-3333-f72471314e72\").sets.getById(\"338666a8-1111-2222-3333-f72471314e72\");\nconst childTree = await set.getAllChildrenAsOrderedTree({ retrieveProperties: true });\n</code></pre>"},{"location":"sp/taxonomy/#termset","title":"TermSet","text":"<p>Access term set information</p>"},{"location":"sp/taxonomy/#update_1","title":"Update","text":"<p>Added in 3.10.0</p> <pre><code>import { spfi, SPFxToken, SPFx } from \"@pnp/sp\";\nimport \"@pnp/sp/taxonomy\";\nimport { ITermGroupInfo } from \"@pnp/sp/taxonomy\";\n\n// NOTE: Because this endpoint requires a token and does not work with cookie auth you must create an instance of SPFI that includes an auth token.\n// We've included a new behavior to support getting a token for sharepoint called `SPFxToken`\nconst sp = spfi().using(SPFx(context), SPFxToken(context));\n\nconst termSetInfo = await sp.termStore.sets.getById(\"338666a8-1111-2222-3333-f72471314e72\").update({\n  properties: [{\n    key: \"MyKey2\",\n    value: \"MyValue2\",\n  }],\n});\n\nconst termSetInfo2 = await sp.termStore.groups.getById(\"338666a8-1111-2222-3333-f72471314e72\").sets.getById(\"338666a8-1111-2222-3333-f72471314e72\").update({\n  properties: [{\n    key: \"MyKey3\",\n    value: \"MyValue3\",\n  }],\n});\n</code></pre>"},{"location":"sp/taxonomy/#delete_1","title":"Delete","text":"<p>Added in 3.10.0</p> <pre><code>import { spfi, SPFxToken, SPFx } from \"@pnp/sp\";\nimport \"@pnp/sp/taxonomy\";\nimport { ITermGroupInfo } from \"@pnp/sp/taxonomy\";\n\n// NOTE: Because this endpoint requires a token and does not work with cookie auth you must create an instance of SPFI that includes an auth token.\n// We've included a new behavior to support getting a token for sharepoint called `SPFxToken`\nconst sp = spfi().using(SPFx(context), SPFxToken(context));\n\nawait sp.termStore.sets.getById(\"338666a8-1111-2222-3333-f72471314e72\").delete();\n\nawait sp.termStore.groups.getById(\"338666a8-1111-2222-3333-f72471314e72\").sets.getById(\"338666a8-1111-2222-3333-f72471314e72\").delete();\n</code></pre>"},{"location":"sp/taxonomy/#terms","title":"Terms","text":"<p>Access term set information</p>"},{"location":"sp/taxonomy/#list_2","title":"List","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/taxonomy\";\nimport { ITermInfo } from \"@pnp/sp/taxonomy\";\n\nconst sp = spfi(...);\n\n// list all the terms that are direct children of this set\nconst infos: ITermInfo[] = await sp.termStore.groups.getById(\"338666a8-1111-2222-3333-f72471314e72\").sets.getById(\"338666a8-1111-2222-3333-f72471314e72\").children();\n</code></pre>"},{"location":"sp/taxonomy/#list-terms","title":"List (terms)","text":"<p>You can use the terms property to get a flat list of all terms in the set. These terms do not contain parent/child relationship information.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/taxonomy\";\nimport { ITermInfo } from \"@pnp/sp/taxonomy\";\n\nconst sp = spfi(...);\n\n// list all the terms available in this term set by group id then by term set id\nconst infos: ITermInfo[] = await sp.termStore.groups.getById(\"338666a8-1111-2222-3333-f72471314e72\").sets.getById(\"338666a8-1111-2222-3333-f72471314e72\").terms();\n\n// list all the terms available in this term set by term set id\nconst infosByTermSetId: ITermInfo[] = await sp.termStore.sets.getById(\"338666a8-1111-2222-3333-f72471314e72\").terms();\n</code></pre>"},{"location":"sp/taxonomy/#get-by-id_2","title":"Get By Id","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/taxonomy\";\nimport { ITermInfo } from \"@pnp/sp/taxonomy\";\n\nconst sp = spfi(...);\n\n// get term set data\nconst info: ITermInfo = await sp.termStore.groups.getById(\"338666a8-1111-2222-3333-f72471314e72\").sets.getById(\"338666a8-1111-2222-3333-f72471314e72\").getTermById(\"338666a8-1111-2222-3333-f72471314e72\")();\n</code></pre>"},{"location":"sp/taxonomy/#add_2","title":"Add","text":"<p>Added in 3.10.0</p> <pre><code>import { spfi, SPFxToken, SPFx } from \"@pnp/sp\";\nimport \"@pnp/sp/taxonomy\";\nimport { ITermInfo } from \"@pnp/sp/taxonomy\";\n\n// NOTE: Because this endpoint requires a token and does not work with cookie auth you must create an instance of SPFI that includes an auth token.\n// We've included a new behavior to support getting a token for sharepoint called `SPFxToken`\nconst sp = spfi().using(SPFx(context), SPFxToken(context));\n\nconst newTermInfo = await sp.termStore.groups.getById(\"338666a8-1111-2222-3333-f72471314e72\").sets.getById(\"338666a8-1111-2222-3333-f72471314e72\").children.add({\n  labels: [\n    {\n      isDefault: true,\n      languageTag: \"en-us\",\n      name: \"New Term\",\n    }\n  ]\n});\n\nconst newTermInfo = await sp.termStore.groups.getById(\"338666a8-1111-2222-3333-f72471314e72\").sets.getById(\"338666a8-1111-2222-3333-f72471314e72\").children.add({\n  labels: [\n    {\n      isDefault: true,\n      languageTag: \"en-us\",\n      name: \"New Term 2\",\n    }\n  ]\n});\n</code></pre>"},{"location":"sp/taxonomy/#term","title":"Term","text":""},{"location":"sp/taxonomy/#update_2","title":"Update","text":"<p>Note that when updating a Term if you update the <code>properties</code> it replaces the collection, so a merge of existing + new needs to be handled by your application.</p> <p>Added in 3.10.0</p> <pre><code>import { spfi, SPFxToken, SPFx } from \"@pnp/sp\";\nimport \"@pnp/sp/taxonomy\";\n\n// NOTE: Because this endpoint requires a token and does not work with cookie auth you must create an instance of SPFI that includes an auth token.\n// We've included a new behavior to support getting a token for sharepoint called `SPFxToken`\nconst sp = spfi().using(SPFx(context), SPFxToken(context));\n\nconst termInfo = await sp.termStore.sets.getById(\"338666a8-1111-2222-3333-f72471314e72\").getTermById(\"338666a8-1111-2222-3333-f72471314e72\").update({\n  properties: [{\n    key: \"something\",\n    value: \"a value 2\",\n  }],\n});\n\nconst termInfo2 = await sp.termStore.groups.getById(\"338666a8-1111-2222-3333-f72471314e72\").sets.getById(\"338666a8-1111-2222-3333-f72471314e72\").getTermById(\"338666a8-1111-2222-3333-f72471314e72\").update({\n  properties: [{\n    key: \"something\",\n    value: \"a value\",\n  }],\n});\n</code></pre>"},{"location":"sp/taxonomy/#delete_2","title":"Delete","text":"<p>Added in 3.10.0</p> <pre><code>import { spfi, SPFxToken, SPFx } from \"@pnp/sp\";\nimport \"@pnp/sp/taxonomy\";\n\n// NOTE: Because this endpoint requires a token and does not work with cookie auth you must create an instance of SPFI that includes an auth token.\n// We've included a new behavior to support getting a token for sharepoint called `SPFxToken`\nconst sp = spfi().using(SPFx(context), SPFxToken(context));\n\nconst termInfo = await sp.termStore.sets.getById(\"338666a8-1111-2222-3333-f72471314e72\").getTermById(\"338666a8-1111-2222-3333-f72471314e72\").delete();\n\nconst termInfo2 = await sp.termStore.groups.getById(\"338666a8-1111-2222-3333-f72471314e72\").sets.getById(\"338666a8-1111-2222-3333-f72471314e72\").getTermById(\"338666a8-1111-2222-3333-f72471314e72\").delete();\n</code></pre>"},{"location":"sp/taxonomy/#get-term-parent","title":"Get Term Parent","text":"<p>Behavior Change in 2.1.0</p> <p>The server API changed again, resulting in the removal of the \"parent\" property from ITerm as it is not longer supported as a path property. You now must use \"expand\" to load a term's parent information. The side affect of this is that the parent is no longer chainable, meaning you need to load a new term instance to work with the parent term. An approach for this is shown below.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/taxonomy\";\n\nconst sp = spfi(...);\n\n// get a ref to the set\nconst set = sp.termStore.groups.getById(\"338666a8-1111-2222-3333-f72471314e72\").sets.getById(\"338666a8-1111-2222-3333-f72471314e72\");\n\n// get a term's information and expand parent to get the parent info as well\nconst w = await set.getTermById(\"338666a8-1111-2222-3333-f72471314e72\").expand(\"parent\")();\n\n// get a ref to the parent term\nconst parent = set.getTermById(w.parent.id);\n\n// make a request for the parent term's info - this data currently match the results in the expand call above, but this\n// is to demonstrate how to gain a ref to the parent and select its data\nconst parentInfo = await parent.select(\"Id\", \"Descriptions\")();\n</code></pre>"},{"location":"sp/tenant-properties/","title":"@pnp/sp/web - tenant properties","text":"<p>You can set, read, and remove tenant properties using the methods shown below:</p>"},{"location":"sp/tenant-properties/#setstorageentity","title":"setStorageEntity","text":"<p>This method MUST be called in the context of the app catalog web or you will get an access denied message.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/appcatalog\";\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi(...);\n\nconst w = await sp.getTenantAppCatalogWeb();\n\n// specify required key and value\nawait w.setStorageEntity(\"Test1\", \"Value 1\");\n\n// specify optional description and comments\nawait w.setStorageEntity(\"Test2\", \"Value 2\", \"description\", \"comments\");\n</code></pre>"},{"location":"sp/tenant-properties/#getstorageentity","title":"getStorageEntity","text":"<p>This method can be used from any web to retrieve values previously set.</p> <pre><code>import { spfi, SPFx } from \"@pnp/sp\";\nimport \"@pnp/sp/appcatalog\";\nimport \"@pnp/sp/webs\";\nimport { IStorageEntity } from \"@pnp/sp/webs\"; \n\nconst sp = spfi(...);\n\nconst prop: IStorageEntity = await sp.web.getStorageEntity(\"Test1\");\n\nconsole.log(prop.Value);\n</code></pre>"},{"location":"sp/tenant-properties/#removestorageentity","title":"removeStorageEntity","text":"<p>This method MUST be called in the context of the app catalog web or you will get an access denied message.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/appcatalog\";\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi(...);\n\nconst w = await sp.getTenantAppCatalogWeb();\n\nawait w.removeStorageEntity(\"Test1\");\n</code></pre>"},{"location":"sp/user-custom-actions/","title":"@pnp/sp/user-custom-actions","text":"<p>Represents a custom action associated with a SharePoint list, web or site collection.</p>"},{"location":"sp/user-custom-actions/#iusercustomactions","title":"IUserCustomActions","text":""},{"location":"sp/user-custom-actions/#get-a-collection-of-user-custom-actions-from-a-web","title":"Get a collection of User Custom Actions from a web","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/user-custom-actions\";\n\nconst sp = spfi(...);\n\nconst userCustomActions = sp.web.userCustomActions();\n</code></pre>"},{"location":"sp/user-custom-actions/#add-a-new-user-custom-action","title":"Add a new User Custom Action","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/user-custom-actions\";\nimport { IUserCustomActionAddResult } from '@pnp/sp/user-custom-actions';\n\nconst sp = spfi(...);\n\nconst newValues: TypedHash&lt;string&gt; = {\n    \"Title\": \"New Title\",\n    \"Description\": \"New Description\",\n    \"Location\": \"ScriptLink\",\n    \"ScriptSrc\": \"https://...\"\n};\n\nconst response : IUserCustomActionAddResult = await sp.web.userCustomActions.add(newValues);\n</code></pre>"},{"location":"sp/user-custom-actions/#get-a-user-custom-action-by-id","title":"Get a User Custom Action by ID","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/user-custom-actions\";\n\nconst sp = spfi(...);\n\nconst uca: IUserCustomAction = sp.web.userCustomActions.getById(\"00000000-0000-0000-0000-000000000000\");\n\nconst ucaData = await uca();\n</code></pre>"},{"location":"sp/user-custom-actions/#clear-the-user-custom-action-collection","title":"Clear the User Custom Action collection","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/user-custom-actions\";\n\nconst sp = spfi(...);\n\n// Site collection level\nawait sp.site.userCustomActions.clear();\n\n// Site (web) level\nawait sp.web.userCustomActions.clear();\n\n// List level\nawait sp.web.lists.getByTitle(\"Documents\").userCustomActions.clear();\n</code></pre>"},{"location":"sp/user-custom-actions/#iusercustomaction","title":"IUserCustomAction","text":""},{"location":"sp/user-custom-actions/#update-an-existing-user-custom-action","title":"Update an existing User Custom Action","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/user-custom-actions\";\nimport { IUserCustomActionUpdateResult } from '@pnp/sp/user-custom-actions';\n\nconst sp = spfi(...);\n\nconst uca = sp.web.userCustomActions.getById(\"00000000-0000-0000-0000-000000000000\");\n\nconst newValues: TypedHash&lt;string&gt; = {\n    \"Title\": \"New Title\",\n    \"Description\": \"New Description\",\n    \"ScriptSrc\": \"https://...\"\n};\n\nconst response: IUserCustomActionUpdateResult = uca.update(newValues);\n</code></pre>"},{"location":"sp/views/","title":"@pnp/sp/views","text":"<p>Views define the columns, ordering, and other details we see when we look at a list. You can have multiple views for a list, including private views - and one default view.</p>"},{"location":"sp/views/#iviews","title":"IViews","text":""},{"location":"sp/views/#get-views-in-a-list","title":"Get views in a list","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/views\";\n\nconst sp = spfi(...);\n\nconst list = sp.web.lists.getByTitle(\"My List\");\n\n// get all the views and their properties\nconst views1 = await list.views();\n\n// you can use odata select operations to get just a set a fields\nconst views2 = await list.views.select(\"Id\", \"Title\")();\n\n// get the top three views\nconst views3 = await list.views.top(3)();\n</code></pre>"},{"location":"sp/views/#add-a-view","title":"Add a View","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/views\";\n\nconst sp = spfi(...);\n\nconst list = sp.web.lists.getByTitle(\"My List\");\n\n// create a new view with default fields and properties\nconst result = await list.views.add(\"My New View\");\n\n// create a new view with specific properties\nconst result2 = await list.views.add(\"My New View 2\", false, {\n    RowLimit: 10,\n    ViewQuery: \"&lt;OrderBy&gt;&lt;FieldRef Name='Modified' Ascending='False' /&gt;&lt;/OrderBy&gt;\",\n});\n\n// manipulate the view's fields\nawait result2.view.fields.removeAll();\n\nawait Promise.all([\n    result2.view.fields.add(\"Title\"),\n    result2.view.fields.add(\"Modified\"),\n]);\n</code></pre>"},{"location":"sp/views/#iview","title":"IView","text":""},{"location":"sp/views/#get-a-views-information","title":"Get a View's Information","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/views\";\n\nconst sp = spfi(...);\n\nconst list = sp.web.lists.getByTitle(\"My List\");\n\nconst result = await list.views.getById(\"{GUID view id}\")();\n\nconst result2 = await list.views.getByTitle(\"My View\")();\n\nconst result3 = await list.views.getByTitle(\"My View\").select(\"Id\", \"Title\")();\n\nconst result4 = await list.defaultView();\n\nconst result5 = await list.getView(\"{GUID view id}\")();\n</code></pre>"},{"location":"sp/views/#fields","title":"fields","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/views\";\n\nconst sp = spfi(...);\n\nconst list = sp.web.lists.getByTitle(\"My List\");\n\nconst result = await list.views.getById(\"{GUID view id}\").fields();\n</code></pre>"},{"location":"sp/views/#update","title":"update","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/views\";\n\nconst sp = spfi(...);\n\nconst list = sp.web.lists.getByTitle(\"My List\");\n\nconst result = await list.views.getById(\"{GUID view id}\").update({\n    RowLimit: 20,\n});\n</code></pre>"},{"location":"sp/views/#renderashtml","title":"renderAsHtml","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/views\";\n\nconst sp = spfi(...);\n\nconst result = await sp.web.lists.getByTitle(\"My List\").views.getById(\"{GUID view id}\").renderAsHtml();\n</code></pre>"},{"location":"sp/views/#setviewxml","title":"setViewXml","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/views\";\n\nconst sp = spfi(...);\n\nconst viewXml = \"...\";\n\nawait sp.web.lists.getByTitle(\"My List\").views.getById(\"{GUID view id}\").setViewXml(viewXml);\n</code></pre>"},{"location":"sp/views/#delete","title":"delete","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/views\";\n\nconst sp = spfi(...);\n\nconst viewXml = \"...\";\n\nawait sp.web.lists.getByTitle(\"My List\").views.getById(\"{GUID view id}\").delete();\n</code></pre>"},{"location":"sp/views/#viewfields","title":"ViewFields","text":""},{"location":"sp/views/#getschemaxml","title":"getSchemaXml","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/views\";\n\nconst sp = spfi(...);\n\nconst xml = await sp.web.lists.getByTitle(\"My List\").defaultView.fields.getSchemaXml();\n</code></pre>"},{"location":"sp/views/#add","title":"add","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/views\";\n\nconst sp = spfi(...);\n\nawait sp.web.lists.getByTitle(\"My List\").defaultView.fields.add(\"Created\");\n</code></pre>"},{"location":"sp/views/#move","title":"move","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/views\";\n\nconst sp = spfi(...);\n\nawait sp.web.lists.getByTitle(\"My List\").defaultView.fields.move(\"Created\", 0);\n</code></pre>"},{"location":"sp/views/#remove","title":"remove","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/views\";\n\nconst sp = spfi(...);\n\nawait sp.web.lists.getByTitle(\"My List\").defaultView.fields.remove(\"Created\");\n</code></pre>"},{"location":"sp/views/#removeall","title":"removeAll","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/views\";\n\nconst sp = spfi(...);\n\nawait sp.web.lists.getByTitle(\"My List\").defaultView.fields.removeAll();\n</code></pre>"},{"location":"sp/webs/","title":"@pnp/sp/webs","text":"<p>Webs are one of the fundamental entry points when working with SharePoint. Webs serve as a container for lists, features, sub-webs, and all of the entity types.</p>"},{"location":"sp/webs/#iwebs","title":"IWebs","text":""},{"location":"sp/webs/#add-web","title":"Add Web","text":"<p>Using the library you can add a web to another web's collection of subwebs. The simplest usage requires only a title and url. This will result in a team site with all of the default settings. You can also provide other settings such as description, template, language, and inherit permissions.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { IWebAddResult } from \"@pnp/sp/webs\";\n\nconst sp = spfi(...);\n\nconst result = await sp.web.webs.add(\"title\", \"subweb1\");\n\n// show the response from the server when adding the web\nconsole.log(result.data);\n\n// we can immediately operate on the new web\nresult.web.select(\"Title\")().then((w: IWebInfo)  =&gt; {\n\n    // show our title\n    console.log(w.Title);\n});\n</code></pre> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { IWebAddResult } from \"@pnp/sp/webs\";\n\nconst sp = spfi(...);\n\n// create a German language wiki site with title, url, description, which does not inherit permissions\nsp.web.webs.add(\"wiki\", \"subweb2\", \"a wiki web\", \"WIKI#0\", 1031, false).then((w: IWebAddResult) =&gt; {\n\n  // ...\n});\n</code></pre>"},{"location":"sp/webs/#iweb","title":"IWeb","text":""},{"location":"sp/webs/#access-a-web","title":"Access a Web","text":"<p>There are several ways to access a web instance, each of these methods is equivalent in that you will have an IWeb instance to work with. All of the examples below use a variable named \"web\" which represents an IWeb instance - regardless of how it was initially accessed.</p> <p>Access the web from the imported \"spfi\" object using selective import:</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi(...);\n\nconst r = await sp.web();\n</code></pre> <p>Access the web from the imported \"spfi\" object using the 'all' preset</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/presets/all\";\n\nconst sp = spfi(...);\n\nconst r = await sp.web();\n</code></pre> <p>Access the web using any SPQueryable as a base</p> <p>In this scenario you might be deep in your code without access to the original start of the fluid chain (i.e. the instance produced from spfi). You can pass any queryable to the Web or Site factory and get back a valid IWeb instance. In this case all of the observers registered to the supplied instance will be referenced by the IWeb, and the url will be rebased to ensure a valid path.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/items\";\n\nconst sp = spfi(...);\n\n// we have a ref to the IItems instance\nconst items = await sp.web.lists.getByTitle(\"Generic\").items;\n\n// we create a new IWeb instance using the items as a base\nconst web = Web(items);\n\n// gets the web info\nconst webInfo = await web();\n\n// get a reference to a different list\nconst list = web.lists.getByTitle(\"DifferentList\");\n</code></pre> <p>Access a web using the Web factory method</p> <p>There are several ways to use the <code>Web</code> factory directly and have some special considerations unique to creating <code>IWeb</code> instances from <code>Web</code>. The easiest is to supply the absolute URL of the web you wish to target, as seen in the first example below. When supplying a path parameter to <code>Web</code> you need to include the <code>_api/web</code> part in the appropriate location as the library can't from strings determine how to append the path. Example 2 below shows a wrong usage of the Web factory as we cannot determine how the path part should be appended. Examples 3 and 4 show how to include the <code>_api/web</code> part for both subwebs or queries within the given web.</p> <p>When in doubt, supply the absolute url to the web as the first parameter as shown in example 1 below</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { Web } from \"@pnp/sp/webs\";\n\n// creates a web:\n// - whose root is \"https://tenant.sharepoint.com/sites/myweb\"\n// - whose request path is \"https://tenant.sharepoint.com/sites/myweb/_api/web\"\n// - has no registered observers\nconst web1 = Web(\"https://tenant.sharepoint.com/sites/myweb\");\n\n// creates a web that will not work due to missing the _api/web portion\n// this is because we don't know that the extra path should come before/after the _api/web portion\n// - whose root is \"https://tenant.sharepoint.com/sites/myweb/some sub path\"\n// - whose request path is \"https://tenant.sharepoint.com/sites/myweb/some sub path\"\n// - has no registered observers\nconst web2-WRONG = Web(\"https://tenant.sharepoint.com/sites/myweb\", \"some sub path\");\n\n// creates a web:\n// - whose root is \"https://tenant.sharepoint.com/sites/myweb/some sub path\"\n// - whose request path is \"https://tenant.sharepoint.com/sites/myweb/some sub web/_api/web\"\n// including the _api/web ensures the path you are providing is correct and can be parsed by the library\n// - has no registered observers\nconst web3 = Web(\"https://tenant.sharepoint.com/sites/myweb\", \"some sub web/_api/web\");\n\n// creates a web that actually points to the lists endpoint:\n// - whose root is \"https://tenant.sharepoint.com/sites/myweb/\"\n// - whose request path is \"https://tenant.sharepoint.com/sites/myweb/_api/web/lists\"\n// including the _api/web ensures the path you are providing is correct and can be parsed by the library\n// - has no registered observers\nconst web4 = Web(\"https://tenant.sharepoint.com/sites/myweb\", \"_api/web/lists\");\n</code></pre> <p>The above examples show you how to use the constructor to create the base url for the <code>Web</code> although none of them are usable as is until you add observers. You can do so by either adding them explicitly with a using...</p> <pre><code>import { spfi, SPFx } from \"@pnp/sp\";\nimport { Web } from \"@pnp/sp/webs\";\n\nconst web1 = Web(\"https://tenant.sharepoint.com/sites/myweb\").using(SPFx(this.context));\n</code></pre> <p>or by copying them from another SPQueryable instance...</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { Web } from \"@pnp/sp/webs\";\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi(...);\n//sp.web is of type SPQueryable; using tuple pattern pass SPQueryable and the web's url\nconst web = Web([sp.web, \"https://tenant.sharepoint.com/sites/otherweb\"]);\n</code></pre>"},{"location":"sp/webs/#webs","title":"webs","text":"<p>Access the child webs collection of this web</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi(...);\n\nconst web = sp.web;\nconst webs = await web.webs();\n</code></pre>"},{"location":"sp/webs/#get-a-webs-properties","title":"Get A Web's properties","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi(...);\n\n// basic get of the webs properties\nconst props = await sp.web();\n\n// use odata operators to get specific fields\nconst props2 = await sp.web.select(\"Title\")();\n\n// type the result to match what you are requesting\nconst props3 = await sp.web.select(\"Title\")&lt;{ Title: string }&gt;();\n</code></pre>"},{"location":"sp/webs/#getparentweb","title":"getParentWeb","text":"<p>Get the data and IWeb instance for the parent web for the given web instance</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi(...);\nconst web = web.getParentWeb();\n</code></pre>"},{"location":"sp/webs/#getsubwebsfilteredforcurrentuser","title":"getSubwebsFilteredForCurrentUser","text":"<p>Returns a collection of objects that contain metadata about subsites of the current site in which the current user is a member.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi(...);\n\nconst web = sp.web;\nconst subWebs = web.getSubwebsFilteredForCurrentUser()();\n\n// apply odata operations to the collection\nconst subWebs2 = await sp.web.getSubwebsFilteredForCurrentUser().select(\"Title\", \"Language\").orderBy(\"Created\", true)();\n</code></pre> <p>Note: getSubwebsFilteredForCurrentUser returns IWebInfosData which is a subset of all the available fields on IWebInfo.</p>"},{"location":"sp/webs/#allproperties","title":"allProperties","text":"<p>Allows access to the web's all properties collection. This is readonly in REST.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi(...);\n\nconst web = sp.web;\nconst props = await web.allProperties();\n\n// select certain props\nconst props2 = await web.allProperties.select(\"prop1\", \"prop2\")();\n</code></pre>"},{"location":"sp/webs/#webinfos","title":"webinfos","text":"<p>Gets a collection of WebInfos for this web's subwebs</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi(...);\nconst web = sp.web;\n\nconst infos = await web.webinfos();\n\n// or select certain fields\nconst infos2 = await web.webinfos.select(\"Title\", \"Description\")();\n\n// or filter\nconst infos3 = await web.webinfos.filter(\"Title eq 'MyWebTitle'\")();\n\n// or both\nconst infos4 = await web.webinfos.select(\"Title\", \"Description\").filter(\"Title eq 'MyWebTitle'\")();\n\n// get the top 4 ordered by Title\nconst infos5 = await web.webinfos.top(4).orderBy(\"Title\")();\n</code></pre> <p>Note: webinfos returns IWebInfosData which is a subset of all the available fields on IWebInfo.</p>"},{"location":"sp/webs/#update","title":"update","text":"<p>Updates this web instance with the supplied properties</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi(...);\nconst web = sp.web;\n// update the web's title and description\nconst result = await web.update({\n    Title: \"New Title\",\n    Description: \"My new description\",\n});\n\n// a project implementation could wrap the update to provide type information for your expected fields:\n\ninterface IWebUpdateProps {\n    Title: string;\n    Description: string;\n}\n\nfunction updateWeb(props: IWebUpdateProps): Promise&lt;void&gt; {\n    web.update(props);\n}\n</code></pre>"},{"location":"sp/webs/#delete-a-web","title":"Delete a Web","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi(...);\nconst web = sp.web;\n\nawait web.delete();\n</code></pre>"},{"location":"sp/webs/#applytheme","title":"applyTheme","text":"<p>Applies the theme specified by the contents of each of the files specified in the arguments to the site</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport { combine } from \"@pnp/core\";\n\nconst sp = spfi(\"https://{tenant}.sharepoint.com/sites/dev/subweb\").using(SPFx(this.context));\nconst web = sp.web;\n\n// the urls to the color and font need to both be from the catalog at the root\n// these urls can be constants or calculated from existing urls\nconst colorUrl =  combine(\"/\", \"sites/dev\", \"_catalogs/theme/15/palette011.spcolor\");\n// this gives us the same result\nconst fontUrl = \"/sites/dev/_catalogs/theme/15/fontscheme007.spfont\";\n\n// apply the font and color, no background image, and don't share this theme\nawait web.applyTheme(colorUrl, fontUrl, \"\", false);\n</code></pre>"},{"location":"sp/webs/#applywebtemplate-availablewebtemplates","title":"applyWebTemplate &amp; availableWebTemplates","text":"<p>Applies the specified site definition or site template to the Web site that has no template applied to it. This is seldom used outside provisioning scenarios.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi(...);\nconst web = sp.web;\nconst templates = (await web.availableWebTemplates().select(\"Name\")&lt;{ Name: string }[]&gt;()).filter(t =&gt; /ENTERWIKI#0/i.test(t.Name));\n\n// apply the wiki template\nconst template = templates.length &gt; 0 ? templates[0].Name : \"STS#0\";\n\nawait web.applyWebTemplate(template);\n</code></pre>"},{"location":"sp/webs/#getchanges","title":"getChanges","text":"<p>Returns the collection of changes from the change log that have occurred within the web, based on the specified query.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\n\nconst sp = spfi(...);\nconst web = sp.web;\n// get the web changes including add, update, and delete\nconst changes = await web.getChanges({\n        Add: true,\n        ChangeTokenEnd: undefined,\n        ChangeTokenStart: undefined,\n        DeleteObject: true,\n        Update: true,\n        Web: true,\n    });\n</code></pre>"},{"location":"sp/webs/#maptoicon","title":"mapToIcon","text":"<p>Returns the name of the image file for the icon that is used to represent the specified file</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport { combine } from \"@pnp/core\";\n\nconst iconFileName = await web.mapToIcon(\"test.docx\");\n// iconPath === \"icdocx.png\"\n// which you can need to map to a real url\nconst iconFullPath = `https://{tenant}.sharepoint.com/sites/dev/_layouts/images/${iconFileName}`;\n\n// OR dynamically\nconst sp = spfi(...);\nconst webData = await sp.web.select(\"Url\")();\nconst iconFullPath2 = combine(webData.Url, \"_layouts\", \"images\", iconFileName);\n\n// OR within SPFx using the context\nconst iconFullPath3 = combine(this.context.pageContext.web.absoluteUrl, \"_layouts\", \"images\", iconFileName);\n\n// You can also set size\n// 16x16 pixels = 0, 32x32 pixels = 1\nconst icon32FileName = await web.mapToIcon(\"test.docx\", 1);\n</code></pre>"},{"location":"sp/webs/#storage-entities","title":"storage entities","text":"<pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/appcatalog\";\nimport { IStorageEntity } from \"@pnp/sp/webs\";\n\n// needs to be unique, GUIDs are great\nconst key = \"my-storage-key\";\n\nconst sp = spfi(...);\n\n// read an existing entity\nconst entity: IStorageEntity = await sp.web.getStorageEntity(key);\n\n// setStorageEntity and removeStorageEntity must be called in the context of the tenant app catalog site\n// you can get the tenant app catalog using the getTenantAppCatalogWeb\nconst tenantAppCatalogWeb = await sp.getTenantAppCatalogWeb();\n\ntenantAppCatalogWeb.setStorageEntity(key, \"new value\");\n\n// set other properties\ntenantAppCatalogWeb.setStorageEntity(key, \"another value\", \"description\", \"comments\");\n\nconst entity2: IStorageEntity = await sp.web.getStorageEntity(key);\n/*\nentity2 === {\n    Value: \"another value\",\n    Comment: \"comments\";\n    Description: \"description\",\n};\n*/\n\n// you can also remove a storage entity\nawait tenantAppCatalogWeb.removeStorageEntity(key);\n</code></pre>"},{"location":"sp/webs/#getappcatalog","title":"getAppCatalog","text":"<p>Returns this web as an IAppCatalog instance or creates a new IAppCatalog instance from the provided url.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport { IApp } from \"@pnp/sp/appcatalog\";\n\nconst sp = spfi(...);\n\nconst appWeb = sp.web.appcatalog;\nconst app: IApp = appWeb.getAppById(\"{your app id}\");\n// appWeb url === web url\n</code></pre>"},{"location":"sp/webs/#client-side-pages","title":"client-side-pages","text":"<p>You can create and load clientside page instances directly from a web. More details on working with clientside pages are available in the dedicated article.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/clientside-pages/web\";\n\nconst sp = spfi(...);\n\n// simplest add a page example\nconst page = await sp.web.addClientsidePage(\"mypage1\");\n\n// simplest load a page example\nconst page = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/mypage3.aspx\");\n</code></pre>"},{"location":"sp/webs/#contenttypes","title":"contentTypes","text":"<p>Allows access to the collection of content types in this web.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/content-types/web\";\n\nconst sp = spfi(...);\n\nconst cts = await sp.web.contentTypes();\n\n// you can also select fields and use other odata operators\nconst cts2 = await sp.web.contentTypes.select(\"Name\")();\n</code></pre>"},{"location":"sp/webs/#features","title":"features","text":"<p>Allows access to the collection of content types in this web.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/features/web\";\n\nconst sp = spfi(...);\n\nconst features = await sp.web.features();\n</code></pre>"},{"location":"sp/webs/#fields","title":"fields","text":"<p>Allows access to the collection of fields in this web.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/fields/web\";\n\nconst sp = spfi(...);\nconst fields = await sp.web.fields();\n</code></pre>"},{"location":"sp/webs/#getfilebyserverrelativepath","title":"getFileByServerRelativePath","text":"<p>Gets a file by server relative url if your file name contains # and % characters</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/files/web\";\nimport { IFile } from \"@pnp/sp/files/types\";\n\nconst sp = spfi(...);\nconst file: IFile = web.getFileByServerRelativePath(\"/sites/dev/library/my # file%.docx\");\n</code></pre>"},{"location":"sp/webs/#folders","title":"folders","text":"<p>Gets the collection of folders in this web</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/folders/web\";\n\nconst sp = spfi(...);\n\nconst folders = await sp.web.folders();\n\n// you can also filter and select as with any collection\nconst folders2 = await sp.web.folders.select(\"ServerRelativeUrl\", \"TimeLastModified\").filter(\"ItemCount gt 0\")();\n\n// or get the most recently modified folder\nconst folders2 = await sp.web.folders.orderBy(\"TimeLastModified\").top(1)();\n</code></pre>"},{"location":"sp/webs/#rootfolder","title":"rootFolder","text":"<p>Gets the root folder of the web</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/folders/web\";\n\nconst sp = spfi(...);\n\nconst folder = await sp.web.rootFolder();\n</code></pre>"},{"location":"sp/webs/#getfolderbyserverrelativepath","title":"getFolderByServerRelativePath","text":"<p>Gets a folder by server relative url if your folder name contains # and % characters</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/folders/web\";\nimport { IFolder } from \"@pnp/sp/folders\";\n\nconst sp = spfi(...);\n\nconst folder: IFolder = web.getFolderByServerRelativePath(\"/sites/dev/library/my # folder%/\");\n</code></pre>"},{"location":"sp/webs/#hubsitedata","title":"hubSiteData","text":"<p>Gets hub site data for the current web</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/hubsites/web\";\n\nconst sp = spfi(...);\n// get the data and force a refresh\nconst data = await sp.web.hubSiteData(true);\n</code></pre>"},{"location":"sp/webs/#synchubsitetheme","title":"syncHubSiteTheme","text":"<p>Applies theme updates from the parent hub site collection</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/hubsites/web\";\n\nconst sp = spfi(...);\nawait sp.web.syncHubSiteTheme();\n</code></pre>"},{"location":"sp/webs/#lists","title":"lists","text":"<p>Gets the collection of all lists that are contained in the Web site</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists/web\";\nimport { ILists } from \"@pnp/sp/lists\";\n\nconst sp = spfi(...);\nconst lists: ILists = sp.web.lists;\n\n// you can always order the lists and select properties\nconst data = await lists.select(\"Title\").orderBy(\"Title\")();\n\n// and use other odata operators as well\nconst data2 = await sp.web.lists.top(3).orderBy(\"LastItemModifiedDate\")();\n</code></pre>"},{"location":"sp/webs/#siteuserinfolist","title":"siteUserInfoList","text":"<p>Gets the UserInfo list of the site collection that contains the Web site</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists/web\";\nimport { IList } from \"@pnp/sp/lists\";\n\nconst sp = spfi(...);\nconst list: IList = sp.web.siteUserInfoList;\n\nconst data = await list();\n\n// or chain off that list to get additional details\nconst items = await list.items.top(2)();\n</code></pre>"},{"location":"sp/webs/#defaultdocumentlibrary","title":"defaultDocumentLibrary","text":"<p>Get a reference to the default document library of a web</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport { IList } from \"@pnp/sp/lists/web\";\n\nconst sp = spfi(...);\nconst list: IList = sp.web.defaultDocumentLibrary;\n</code></pre>"},{"location":"sp/webs/#customlisttemplates","title":"customListTemplates","text":"<p>Gets the collection of all list definitions and list templates that are available</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists/web\";\nimport { IList } from \"@pnp/sp/lists\";\n\nconst sp = spfi(...);\nconst templates = await sp.web.customListTemplates();\n\n// odata operators chain off the collection as expected\nconst templates2 = await sp.web.customListTemplates.select(\"Title\")();\n</code></pre>"},{"location":"sp/webs/#getlist","title":"getList","text":"<p>Gets a list by server relative url (list's root folder)</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport { IList } from \"@pnp/sp/lists/web\";\n\nconst sp = spfi(...);\nconst list: IList = sp.web.getList(\"/sites/dev/lists/test\");\n\nconst listData = await list();\n</code></pre>"},{"location":"sp/webs/#getcatalog","title":"getCatalog","text":"<p>Returns the list gallery on the site</p> Name Value WebTemplateCatalog 111 WebPartCatalog 113 ListTemplateCatalog 114 MasterPageCatalog 116 SolutionCatalog 121 ThemeCatalog 123 DesignCatalog 124 AppDataCatalog 125 <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport { IList } from \"@pnp/sp/lists\";\n\nconst sp = spfi(...);\nconst templateCatalog: IList = await sp.web.getCatalog(111);\n\nconst themeCatalog: IList = await sp.web.getCatalog(123);\n</code></pre>"},{"location":"sp/webs/#navigation","title":"navigation","text":"<p>Gets a navigation object that represents navigation on the Web site, including the Quick Launch area and the top navigation bar</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/navigation/web\";\nimport { INavigation } from \"@pnp/sp/navigation\";\n\nconst sp = spfi(...);\nconst nav: INavigation = sp.web.navigation;\n</code></pre> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/navigation/web\";\nimport { IRegionalSettings } from \"@pnp/sp/navigation\";\n\nconst sp = spfi(...);\nconst settings: IRegionalSettings = sp.web.regionalSettings;\n\nconst settingsData = await settings();\n</code></pre> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/related-items/web\";\nimport { IRelatedItemManager, IRelatedItem } from \"@pnp/sp/related-items\";\n\nconst sp = spfi(...);\nconst manager: IRelatedItemManager = sp.web.relatedItems;\n\nconst data: IRelatedItem[] = await manager.getRelatedItems(\"{list name}\", 4);\n</code></pre>"},{"location":"sp/webs/#security-imports","title":"security imports","text":"<p>Please see information around the available security methods in the security article.</p>"},{"location":"sp/webs/#sharing-imports","title":"sharing imports","text":"<p>Please see information around the available sharing methods in the sharing article.</p>"},{"location":"sp/webs/#sitegroups","title":"siteGroups","text":"<p>The site groups</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/site-groups/web\";\n\nconst sp = spfi(...);\nconst groups = await sp.web.siteGroups();\n\nconst groups2 = await sp.web.siteGroups.top(2)();\n</code></pre>"},{"location":"sp/webs/#associatedownergroup","title":"associatedOwnerGroup","text":"<p>The web's owner group</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/site-groups/web\";\n\nconst sp = spfi(...);\n\nconst group = await sp.web.associatedOwnerGroup();\n\nconst users = await sp.web.associatedOwnerGroup.users();\n</code></pre>"},{"location":"sp/webs/#associatedmembergroup","title":"associatedMemberGroup","text":"<p>The web's member group</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/site-groups/web\";\n\nconst sp = spfi(...);\n\nconst group = await sp.web.associatedMemberGroup();\n\nconst users = await sp.web.associatedMemberGroup.users();\n</code></pre>"},{"location":"sp/webs/#associatedvisitorgroup","title":"associatedVisitorGroup","text":"<p>The web's visitor group</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/site-groups/web\";\n\nconst sp = spfi(...);\n\nconst group = await sp.web.associatedVisitorGroup();\n\nconst users = await sp.web.associatedVisitorGroup.users();\n</code></pre>"},{"location":"sp/webs/#createdefaultassociatedgroups","title":"createDefaultAssociatedGroups","text":"<p>Creates the default associated groups (Members, Owners, Visitors) and gives them the default permissions on the site. The target site must have unique permissions and no associated members / owners / visitors groups</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/site-groups/web\";\n\nconst sp = spfi(...);\n\nawait sp.web.createDefaultAssociatedGroups(\"Contoso\", \"{first owner login}\");\n\n// copy the role assignments\nawait sp.web.createDefaultAssociatedGroups(\"Contoso\", \"{first owner login}\", true);\n\n// don't clear sub assignments\nawait sp.web.createDefaultAssociatedGroups(\"Contoso\", \"{first owner login}\", false, false);\n\n// specify secondary owner, don't copy permissions, clear sub scopes\nawait sp.web.createDefaultAssociatedGroups(\"Contoso\", \"{first owner login}\", false, true, \"{second owner login}\");\n</code></pre>"},{"location":"sp/webs/#siteusers","title":"siteUsers","text":"<p>The site users</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/site-users/web\";\n\nconst sp = spfi(...);\n\nconst users = await sp.web.siteUsers();\n\nconst users2 = await sp.web.siteUsers.top(5)();\n\nconst users3 = await sp.web.siteUsers.filter(`startswith(LoginName, '${encodeURIComponent(\"i:0#.f|m\")}')`)();\n</code></pre>"},{"location":"sp/webs/#currentuser","title":"currentUser","text":"<p>Information on the current user</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/site-users/web\";\n\nconst sp = spfi(...);\n\nconst user = await sp.web.currentUser();\n\n// check the login name of the current user\nconst user2 = await sp.web.currentUser.select(\"LoginName\")();\n</code></pre>"},{"location":"sp/webs/#ensureuser","title":"ensureUser","text":"<p>Checks whether the specified login name belongs to a valid user in the web. If the user doesn't exist, adds the user to the web</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/site-users/web\";\nimport { IWebEnsureUserResult } from \"@pnp/sp/site-users/\";\n\nconst sp = spfi(...);\n\nconst result: IWebEnsureUserResult = await sp.web.ensureUser(\"i:0#.f|membership|user@domain.onmicrosoft.com\");\n</code></pre>"},{"location":"sp/webs/#getuserbyid","title":"getUserById","text":"<p>Returns the user corresponding to the specified member identifier for the current web</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/site-users/web\";\nimport { ISiteUser } from \"@pnp/sp/site-users/\";\n\nconst sp = spfi(...);\n\nconst user: ISiteUser = sp.web.getUserById(23);\n\nconst userData = await user();\n\nconst userData2 = await user.select(\"LoginName\")();\n</code></pre>"},{"location":"sp/webs/#usercustomactions","title":"userCustomActions","text":"<p>Gets a newly refreshed collection of the SPWeb's SPUserCustomActionCollection</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/user-custom-actions/web\";\nimport { IUserCustomActions } from \"@pnp/sp/user-custom-actions\";\n\nconst sp = spfi(...);\n\nconst actions: IUserCustomActions = sp.web.userCustomActions;\n\nconst actionsData = await actions();\n</code></pre>"},{"location":"sp/webs/#iwebinfosdata","title":"IWebInfosData","text":"<p>Some web operations return a subset of web information defined by the IWebInfosData interface, shown below. In those cases only these fields are available for select, orderby, and other odata operations.</p> <pre><code>interface IWebInfosData {\n    Configuration: number;\n    Created: string;\n    Description: string;\n    Id: string;\n    Language: number;\n    LastItemModifiedDate: string;\n    LastItemUserModifiedDate: string;\n    ServerRelativeUrl: string;\n    Title: string;\n    WebTemplate: string;\n    WebTemplateId: number;\n}\n</code></pre>"},{"location":"sp-admin/","title":"sp-admin","text":"<p>The <code>@pnp/sp-admin</code> library enables you to call the static SharePoint admin API's:</p> <ul> <li><code>_api/Microsoft.Online.SharePoint.TenantManagement.Office365Tenant</code></li> <li><code>_api/Microsoft.Online.SharePoint.TenantAdministration.SiteProperties</code></li> <li><code>_api/Microsoft.Online.SharePoint.TenantAdministration.Tenant</code></li> </ul> <p>These APIs typically require an elevated level of permissions and should not be relied upon in general user facing solutions. Before using this library please understand the impact of what you are doing as you are updating settings at the tenant level for all users. </p> <p>Warning</p> <p>These APIs are officially not documented which means there is no SLA provided by Microsoft. Furthermore, they can be updated without notification.</p>"},{"location":"sp-admin/#use","title":"Use","text":"<p>To use the library you first install the package:</p> <pre><code>npm install @pnp/sp-admin --save\n</code></pre> <p>Then import the package into your solution, it will attach a node to the sp fluent interface using selective imports.</p> <pre><code>import \"@pnp/sp-admin\";\n</code></pre>"},{"location":"sp-admin/#basic-example","title":"Basic Example","text":"<p>In this example we get all of the web templates' information.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp-admin\";\n\nconst sp = spfi(...);\n\n// note the \"admin\" node now available\nconst templates = await sp.admin.tenant.getSPOTenantAllWebTemplates();\n</code></pre>"},{"location":"sp-admin/#tenant","title":"tenant","text":"<p>The <code>tenant</code> node represents calls to the <code>_api/Microsoft.Online.SharePoint.TenantAdministration.Tenant</code> api.</p> <p>When calling the <code>tenant</code> endpoint you must target the -admin site as shown here. If you do not you will get only errors.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp-admin\";\n\nconst sp = spfi(\"https://{tenant}-admin.sharepoint.com\");\n\n// The MSAL scope will be: \"https://{tenant}-admin.sharepoint.com/.default\"\n\n// default props\nconst defaultProps = await sp.admin.tenant();\n\n// all props\nconst allProps = await sp.admin.tenant.select(\"*\")();\n\n// select specific props\nconst selectedProps = await sp.admin.tenant.select(\"AllowEditing\", \"DefaultContentCenterSite\")();\n\n// call method\nconst templates = await sp.admin.tenant.getSPOTenantAllWebTemplates();\n</code></pre>"},{"location":"sp-admin/#office365tenant","title":"office365Tenant","text":"<p>The <code>office365Tenant</code> node represents calls to the <code>_api/Microsoft.Online.SharePoint.TenantManagement.Office365Tenant</code> end point and is accessible from any site url.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp-admin\";\n\nconst sp = spfi(...);\n\n// default props\nconst defaultProps = await sp.admin.office365Tenant();\n\n// all props\nconst allProps = await sp.admin.office365Tenant.select(\"*\")();\n\n// selected props\nconst selectedProps = await sp.admin.office365Tenant.select(\"AllowEditing\", \"DefaultContentCenterSite\")();\n\n// call method\nconst externalUsers = await sp.admin.office365Tenant.getExternalUsers();\n</code></pre>"},{"location":"sp-admin/#siteproperties","title":"siteProperties","text":"<p>The <code>siteProperties</code> node is primarily for accessing detailed properties about a site and tenant.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport \"@pnp/sp-admin\";\n\nconst sp = spfi(...);\n\n// default props\nconst defaultProps = await sp.admin.siteProperties();\n\n// all props\nconst allProps = await sp.admin.siteProperties.select(\"*\")();\n\n// selected props\nconst selectedProps = await sp.admin.siteProperties.select(\"LockState\")();\n\n// call method\nawait sp.admin.siteProperties.clearSharingLockDown(\"https://tenant.sharepoint.com/sites/site1\");\n</code></pre> <p>For more information on the methods available and how to use them, please review the code comments in the source.</p>"},{"location":"sp-admin/#call","title":"call","text":"<p>All those nodes support a <code>call</code> method to easily allow calling methods not explictly added to the library. If there is a method you use often that would be a good candidate to add, please open an issue or submit a PR. The call method is meant to help unblock folks before methods are added.</p> <p>This sample shows using call to invoke the \"AddTenantCdnOrigin\" method of office365Tenant. While we already support for this method, it helps to show the relationship between <code>call</code> and an existing method.</p> <pre><code>import { spfi } from \"@pnp/sp\";\nimport { SPOTenantCdnType } from '@pnp/sp-admin';\n\nconst sp = spfi(...);\n\n// call AddTenantCdnOrigin\nawait sp.admin.office365Tenant.call&lt;void&gt;(\"AddTenantCdnOrigin\", {\n    \"cdnType\": SPOTenantCdnType.Public,\n    \"originUrl\": \"*/clientsideassets\"\n});\n\nconst spTenant = spfi(\"https://{tenant}-admin.sharepoint.com\");\n\n// call GetSiteSubscriptionId which takes no args\nconst id = await spTenant.admin.tenant.call&lt;string&gt;(\"GetSiteSubscriptionId\");\n</code></pre>"}]}